/*
 * hacca - C Toolkit for the HL7 Protocol
 *
 * Warning: This file was automatically generated by [hawk], please do not edit.
 *          Thu  6 Aug 13:19:10 CEST 2020
 *
 * R. Carbone (rocco@tecsiel.it)
 * Jun 2020
 *
 * SPDX-License-Identifier: BSD-2-Clause-FreeBSD
 *
 * This file was developed as part of the ongoing activities related
 * to the design, implementation and execution of interoperability tests
 * between hacca-based versus Auriga HL7-based applications.
 *
 * In more details I decided to extend Auriga HL7 C++ Library with header files
 * implementing HL7 structures of the version 2.8.1 of the protocol (April 2014)
 * because the version 2.4 distributed with Auriga HL7 is a bit outdated (October 2000).
 *
 * All files in this fork were automatically generated by [hawk], an hacca-based tool
 * and strictly follow the syntax and convention originally defined
 * by Auriga HL7 C++ Library just as form of continuity, convenience
 * and respect for their superb work.
 */


#ifndef __ACK_varies_ACK__29_H__
#define __ACK_varies_ACK__29_H__

#include "../../common/Util.h"
#include "../segment/Acknowledgment.h"
#include "../segment/Authentication.h"
#include "../segment/(Error).h"
#include "../segment/Error.h"
#include "../segment/Message.h"
#include "../segment/MSA.h"
#include "../segment/MSH.h"
#include "../segment/SFT.h"
#include "../segment/Software.h"
#include "../segment/UAC.h"

namespace HL7_29 {

/*  */
struct ACK_varies_ACK : public HL7Message {
  ACK_varies_ACK() { this->init(); }
  /* Fields ID  */
  enum FIELD_ID {
    ACK_varies_ACK_MSH_1,
    ACK_varies_ACK_Message_2,
    ACK_varies_ACK_SFT_3,
    ACK_varies_ACK_Software_4,
    ACK_varies_ACK_UAC_5,
    ACK_varies_ACK_Authentication_6,
    ACK_varies_ACK_MSA_7,
    ACK_varies_ACK_Acknowledgment_8,
    ACK_varies_ACK_(Error)_9,
    ACK_varies_ACK_Error_10,
    FIELD_ID_MAX
  };

  const char* className() const { return "ACK_varies_ACK"; }
  ACK_varies_ACK* create() const { return new ACK_varies_ACK(); }

 private:
  /* Initialize object */
  void init() {
    setName("ACK_varies_ACK");
    addObject<MSH>(ACK_varies_ACK_MSH_1, "MSH.1", HL7::initialized, HL7::repetition_off);
    addObject<Message>(ACK_varies_ACK_Message_2, "Message.2", HL7::initialized, HL7::repetition_off);
    addObject<SFT>(ACK_varies_ACK_SFT_3, "SFT.3", HL7::optional, HL7::repetition_on);
    addObject<Software>(ACK_varies_ACK_Software_4, "Software.4", HL7::initialized, HL7::repetition_off);
    addObject<UAC>(ACK_varies_ACK_UAC_5, "UAC.5", HL7::optional, HL7::repetition_off);
    addObject<Authentication>(ACK_varies_ACK_Authentication_6, "Authentication.6", HL7::initialized, HL7::repetition_off);
    addObject<MSA>(ACK_varies_ACK_MSA_7, "MSA.7", HL7::initialized, HL7::repetition_off);
    addObject<Acknowledgment>(ACK_varies_ACK_Acknowledgment_8, "Acknowledgment.8", HL7::initialized, HL7::repetition_off);
    addObject<(Error)>(ACK_varies_ACK_(Error)_9, "(Error).9", HL7::initialized, HL7::repetition_off);
    addObject<Error>(ACK_varies_ACK_Error_10, "Error.10", HL7::initialized, HL7::repetition_off);
  }

 public:
  /* Getters list */
  MSH* getMSH_1(size_t index = 0) {
    return (MSH*)this->getObjectSafe(index, ACK_varies_ACK_MSH_1);
  }
  Message* getMessage_2(size_t index = 0) {
    return (Message*)this->getObjectSafe(index, ACK_varies_ACK_Message_2);
  }
  SFT* getSFT_3(size_t index = 0) {
    return (SFT*)this->getObjectSafe(index, ACK_varies_ACK_SFT_3);
  }
  Software* getSoftware_4(size_t index = 0) {
    return (Software*)this->getObjectSafe(index, ACK_varies_ACK_Software_4);
  }
  UAC* getUAC_5(size_t index = 0) {
    return (UAC*)this->getObjectSafe(index, ACK_varies_ACK_UAC_5);
  }
  Authentication* getAuthentication_6(size_t index = 0) {
    return (Authentication*)this->getObjectSafe(index, ACK_varies_ACK_Authentication_6);
  }
  MSA* getMSA_7(size_t index = 0) {
    return (MSA*)this->getObjectSafe(index, ACK_varies_ACK_MSA_7);
  }
  Acknowledgment* getAcknowledgment_8(size_t index = 0) {
    return (Acknowledgment*)this->getObjectSafe(index, ACK_varies_ACK_Acknowledgment_8);
  }
  (Error)* get(Error)_9(size_t index = 0) {
    return ((Error)*)this->getObjectSafe(index, ACK_varies_ACK_(Error)_9);
  }
  Error* getError_10(size_t index = 0) {
    return (Error*)this->getObjectSafe(index, ACK_varies_ACK_Error_10);
  }

  /* Checker list */
  bool isMSH_1(size_t index = 0) {
    try {
      return this->getObject(index, ACK_varies_ACK_MSH_1) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isMessage_2(size_t index = 0) {
    try {
      return this->getObject(index, ACK_varies_ACK_Message_2) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isSFT_3(size_t index = 0) {
    try {
      return this->getObject(index, ACK_varies_ACK_SFT_3) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isSoftware_4(size_t index = 0) {
    try {
      return this->getObject(index, ACK_varies_ACK_Software_4) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isUAC_5(size_t index = 0) {
    try {
      return this->getObject(index, ACK_varies_ACK_UAC_5) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isAuthentication_6(size_t index = 0) {
    try {
      return this->getObject(index, ACK_varies_ACK_Authentication_6) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isMSA_7(size_t index = 0) {
    try {
      return this->getObject(index, ACK_varies_ACK_MSA_7) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isAcknowledgment_8(size_t index = 0) {
    try {
      return this->getObject(index, ACK_varies_ACK_Acknowledgment_8) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool is(Error)_9(size_t index = 0) {
    try {
      return this->getObject(index, ACK_varies_ACK_(Error)_9) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isError_10(size_t index = 0) {
    try {
      return this->getObject(index, ACK_varies_ACK_Error_10) != NULL;
    } catch (...) {
    }
    return false;
  }
}; /* ACK_varies_ACK_ */
} /* namespace HL7_29 */
#endif /*  __ACK_varies_ACK__29_H__ */
