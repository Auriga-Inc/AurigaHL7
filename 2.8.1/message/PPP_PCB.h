/*
 * hacca - C Toolkit for the HL7 Protocol
 *
 * Warning: This file was automatically generated by [hawk], please do not edit.
 *          Thu 25 Jun 19:05:59 CEST 2020
 *
 * R. Carbone (rocco@tecsiel.it)
 * Jun 2020
 *
 * SPDX-License-Identifier: BSD-2-Clause-FreeBSD
 *
 * This file was developed as part of the ongoing activities related
 * to the design, implementation and execution of interoperability tests
 * between hacca-based versus AurigaHL7-based applications.
 *
 * In more details I decided to extend AurigaHL7 C++ Library with header files
 * implementing HL7 structures of the version 2.8.1 of the protocol (April 2014)
 * because the version 2.4 distributed with AurigaHL7 is a bit outdated (October 2000).
 *
 * All files in this fork was automatically generated by hacca-based tool [hawk]
 * and strictly follow the syntax and convention originally defined
 * by Auriga HL7 C++ Library just as form of continuity, convenience
 * and respect for their superb work.
 */


#ifndef __PPP_PCB__281_H__
#define __PPP_PCB__281_H__

#include "../../common/Util.h"
#include "../segment/GOL.h"
#include "../segment/Hxx.h"
#include "../segment/MSH.h"
#include "../segment/NTE.h"
#include "../segment/OBR.h"
#include "../segment/OBX.h"
#include "../segment/ORC.h"
#include "../segment/PID.h"
#include "../segment/PRB.h"
#include "../segment/PRT.h"
#include "../segment/PTH.h"
#include "../segment/PV1.h"
#include "../segment/PV2.h"
#include "../segment/ROL.h"
#include "../segment/SFT.h"
#include "../segment/UAC.h"
#include "../segment/VAR.h"

namespace HL7_281 {

/* Internal structures/groups */
struct PPP_PCB_PATIENT_VISIT; /* PATIENT_VISIT */
struct PPP_PCB_PATHWAY; /* PATHWAY */
struct PPP_PCB_PATHWAY_ROLE; /* PATHWAY_ROLE */
struct PPP_PCB_PROBLEM; /* PROBLEM */
struct PPP_PCB_PROBLEM_ROLE; /* PROBLEM_ROLE */
struct PPP_PCB_PROBLEM_OBSERVATION; /* PROBLEM_OBSERVATION */
struct PPP_PCB_GOAL; /* GOAL */
struct PPP_PCB_ORDER; /* ORDER */
struct PPP_PCB_GOAL_ROLE; /* GOAL_ROLE */
struct PPP_PCB_GOAL_OBSERVATION; /* GOAL_OBSERVATION */
struct PPP_PCB_GOAL_ROLE; /* GOAL_ROLE */
struct PPP_PCB_GOAL_OBSERVATION; /* GOAL_OBSERVATION */
struct PPP_PCB_ORDER_DETAIL; /* ORDER_DETAIL */
struct PPP_PCB_ORDER_OBSERVATION; /* ORDER_OBSERVATION */

/* PATIENT_VISIT */
struct PPP_PCB_PATIENT_VISIT : public HL7Group {
  PPP_PCB_PATIENT_VISIT() { this->init(); }
  /* Fields ID  */
  enum FIELD_ID {
    PPP_PCB_PV1_1,
    PPP_PCB_PV2_2,
    FIELD_ID_MAX
  };

  const char* className() const { return "PPP_PCB_PATIENT_VISIT"; }
  PPP_PCB_PATIENT_VISIT* create() const { return new PPP_PCB_PATIENT_VISIT(); }

 private:
  /* Initialize object */
  void init() {
    setName("PPP_PCB.PATIENT_VISIT");
    addObject<PV1>(PPP_PCB_PV1_1, "PV1.1", HL7::optional, HL7::repetition_on);
    addObject<PV2>(PPP_PCB_PV2_2, "PV2.2", HL7::optional, HL7::repetition_on);
  }

 public:
  /* Getters list */
  PV1* getPV1_1(size_t index = 0) {
    return (PV1*)this->getObjectSafe(index, PPP_PCB_PV1_1);
  }
  PV2* getPV2_2(size_t index = 0) {
    return (PV2*)this->getObjectSafe(index, PPP_PCB_PV2_2);
  }

  /* Checker list */
  bool isPV1_1(size_t index = 0) {
    try {
      return this->getObject(index, PPP_PCB_PV1_1) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isPV2_2(size_t index = 0) {
    try {
      return this->getObject(index, PPP_PCB_PV2_2) != NULL;
    } catch (...) {
    }
    return false;
  }
}; /* PPP_PCB_PATIENT_VISIT */

/* PATHWAY */
struct PPP_PCB_PATHWAY : public HL7Group {
  PPP_PCB_PATHWAY() { this->init(); }
  /* Fields ID  */
  enum FIELD_ID {
    PPP_PCB_NTE_1,
    PPP_PCB_PPP_PCB_PATHWAY_ROLE_2,
    PPP_PCB_PPP_PCB_PROBLEM_3,
    PPP_PCB_PTH_4,
    PPP_PCB_VAR_5,
    FIELD_ID_MAX
  };

  const char* className() const { return "PPP_PCB_PATHWAY"; }
  PPP_PCB_PATHWAY* create() const { return new PPP_PCB_PATHWAY(); }

 private:
  /* Initialize object */
  void init() {
    setName("PPP_PCB.PATHWAY");
    addObject<NTE>(PPP_PCB_NTE_1, "NTE.1", HL7::optional, HL7::repetition_on);
    addObject<PPP_PCB_PATHWAY_ROLE>(PPP_PCB_PPP_PCB_PATHWAY_ROLE_2, "PPP_PCB_PATHWAY_ROLE.2", HL7::optional, HL7::repetition_on);
    addObject<PPP_PCB_PROBLEM>(PPP_PCB_PPP_PCB_PROBLEM_3, "PPP_PCB_PROBLEM.3", HL7::optional, HL7::repetition_on);
    addObject<PTH>(PPP_PCB_PTH_4, "PTH.4", HL7::optional, HL7::repetition_on);
    addObject<VAR>(PPP_PCB_VAR_5, "VAR.5", HL7::optional, HL7::repetition_on);
  }

 public:
  /* Getters list */
  NTE* getNTE_1(size_t index = 0) {
    return (NTE*)this->getObjectSafe(index, PPP_PCB_NTE_1);
  }
  PPP_PCB_PATHWAY_ROLE* getPPP_PCB_PATHWAY_ROLE_2(size_t index = 0) {
    return (PPP_PCB_PATHWAY_ROLE*)this->getObjectSafe(index, PPP_PCB_PPP_PCB_PATHWAY_ROLE_2);
  }
  PPP_PCB_PROBLEM* getPPP_PCB_PROBLEM_3(size_t index = 0) {
    return (PPP_PCB_PROBLEM*)this->getObjectSafe(index, PPP_PCB_PPP_PCB_PROBLEM_3);
  }
  PTH* getPTH_4(size_t index = 0) {
    return (PTH*)this->getObjectSafe(index, PPP_PCB_PTH_4);
  }
  VAR* getVAR_5(size_t index = 0) {
    return (VAR*)this->getObjectSafe(index, PPP_PCB_VAR_5);
  }

  /* Checker list */
  bool isNTE_1(size_t index = 0) {
    try {
      return this->getObject(index, PPP_PCB_NTE_1) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isPPP_PCB_PATHWAY_ROLE_2(size_t index = 0) {
    try {
      return this->getObject(index, PPP_PCB_PPP_PCB_PATHWAY_ROLE_2) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isPPP_PCB_PROBLEM_3(size_t index = 0) {
    try {
      return this->getObject(index, PPP_PCB_PPP_PCB_PROBLEM_3) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isPTH_4(size_t index = 0) {
    try {
      return this->getObject(index, PPP_PCB_PTH_4) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isVAR_5(size_t index = 0) {
    try {
      return this->getObject(index, PPP_PCB_VAR_5) != NULL;
    } catch (...) {
    }
    return false;
  }
}; /* PPP_PCB_PATHWAY */

/* PATHWAY_ROLE */
struct PPP_PCB_PATHWAY_ROLE : public HL7Group {
  PPP_PCB_PATHWAY_ROLE() { this->init(); }
  /* Fields ID  */
  enum FIELD_ID {
    PPP_PCB_ROL_1,
    PPP_PCB_VAR_2,
    FIELD_ID_MAX
  };

  const char* className() const { return "PPP_PCB_PATHWAY_ROLE"; }
  PPP_PCB_PATHWAY_ROLE* create() const { return new PPP_PCB_PATHWAY_ROLE(); }

 private:
  /* Initialize object */
  void init() {
    setName("PPP_PCB.PATHWAY_ROLE");
    addObject<ROL>(PPP_PCB_ROL_1, "ROL.1", HL7::optional, HL7::repetition_on);
    addObject<VAR>(PPP_PCB_VAR_2, "VAR.2", HL7::optional, HL7::repetition_on);
  }

 public:
  /* Getters list */
  ROL* getROL_1(size_t index = 0) {
    return (ROL*)this->getObjectSafe(index, PPP_PCB_ROL_1);
  }
  VAR* getVAR_2(size_t index = 0) {
    return (VAR*)this->getObjectSafe(index, PPP_PCB_VAR_2);
  }

  /* Checker list */
  bool isROL_1(size_t index = 0) {
    try {
      return this->getObject(index, PPP_PCB_ROL_1) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isVAR_2(size_t index = 0) {
    try {
      return this->getObject(index, PPP_PCB_VAR_2) != NULL;
    } catch (...) {
    }
    return false;
  }
}; /* PPP_PCB_PATHWAY_ROLE */

/* PROBLEM */
struct PPP_PCB_PROBLEM : public HL7Group {
  PPP_PCB_PROBLEM() { this->init(); }
  /* Fields ID  */
  enum FIELD_ID {
    PPP_PCB_NTE_1,
    PPP_PCB_PPP_PCB_GOAL_2,
    PPP_PCB_PPP_PCB_ORDER_3,
    PPP_PCB_PPP_PCB_PROBLEM_OBSERVATION_4,
    PPP_PCB_PPP_PCB_PROBLEM_ROLE_5,
    PPP_PCB_PRB_6,
    PPP_PCB_VAR_7,
    FIELD_ID_MAX
  };

  const char* className() const { return "PPP_PCB_PROBLEM"; }
  PPP_PCB_PROBLEM* create() const { return new PPP_PCB_PROBLEM(); }

 private:
  /* Initialize object */
  void init() {
    setName("PPP_PCB.PROBLEM");
    addObject<NTE>(PPP_PCB_NTE_1, "NTE.1", HL7::optional, HL7::repetition_on);
    addObject<PPP_PCB_GOAL>(PPP_PCB_PPP_PCB_GOAL_2, "PPP_PCB_GOAL.2", HL7::optional, HL7::repetition_on);
    addObject<PPP_PCB_ORDER>(PPP_PCB_PPP_PCB_ORDER_3, "PPP_PCB_ORDER.3", HL7::optional, HL7::repetition_on);
    addObject<PPP_PCB_PROBLEM_OBSERVATION>(PPP_PCB_PPP_PCB_PROBLEM_OBSERVATION_4, "PPP_PCB_PROBLEM_OBSERVATION.4", HL7::optional, HL7::repetition_on);
    addObject<PPP_PCB_PROBLEM_ROLE>(PPP_PCB_PPP_PCB_PROBLEM_ROLE_5, "PPP_PCB_PROBLEM_ROLE.5", HL7::optional, HL7::repetition_on);
    addObject<PRB>(PPP_PCB_PRB_6, "PRB.6", HL7::optional, HL7::repetition_on);
    addObject<VAR>(PPP_PCB_VAR_7, "VAR.7", HL7::optional, HL7::repetition_on);
  }

 public:
  /* Getters list */
  NTE* getNTE_1(size_t index = 0) {
    return (NTE*)this->getObjectSafe(index, PPP_PCB_NTE_1);
  }
  PPP_PCB_GOAL* getPPP_PCB_GOAL_2(size_t index = 0) {
    return (PPP_PCB_GOAL*)this->getObjectSafe(index, PPP_PCB_PPP_PCB_GOAL_2);
  }
  PPP_PCB_ORDER* getPPP_PCB_ORDER_3(size_t index = 0) {
    return (PPP_PCB_ORDER*)this->getObjectSafe(index, PPP_PCB_PPP_PCB_ORDER_3);
  }
  PPP_PCB_PROBLEM_OBSERVATION* getPPP_PCB_PROBLEM_OBSERVATION_4(size_t index = 0) {
    return (PPP_PCB_PROBLEM_OBSERVATION*)this->getObjectSafe(index, PPP_PCB_PPP_PCB_PROBLEM_OBSERVATION_4);
  }
  PPP_PCB_PROBLEM_ROLE* getPPP_PCB_PROBLEM_ROLE_5(size_t index = 0) {
    return (PPP_PCB_PROBLEM_ROLE*)this->getObjectSafe(index, PPP_PCB_PPP_PCB_PROBLEM_ROLE_5);
  }
  PRB* getPRB_6(size_t index = 0) {
    return (PRB*)this->getObjectSafe(index, PPP_PCB_PRB_6);
  }
  VAR* getVAR_7(size_t index = 0) {
    return (VAR*)this->getObjectSafe(index, PPP_PCB_VAR_7);
  }

  /* Checker list */
  bool isNTE_1(size_t index = 0) {
    try {
      return this->getObject(index, PPP_PCB_NTE_1) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isPPP_PCB_GOAL_2(size_t index = 0) {
    try {
      return this->getObject(index, PPP_PCB_PPP_PCB_GOAL_2) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isPPP_PCB_ORDER_3(size_t index = 0) {
    try {
      return this->getObject(index, PPP_PCB_PPP_PCB_ORDER_3) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isPPP_PCB_PROBLEM_OBSERVATION_4(size_t index = 0) {
    try {
      return this->getObject(index, PPP_PCB_PPP_PCB_PROBLEM_OBSERVATION_4) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isPPP_PCB_PROBLEM_ROLE_5(size_t index = 0) {
    try {
      return this->getObject(index, PPP_PCB_PPP_PCB_PROBLEM_ROLE_5) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isPRB_6(size_t index = 0) {
    try {
      return this->getObject(index, PPP_PCB_PRB_6) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isVAR_7(size_t index = 0) {
    try {
      return this->getObject(index, PPP_PCB_VAR_7) != NULL;
    } catch (...) {
    }
    return false;
  }
}; /* PPP_PCB_PROBLEM */

/* PROBLEM_ROLE */
struct PPP_PCB_PROBLEM_ROLE : public HL7Group {
  PPP_PCB_PROBLEM_ROLE() { this->init(); }
  /* Fields ID  */
  enum FIELD_ID {
    PPP_PCB_ROL_1,
    PPP_PCB_VAR_2,
    FIELD_ID_MAX
  };

  const char* className() const { return "PPP_PCB_PROBLEM_ROLE"; }
  PPP_PCB_PROBLEM_ROLE* create() const { return new PPP_PCB_PROBLEM_ROLE(); }

 private:
  /* Initialize object */
  void init() {
    setName("PPP_PCB.PROBLEM_ROLE");
    addObject<ROL>(PPP_PCB_ROL_1, "ROL.1", HL7::optional, HL7::repetition_on);
    addObject<VAR>(PPP_PCB_VAR_2, "VAR.2", HL7::optional, HL7::repetition_on);
  }

 public:
  /* Getters list */
  ROL* getROL_1(size_t index = 0) {
    return (ROL*)this->getObjectSafe(index, PPP_PCB_ROL_1);
  }
  VAR* getVAR_2(size_t index = 0) {
    return (VAR*)this->getObjectSafe(index, PPP_PCB_VAR_2);
  }

  /* Checker list */
  bool isROL_1(size_t index = 0) {
    try {
      return this->getObject(index, PPP_PCB_ROL_1) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isVAR_2(size_t index = 0) {
    try {
      return this->getObject(index, PPP_PCB_VAR_2) != NULL;
    } catch (...) {
    }
    return false;
  }
}; /* PPP_PCB_PROBLEM_ROLE */

/* PROBLEM_OBSERVATION */
struct PPP_PCB_PROBLEM_OBSERVATION : public HL7Group {
  PPP_PCB_PROBLEM_OBSERVATION() { this->init(); }
  /* Fields ID  */
  enum FIELD_ID {
    PPP_PCB_NTE_1,
    PPP_PCB_OBX_2,
    PPP_PCB_PRT_3,
    FIELD_ID_MAX
  };

  const char* className() const { return "PPP_PCB_PROBLEM_OBSERVATION"; }
  PPP_PCB_PROBLEM_OBSERVATION* create() const { return new PPP_PCB_PROBLEM_OBSERVATION(); }

 private:
  /* Initialize object */
  void init() {
    setName("PPP_PCB.PROBLEM_OBSERVATION");
    addObject<NTE>(PPP_PCB_NTE_1, "NTE.1", HL7::optional, HL7::repetition_on);
    addObject<OBX>(PPP_PCB_OBX_2, "OBX.2", HL7::optional, HL7::repetition_on);
    addObject<PRT>(PPP_PCB_PRT_3, "PRT.3", HL7::optional, HL7::repetition_on);
  }

 public:
  /* Getters list */
  NTE* getNTE_1(size_t index = 0) {
    return (NTE*)this->getObjectSafe(index, PPP_PCB_NTE_1);
  }
  OBX* getOBX_2(size_t index = 0) {
    return (OBX*)this->getObjectSafe(index, PPP_PCB_OBX_2);
  }
  PRT* getPRT_3(size_t index = 0) {
    return (PRT*)this->getObjectSafe(index, PPP_PCB_PRT_3);
  }

  /* Checker list */
  bool isNTE_1(size_t index = 0) {
    try {
      return this->getObject(index, PPP_PCB_NTE_1) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isOBX_2(size_t index = 0) {
    try {
      return this->getObject(index, PPP_PCB_OBX_2) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isPRT_3(size_t index = 0) {
    try {
      return this->getObject(index, PPP_PCB_PRT_3) != NULL;
    } catch (...) {
    }
    return false;
  }
}; /* PPP_PCB_PROBLEM_OBSERVATION */

/* GOAL */
struct PPP_PCB_GOAL : public HL7Group {
  PPP_PCB_GOAL() { this->init(); }
  /* Fields ID  */
  enum FIELD_ID {
    PPP_PCB_GOL_1,
    PPP_PCB_NTE_2,
    PPP_PCB_PPP_PCB_GOAL_OBSERVATION_3,
    PPP_PCB_PPP_PCB_GOAL_ROLE_4,
    PPP_PCB_VAR_5,
    FIELD_ID_MAX
  };

  const char* className() const { return "PPP_PCB_GOAL"; }
  PPP_PCB_GOAL* create() const { return new PPP_PCB_GOAL(); }

 private:
  /* Initialize object */
  void init() {
    setName("PPP_PCB.GOAL");
    addObject<GOL>(PPP_PCB_GOL_1, "GOL.1", HL7::optional, HL7::repetition_on);
    addObject<NTE>(PPP_PCB_NTE_2, "NTE.2", HL7::optional, HL7::repetition_on);
    addObject<PPP_PCB_GOAL_OBSERVATION>(PPP_PCB_PPP_PCB_GOAL_OBSERVATION_3, "PPP_PCB_GOAL_OBSERVATION.3", HL7::optional, HL7::repetition_on);
    addObject<PPP_PCB_GOAL_ROLE>(PPP_PCB_PPP_PCB_GOAL_ROLE_4, "PPP_PCB_GOAL_ROLE.4", HL7::optional, HL7::repetition_on);
    addObject<VAR>(PPP_PCB_VAR_5, "VAR.5", HL7::optional, HL7::repetition_on);
  }

 public:
  /* Getters list */
  GOL* getGOL_1(size_t index = 0) {
    return (GOL*)this->getObjectSafe(index, PPP_PCB_GOL_1);
  }
  NTE* getNTE_2(size_t index = 0) {
    return (NTE*)this->getObjectSafe(index, PPP_PCB_NTE_2);
  }
  PPP_PCB_GOAL_OBSERVATION* getPPP_PCB_GOAL_OBSERVATION_3(size_t index = 0) {
    return (PPP_PCB_GOAL_OBSERVATION*)this->getObjectSafe(index, PPP_PCB_PPP_PCB_GOAL_OBSERVATION_3);
  }
  PPP_PCB_GOAL_ROLE* getPPP_PCB_GOAL_ROLE_4(size_t index = 0) {
    return (PPP_PCB_GOAL_ROLE*)this->getObjectSafe(index, PPP_PCB_PPP_PCB_GOAL_ROLE_4);
  }
  VAR* getVAR_5(size_t index = 0) {
    return (VAR*)this->getObjectSafe(index, PPP_PCB_VAR_5);
  }

  /* Checker list */
  bool isGOL_1(size_t index = 0) {
    try {
      return this->getObject(index, PPP_PCB_GOL_1) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isNTE_2(size_t index = 0) {
    try {
      return this->getObject(index, PPP_PCB_NTE_2) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isPPP_PCB_GOAL_OBSERVATION_3(size_t index = 0) {
    try {
      return this->getObject(index, PPP_PCB_PPP_PCB_GOAL_OBSERVATION_3) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isPPP_PCB_GOAL_ROLE_4(size_t index = 0) {
    try {
      return this->getObject(index, PPP_PCB_PPP_PCB_GOAL_ROLE_4) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isVAR_5(size_t index = 0) {
    try {
      return this->getObject(index, PPP_PCB_VAR_5) != NULL;
    } catch (...) {
    }
    return false;
  }
}; /* PPP_PCB_GOAL */

/* ORDER */
struct PPP_PCB_ORDER : public HL7Group {
  PPP_PCB_ORDER() { this->init(); }
  /* Fields ID  */
  enum FIELD_ID {
    PPP_PCB_ORC_1,
    PPP_PCB_PPP_PCB_ORDER_DETAIL_2,
    FIELD_ID_MAX
  };

  const char* className() const { return "PPP_PCB_ORDER"; }
  PPP_PCB_ORDER* create() const { return new PPP_PCB_ORDER(); }

 private:
  /* Initialize object */
  void init() {
    setName("PPP_PCB.ORDER");
    addObject<ORC>(PPP_PCB_ORC_1, "ORC.1", HL7::optional, HL7::repetition_on);
    addObject<PPP_PCB_ORDER_DETAIL>(PPP_PCB_PPP_PCB_ORDER_DETAIL_2, "PPP_PCB_ORDER_DETAIL.2", HL7::optional, HL7::repetition_on);
  }

 public:
  /* Getters list */
  ORC* getORC_1(size_t index = 0) {
    return (ORC*)this->getObjectSafe(index, PPP_PCB_ORC_1);
  }
  PPP_PCB_ORDER_DETAIL* getPPP_PCB_ORDER_DETAIL_2(size_t index = 0) {
    return (PPP_PCB_ORDER_DETAIL*)this->getObjectSafe(index, PPP_PCB_PPP_PCB_ORDER_DETAIL_2);
  }

  /* Checker list */
  bool isORC_1(size_t index = 0) {
    try {
      return this->getObject(index, PPP_PCB_ORC_1) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isPPP_PCB_ORDER_DETAIL_2(size_t index = 0) {
    try {
      return this->getObject(index, PPP_PCB_PPP_PCB_ORDER_DETAIL_2) != NULL;
    } catch (...) {
    }
    return false;
  }
}; /* PPP_PCB_ORDER */

/* GOAL_ROLE */
struct PPP_PCB_GOAL_ROLE : public HL7Group {
  PPP_PCB_GOAL_ROLE() { this->init(); }
  /* Fields ID  */
  enum FIELD_ID {
    PPP_PCB_ROL_1,
    PPP_PCB_VAR_2,
    FIELD_ID_MAX
  };

  const char* className() const { return "PPP_PCB_GOAL_ROLE"; }
  PPP_PCB_GOAL_ROLE* create() const { return new PPP_PCB_GOAL_ROLE(); }

 private:
  /* Initialize object */
  void init() {
    setName("PPP_PCB.GOAL_ROLE");
    addObject<ROL>(PPP_PCB_ROL_1, "ROL.1", HL7::optional, HL7::repetition_on);
    addObject<VAR>(PPP_PCB_VAR_2, "VAR.2", HL7::optional, HL7::repetition_on);
  }

 public:
  /* Getters list */
  ROL* getROL_1(size_t index = 0) {
    return (ROL*)this->getObjectSafe(index, PPP_PCB_ROL_1);
  }
  VAR* getVAR_2(size_t index = 0) {
    return (VAR*)this->getObjectSafe(index, PPP_PCB_VAR_2);
  }

  /* Checker list */
  bool isROL_1(size_t index = 0) {
    try {
      return this->getObject(index, PPP_PCB_ROL_1) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isVAR_2(size_t index = 0) {
    try {
      return this->getObject(index, PPP_PCB_VAR_2) != NULL;
    } catch (...) {
    }
    return false;
  }
}; /* PPP_PCB_GOAL_ROLE */

/* GOAL_OBSERVATION */
struct PPP_PCB_GOAL_OBSERVATION : public HL7Group {
  PPP_PCB_GOAL_OBSERVATION() { this->init(); }
  /* Fields ID  */
  enum FIELD_ID {
    PPP_PCB_NTE_1,
    PPP_PCB_OBX_2,
    PPP_PCB_PRT_3,
    FIELD_ID_MAX
  };

  const char* className() const { return "PPP_PCB_GOAL_OBSERVATION"; }
  PPP_PCB_GOAL_OBSERVATION* create() const { return new PPP_PCB_GOAL_OBSERVATION(); }

 private:
  /* Initialize object */
  void init() {
    setName("PPP_PCB.GOAL_OBSERVATION");
    addObject<NTE>(PPP_PCB_NTE_1, "NTE.1", HL7::optional, HL7::repetition_on);
    addObject<OBX>(PPP_PCB_OBX_2, "OBX.2", HL7::optional, HL7::repetition_on);
    addObject<PRT>(PPP_PCB_PRT_3, "PRT.3", HL7::optional, HL7::repetition_on);
  }

 public:
  /* Getters list */
  NTE* getNTE_1(size_t index = 0) {
    return (NTE*)this->getObjectSafe(index, PPP_PCB_NTE_1);
  }
  OBX* getOBX_2(size_t index = 0) {
    return (OBX*)this->getObjectSafe(index, PPP_PCB_OBX_2);
  }
  PRT* getPRT_3(size_t index = 0) {
    return (PRT*)this->getObjectSafe(index, PPP_PCB_PRT_3);
  }

  /* Checker list */
  bool isNTE_1(size_t index = 0) {
    try {
      return this->getObject(index, PPP_PCB_NTE_1) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isOBX_2(size_t index = 0) {
    try {
      return this->getObject(index, PPP_PCB_OBX_2) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isPRT_3(size_t index = 0) {
    try {
      return this->getObject(index, PPP_PCB_PRT_3) != NULL;
    } catch (...) {
    }
    return false;
  }
}; /* PPP_PCB_GOAL_OBSERVATION */

/* ORDER_DETAIL */
struct PPP_PCB_ORDER_DETAIL : public HL7Group {
  PPP_PCB_ORDER_DETAIL() { this->init(); }
  /* Fields ID  */
  enum FIELD_ID {
    PPP_PCB_Hxx_1,
    PPP_PCB_NTE_2,
    PPP_PCB_OBR_3,
    PPP_PCB_PPP_PCB_ORDER_OBSERVATION_4,
    PPP_PCB_VAR_5,
    FIELD_ID_MAX
  };

  const char* className() const { return "PPP_PCB_ORDER_DETAIL"; }
  PPP_PCB_ORDER_DETAIL* create() const { return new PPP_PCB_ORDER_DETAIL(); }

 private:
  /* Initialize object */
  void init() {
    setName("PPP_PCB.ORDER_DETAIL");
    addObject<Hxx>(PPP_PCB_Hxx_1, "Hxx.1", HL7::optional, HL7::repetition_on);
    addObject<NTE>(PPP_PCB_NTE_2, "NTE.2", HL7::optional, HL7::repetition_on);
    addObject<OBR>(PPP_PCB_OBR_3, "OBR.3", HL7::optional, HL7::repetition_on);
    addObject<PPP_PCB_ORDER_OBSERVATION>(PPP_PCB_PPP_PCB_ORDER_OBSERVATION_4, "PPP_PCB_ORDER_OBSERVATION.4", HL7::optional, HL7::repetition_on);
    addObject<VAR>(PPP_PCB_VAR_5, "VAR.5", HL7::optional, HL7::repetition_on);
  }

 public:
  /* Getters list */
  Hxx* getHxx_1(size_t index = 0) {
    return (Hxx*)this->getObjectSafe(index, PPP_PCB_Hxx_1);
  }
  NTE* getNTE_2(size_t index = 0) {
    return (NTE*)this->getObjectSafe(index, PPP_PCB_NTE_2);
  }
  OBR* getOBR_3(size_t index = 0) {
    return (OBR*)this->getObjectSafe(index, PPP_PCB_OBR_3);
  }
  PPP_PCB_ORDER_OBSERVATION* getPPP_PCB_ORDER_OBSERVATION_4(size_t index = 0) {
    return (PPP_PCB_ORDER_OBSERVATION*)this->getObjectSafe(index, PPP_PCB_PPP_PCB_ORDER_OBSERVATION_4);
  }
  VAR* getVAR_5(size_t index = 0) {
    return (VAR*)this->getObjectSafe(index, PPP_PCB_VAR_5);
  }

  /* Checker list */
  bool isHxx_1(size_t index = 0) {
    try {
      return this->getObject(index, PPP_PCB_Hxx_1) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isNTE_2(size_t index = 0) {
    try {
      return this->getObject(index, PPP_PCB_NTE_2) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isOBR_3(size_t index = 0) {
    try {
      return this->getObject(index, PPP_PCB_OBR_3) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isPPP_PCB_ORDER_OBSERVATION_4(size_t index = 0) {
    try {
      return this->getObject(index, PPP_PCB_PPP_PCB_ORDER_OBSERVATION_4) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isVAR_5(size_t index = 0) {
    try {
      return this->getObject(index, PPP_PCB_VAR_5) != NULL;
    } catch (...) {
    }
    return false;
  }
}; /* PPP_PCB_ORDER_DETAIL */

/* ORDER_OBSERVATION */
struct PPP_PCB_ORDER_OBSERVATION : public HL7Group {
  PPP_PCB_ORDER_OBSERVATION() { this->init(); }
  /* Fields ID  */
  enum FIELD_ID {
    PPP_PCB_NTE_1,
    PPP_PCB_OBX_2,
    PPP_PCB_PRT_3,
    PPP_PCB_VAR_4,
    FIELD_ID_MAX
  };

  const char* className() const { return "PPP_PCB_ORDER_OBSERVATION"; }
  PPP_PCB_ORDER_OBSERVATION* create() const { return new PPP_PCB_ORDER_OBSERVATION(); }

 private:
  /* Initialize object */
  void init() {
    setName("PPP_PCB.ORDER_OBSERVATION");
    addObject<NTE>(PPP_PCB_NTE_1, "NTE.1", HL7::optional, HL7::repetition_on);
    addObject<OBX>(PPP_PCB_OBX_2, "OBX.2", HL7::optional, HL7::repetition_on);
    addObject<PRT>(PPP_PCB_PRT_3, "PRT.3", HL7::optional, HL7::repetition_on);
    addObject<VAR>(PPP_PCB_VAR_4, "VAR.4", HL7::optional, HL7::repetition_on);
  }

 public:
  /* Getters list */
  NTE* getNTE_1(size_t index = 0) {
    return (NTE*)this->getObjectSafe(index, PPP_PCB_NTE_1);
  }
  OBX* getOBX_2(size_t index = 0) {
    return (OBX*)this->getObjectSafe(index, PPP_PCB_OBX_2);
  }
  PRT* getPRT_3(size_t index = 0) {
    return (PRT*)this->getObjectSafe(index, PPP_PCB_PRT_3);
  }
  VAR* getVAR_4(size_t index = 0) {
    return (VAR*)this->getObjectSafe(index, PPP_PCB_VAR_4);
  }

  /* Checker list */
  bool isNTE_1(size_t index = 0) {
    try {
      return this->getObject(index, PPP_PCB_NTE_1) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isOBX_2(size_t index = 0) {
    try {
      return this->getObject(index, PPP_PCB_OBX_2) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isPRT_3(size_t index = 0) {
    try {
      return this->getObject(index, PPP_PCB_PRT_3) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isVAR_4(size_t index = 0) {
    try {
      return this->getObject(index, PPP_PCB_VAR_4) != NULL;
    } catch (...) {
    }
    return false;
  }
}; /* PPP_PCB_ORDER_OBSERVATION */

/* PPP_PCB */
struct PPP_PCB : public HL7Message {
  PPP_PCB() { this->init(); }
  /* Fields ID  */
  enum FIELD_ID {
    PPP_PCB_MSH_1,
    PPP_PCB_SFT_2,
    PPP_PCB_UAC_3,
    PPP_PCB_PID_4,
    PPP_PCB_PTH_7,
    PPP_PCB_NTE_8,
    PPP_PCB_VAR_9,
    PPP_PCB_ROL_12,
    PPP_PCB_VAR_13,
    PPP_PCB_ROL_14,
    PPP_PCB_VAR_15,
    PPP_PCB_PRB_16,
    PPP_PCB_NTE_17,
    PPP_PCB_VAR_18,
    PPP_PCB_ROL_23,
    PPP_PCB_VAR_24,
    PPP_PCB_ROL_25,
    PPP_PCB_VAR_26,
    PPP_PCB_OBX_27,
    PPP_PCB_PRT_28,
    PPP_PCB_NTE_29,
    PPP_PCB_ROL_30,
    PPP_PCB_VAR_31,
    PPP_PCB_OBX_32,
    PPP_PCB_PRT_33,
    PPP_PCB_NTE_34,
    PPP_PCB_GOL_35,
    PPP_PCB_NTE_36,
    PPP_PCB_VAR_37,
    PPP_PCB_ROL_40,
    PPP_PCB_VAR_41,
    PPP_PCB_ROL_42,
    PPP_PCB_VAR_43,
    PPP_PCB_OBX_44,
    PPP_PCB_PRT_45,
    PPP_PCB_NTE_46,
    PPP_PCB_ROL_47,
    PPP_PCB_VAR_48,
    PPP_PCB_OBX_49,
    PPP_PCB_PRT_50,
    PPP_PCB_NTE_51,
    PPP_PCB_GOL_52,
    PPP_PCB_NTE_53,
    PPP_PCB_VAR_54,
    PPP_PCB_ORC_57,
    PPP_PCB_ROL_59,
    PPP_PCB_VAR_60,
    PPP_PCB_ROL_61,
    PPP_PCB_VAR_62,
    PPP_PCB_OBX_63,
    PPP_PCB_PRT_64,
    PPP_PCB_NTE_65,
    PPP_PCB_ROL_66,
    PPP_PCB_VAR_67,
    PPP_PCB_OBX_68,
    PPP_PCB_PRT_69,
    PPP_PCB_NTE_70,
    PPP_PCB_OBR_71,
    PPP_PCB_Hxx_72,
    PPP_PCB_NTE_73,
    PPP_PCB_VAR_74,
    PPP_PCB_OBX_97,
    PPP_PCB_PRT_98,
    PPP_PCB_NTE_99,
    PPP_PCB_VAR_100,
    PPP_PCB_PV1_101,
    PPP_PCB_PV2_102,
    FIELD_ID_MAX
  };

  const char* className() const { return "PPP_PCB"; }
  PPP_PCB* create() const { return new PPP_PCB(); }

 private:
  /* Initialize object */
  void init() {
    setName("PPP_PCB");
    addObject<MSH>(PPP_PCB_MSH_1, "MSH.1", HL7::initialized, HL7::repetition_off);
    addObject<SFT>(PPP_PCB_SFT_2, "SFT.2", HL7::optional, HL7::repetition_on);
    addObject<UAC>(PPP_PCB_UAC_3, "UAC.3", HL7::optional, HL7::repetition_off);
    addObject<PID>(PPP_PCB_PID_4, "PID.4", HL7::initialized, HL7::repetition_off);
    addObject<PTH>(PPP_PCB_PTH_7, "PTH.7", HL7::initialized, HL7::repetition_off);
    addObject<NTE>(PPP_PCB_NTE_8, "NTE.8", HL7::optional, HL7::repetition_off);
    addObject<VAR>(PPP_PCB_VAR_9, "VAR.9", HL7::optional, HL7::repetition_off);
    addObject<ROL>(PPP_PCB_ROL_12, "ROL.12", HL7::initialized, HL7::repetition_off);
    addObject<VAR>(PPP_PCB_VAR_13, "VAR.13", HL7::optional, HL7::repetition_off);
    addObject<ROL>(PPP_PCB_ROL_14, "ROL.14", HL7::initialized, HL7::repetition_off);
    addObject<VAR>(PPP_PCB_VAR_15, "VAR.15", HL7::optional, HL7::repetition_off);
    addObject<PRB>(PPP_PCB_PRB_16, "PRB.16", HL7::initialized, HL7::repetition_off);
    addObject<NTE>(PPP_PCB_NTE_17, "NTE.17", HL7::optional, HL7::repetition_off);
    addObject<VAR>(PPP_PCB_VAR_18, "VAR.18", HL7::optional, HL7::repetition_off);
    addObject<ROL>(PPP_PCB_ROL_23, "ROL.23", HL7::initialized, HL7::repetition_off);
    addObject<VAR>(PPP_PCB_VAR_24, "VAR.24", HL7::optional, HL7::repetition_off);
    addObject<ROL>(PPP_PCB_ROL_25, "ROL.25", HL7::initialized, HL7::repetition_off);
    addObject<VAR>(PPP_PCB_VAR_26, "VAR.26", HL7::optional, HL7::repetition_off);
    addObject<OBX>(PPP_PCB_OBX_27, "OBX.27", HL7::initialized, HL7::repetition_off);
    addObject<PRT>(PPP_PCB_PRT_28, "PRT.28", HL7::optional, HL7::repetition_off);
    addObject<NTE>(PPP_PCB_NTE_29, "NTE.29", HL7::optional, HL7::repetition_off);
    addObject<ROL>(PPP_PCB_ROL_30, "ROL.30", HL7::initialized, HL7::repetition_off);
    addObject<VAR>(PPP_PCB_VAR_31, "VAR.31", HL7::optional, HL7::repetition_off);
    addObject<OBX>(PPP_PCB_OBX_32, "OBX.32", HL7::initialized, HL7::repetition_off);
    addObject<PRT>(PPP_PCB_PRT_33, "PRT.33", HL7::optional, HL7::repetition_off);
    addObject<NTE>(PPP_PCB_NTE_34, "NTE.34", HL7::optional, HL7::repetition_off);
    addObject<GOL>(PPP_PCB_GOL_35, "GOL.35", HL7::initialized, HL7::repetition_off);
    addObject<NTE>(PPP_PCB_NTE_36, "NTE.36", HL7::optional, HL7::repetition_off);
    addObject<VAR>(PPP_PCB_VAR_37, "VAR.37", HL7::optional, HL7::repetition_off);
    addObject<ROL>(PPP_PCB_ROL_40, "ROL.40", HL7::initialized, HL7::repetition_off);
    addObject<VAR>(PPP_PCB_VAR_41, "VAR.41", HL7::optional, HL7::repetition_off);
    addObject<ROL>(PPP_PCB_ROL_42, "ROL.42", HL7::initialized, HL7::repetition_off);
    addObject<VAR>(PPP_PCB_VAR_43, "VAR.43", HL7::optional, HL7::repetition_off);
    addObject<OBX>(PPP_PCB_OBX_44, "OBX.44", HL7::initialized, HL7::repetition_off);
    addObject<PRT>(PPP_PCB_PRT_45, "PRT.45", HL7::optional, HL7::repetition_off);
    addObject<NTE>(PPP_PCB_NTE_46, "NTE.46", HL7::optional, HL7::repetition_off);
    addObject<ROL>(PPP_PCB_ROL_47, "ROL.47", HL7::initialized, HL7::repetition_off);
    addObject<VAR>(PPP_PCB_VAR_48, "VAR.48", HL7::optional, HL7::repetition_off);
    addObject<OBX>(PPP_PCB_OBX_49, "OBX.49", HL7::initialized, HL7::repetition_off);
    addObject<PRT>(PPP_PCB_PRT_50, "PRT.50", HL7::optional, HL7::repetition_off);
    addObject<NTE>(PPP_PCB_NTE_51, "NTE.51", HL7::optional, HL7::repetition_off);
    addObject<GOL>(PPP_PCB_GOL_52, "GOL.52", HL7::initialized, HL7::repetition_off);
    addObject<NTE>(PPP_PCB_NTE_53, "NTE.53", HL7::optional, HL7::repetition_off);
    addObject<VAR>(PPP_PCB_VAR_54, "VAR.54", HL7::optional, HL7::repetition_off);
    addObject<ORC>(PPP_PCB_ORC_57, "ORC.57", HL7::initialized, HL7::repetition_off);
    addObject<ROL>(PPP_PCB_ROL_59, "ROL.59", HL7::initialized, HL7::repetition_off);
    addObject<VAR>(PPP_PCB_VAR_60, "VAR.60", HL7::optional, HL7::repetition_off);
    addObject<ROL>(PPP_PCB_ROL_61, "ROL.61", HL7::initialized, HL7::repetition_off);
    addObject<VAR>(PPP_PCB_VAR_62, "VAR.62", HL7::optional, HL7::repetition_off);
    addObject<OBX>(PPP_PCB_OBX_63, "OBX.63", HL7::initialized, HL7::repetition_off);
    addObject<PRT>(PPP_PCB_PRT_64, "PRT.64", HL7::optional, HL7::repetition_off);
    addObject<NTE>(PPP_PCB_NTE_65, "NTE.65", HL7::optional, HL7::repetition_off);
    addObject<ROL>(PPP_PCB_ROL_66, "ROL.66", HL7::initialized, HL7::repetition_off);
    addObject<VAR>(PPP_PCB_VAR_67, "VAR.67", HL7::optional, HL7::repetition_off);
    addObject<OBX>(PPP_PCB_OBX_68, "OBX.68", HL7::initialized, HL7::repetition_off);
    addObject<PRT>(PPP_PCB_PRT_69, "PRT.69", HL7::optional, HL7::repetition_off);
    addObject<NTE>(PPP_PCB_NTE_70, "NTE.70", HL7::optional, HL7::repetition_off);
    addObject<OBR>(PPP_PCB_OBR_71, "OBR.71", HL7::initialized, HL7::repetition_off);
    addObject<Hxx>(PPP_PCB_Hxx_72, "Hxx.72", HL7::initialized, HL7::repetition_off);
    addObject<NTE>(PPP_PCB_NTE_73, "NTE.73", HL7::optional, HL7::repetition_off);
    addObject<VAR>(PPP_PCB_VAR_74, "VAR.74", HL7::optional, HL7::repetition_off);
    addObject<OBX>(PPP_PCB_OBX_97, "OBX.97", HL7::initialized, HL7::repetition_off);
    addObject<PRT>(PPP_PCB_PRT_98, "PRT.98", HL7::optional, HL7::repetition_off);
    addObject<NTE>(PPP_PCB_NTE_99, "NTE.99", HL7::optional, HL7::repetition_off);
    addObject<VAR>(PPP_PCB_VAR_100, "VAR.100", HL7::optional, HL7::repetition_off);
    addObject<PV1>(PPP_PCB_PV1_101, "PV1.101", HL7::initialized, HL7::repetition_off);
    addObject<PV2>(PPP_PCB_PV2_102, "PV2.102", HL7::optional, HL7::repetition_off);
  }

 public:
  /* Getters list */
  MSH* getMSH_1(size_t index = 0) {
    return (MSH*)this->getObjectSafe(index, PPP_PCB_MSH_1);
  }
  SFT* getSFT_2(size_t index = 0) {
    return (SFT*)this->getObjectSafe(index, PPP_PCB_SFT_2);
  }
  UAC* getUAC_3(size_t index = 0) {
    return (UAC*)this->getObjectSafe(index, PPP_PCB_UAC_3);
  }
  PID* getPID_4(size_t index = 0) {
    return (PID*)this->getObjectSafe(index, PPP_PCB_PID_4);
  }
  PTH* getPTH_7(size_t index = 0) {
    return (PTH*)this->getObjectSafe(index, PPP_PCB_PTH_7);
  }
  NTE* getNTE_8(size_t index = 0) {
    return (NTE*)this->getObjectSafe(index, PPP_PCB_NTE_8);
  }
  VAR* getVAR_9(size_t index = 0) {
    return (VAR*)this->getObjectSafe(index, PPP_PCB_VAR_9);
  }
  ROL* getROL_12(size_t index = 0) {
    return (ROL*)this->getObjectSafe(index, PPP_PCB_ROL_12);
  }
  VAR* getVAR_13(size_t index = 0) {
    return (VAR*)this->getObjectSafe(index, PPP_PCB_VAR_13);
  }
  ROL* getROL_14(size_t index = 0) {
    return (ROL*)this->getObjectSafe(index, PPP_PCB_ROL_14);
  }
  VAR* getVAR_15(size_t index = 0) {
    return (VAR*)this->getObjectSafe(index, PPP_PCB_VAR_15);
  }
  PRB* getPRB_16(size_t index = 0) {
    return (PRB*)this->getObjectSafe(index, PPP_PCB_PRB_16);
  }
  NTE* getNTE_17(size_t index = 0) {
    return (NTE*)this->getObjectSafe(index, PPP_PCB_NTE_17);
  }
  VAR* getVAR_18(size_t index = 0) {
    return (VAR*)this->getObjectSafe(index, PPP_PCB_VAR_18);
  }
  ROL* getROL_23(size_t index = 0) {
    return (ROL*)this->getObjectSafe(index, PPP_PCB_ROL_23);
  }
  VAR* getVAR_24(size_t index = 0) {
    return (VAR*)this->getObjectSafe(index, PPP_PCB_VAR_24);
  }
  ROL* getROL_25(size_t index = 0) {
    return (ROL*)this->getObjectSafe(index, PPP_PCB_ROL_25);
  }
  VAR* getVAR_26(size_t index = 0) {
    return (VAR*)this->getObjectSafe(index, PPP_PCB_VAR_26);
  }
  OBX* getOBX_27(size_t index = 0) {
    return (OBX*)this->getObjectSafe(index, PPP_PCB_OBX_27);
  }
  PRT* getPRT_28(size_t index = 0) {
    return (PRT*)this->getObjectSafe(index, PPP_PCB_PRT_28);
  }
  NTE* getNTE_29(size_t index = 0) {
    return (NTE*)this->getObjectSafe(index, PPP_PCB_NTE_29);
  }
  ROL* getROL_30(size_t index = 0) {
    return (ROL*)this->getObjectSafe(index, PPP_PCB_ROL_30);
  }
  VAR* getVAR_31(size_t index = 0) {
    return (VAR*)this->getObjectSafe(index, PPP_PCB_VAR_31);
  }
  OBX* getOBX_32(size_t index = 0) {
    return (OBX*)this->getObjectSafe(index, PPP_PCB_OBX_32);
  }
  PRT* getPRT_33(size_t index = 0) {
    return (PRT*)this->getObjectSafe(index, PPP_PCB_PRT_33);
  }
  NTE* getNTE_34(size_t index = 0) {
    return (NTE*)this->getObjectSafe(index, PPP_PCB_NTE_34);
  }
  GOL* getGOL_35(size_t index = 0) {
    return (GOL*)this->getObjectSafe(index, PPP_PCB_GOL_35);
  }
  NTE* getNTE_36(size_t index = 0) {
    return (NTE*)this->getObjectSafe(index, PPP_PCB_NTE_36);
  }
  VAR* getVAR_37(size_t index = 0) {
    return (VAR*)this->getObjectSafe(index, PPP_PCB_VAR_37);
  }
  ROL* getROL_40(size_t index = 0) {
    return (ROL*)this->getObjectSafe(index, PPP_PCB_ROL_40);
  }
  VAR* getVAR_41(size_t index = 0) {
    return (VAR*)this->getObjectSafe(index, PPP_PCB_VAR_41);
  }
  ROL* getROL_42(size_t index = 0) {
    return (ROL*)this->getObjectSafe(index, PPP_PCB_ROL_42);
  }
  VAR* getVAR_43(size_t index = 0) {
    return (VAR*)this->getObjectSafe(index, PPP_PCB_VAR_43);
  }
  OBX* getOBX_44(size_t index = 0) {
    return (OBX*)this->getObjectSafe(index, PPP_PCB_OBX_44);
  }
  PRT* getPRT_45(size_t index = 0) {
    return (PRT*)this->getObjectSafe(index, PPP_PCB_PRT_45);
  }
  NTE* getNTE_46(size_t index = 0) {
    return (NTE*)this->getObjectSafe(index, PPP_PCB_NTE_46);
  }
  ROL* getROL_47(size_t index = 0) {
    return (ROL*)this->getObjectSafe(index, PPP_PCB_ROL_47);
  }
  VAR* getVAR_48(size_t index = 0) {
    return (VAR*)this->getObjectSafe(index, PPP_PCB_VAR_48);
  }
  OBX* getOBX_49(size_t index = 0) {
    return (OBX*)this->getObjectSafe(index, PPP_PCB_OBX_49);
  }
  PRT* getPRT_50(size_t index = 0) {
    return (PRT*)this->getObjectSafe(index, PPP_PCB_PRT_50);
  }
  NTE* getNTE_51(size_t index = 0) {
    return (NTE*)this->getObjectSafe(index, PPP_PCB_NTE_51);
  }
  GOL* getGOL_52(size_t index = 0) {
    return (GOL*)this->getObjectSafe(index, PPP_PCB_GOL_52);
  }
  NTE* getNTE_53(size_t index = 0) {
    return (NTE*)this->getObjectSafe(index, PPP_PCB_NTE_53);
  }
  VAR* getVAR_54(size_t index = 0) {
    return (VAR*)this->getObjectSafe(index, PPP_PCB_VAR_54);
  }
  ORC* getORC_57(size_t index = 0) {
    return (ORC*)this->getObjectSafe(index, PPP_PCB_ORC_57);
  }
  ROL* getROL_59(size_t index = 0) {
    return (ROL*)this->getObjectSafe(index, PPP_PCB_ROL_59);
  }
  VAR* getVAR_60(size_t index = 0) {
    return (VAR*)this->getObjectSafe(index, PPP_PCB_VAR_60);
  }
  ROL* getROL_61(size_t index = 0) {
    return (ROL*)this->getObjectSafe(index, PPP_PCB_ROL_61);
  }
  VAR* getVAR_62(size_t index = 0) {
    return (VAR*)this->getObjectSafe(index, PPP_PCB_VAR_62);
  }
  OBX* getOBX_63(size_t index = 0) {
    return (OBX*)this->getObjectSafe(index, PPP_PCB_OBX_63);
  }
  PRT* getPRT_64(size_t index = 0) {
    return (PRT*)this->getObjectSafe(index, PPP_PCB_PRT_64);
  }
  NTE* getNTE_65(size_t index = 0) {
    return (NTE*)this->getObjectSafe(index, PPP_PCB_NTE_65);
  }
  ROL* getROL_66(size_t index = 0) {
    return (ROL*)this->getObjectSafe(index, PPP_PCB_ROL_66);
  }
  VAR* getVAR_67(size_t index = 0) {
    return (VAR*)this->getObjectSafe(index, PPP_PCB_VAR_67);
  }
  OBX* getOBX_68(size_t index = 0) {
    return (OBX*)this->getObjectSafe(index, PPP_PCB_OBX_68);
  }
  PRT* getPRT_69(size_t index = 0) {
    return (PRT*)this->getObjectSafe(index, PPP_PCB_PRT_69);
  }
  NTE* getNTE_70(size_t index = 0) {
    return (NTE*)this->getObjectSafe(index, PPP_PCB_NTE_70);
  }
  OBR* getOBR_71(size_t index = 0) {
    return (OBR*)this->getObjectSafe(index, PPP_PCB_OBR_71);
  }
  Hxx* getHxx_72(size_t index = 0) {
    return (Hxx*)this->getObjectSafe(index, PPP_PCB_Hxx_72);
  }
  NTE* getNTE_73(size_t index = 0) {
    return (NTE*)this->getObjectSafe(index, PPP_PCB_NTE_73);
  }
  VAR* getVAR_74(size_t index = 0) {
    return (VAR*)this->getObjectSafe(index, PPP_PCB_VAR_74);
  }
  OBX* getOBX_97(size_t index = 0) {
    return (OBX*)this->getObjectSafe(index, PPP_PCB_OBX_97);
  }
  PRT* getPRT_98(size_t index = 0) {
    return (PRT*)this->getObjectSafe(index, PPP_PCB_PRT_98);
  }
  NTE* getNTE_99(size_t index = 0) {
    return (NTE*)this->getObjectSafe(index, PPP_PCB_NTE_99);
  }
  VAR* getVAR_100(size_t index = 0) {
    return (VAR*)this->getObjectSafe(index, PPP_PCB_VAR_100);
  }
  PV1* getPV1_101(size_t index = 0) {
    return (PV1*)this->getObjectSafe(index, PPP_PCB_PV1_101);
  }
  PV2* getPV2_102(size_t index = 0) {
    return (PV2*)this->getObjectSafe(index, PPP_PCB_PV2_102);
  }

  /* Checker list */
  bool isMSH_1(size_t index = 0) {
    try {
      return this->getObject(index, PPP_PCB_MSH_1) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isSFT_2(size_t index = 0) {
    try {
      return this->getObject(index, PPP_PCB_SFT_2) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isUAC_3(size_t index = 0) {
    try {
      return this->getObject(index, PPP_PCB_UAC_3) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isPID_4(size_t index = 0) {
    try {
      return this->getObject(index, PPP_PCB_PID_4) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isPTH_7(size_t index = 0) {
    try {
      return this->getObject(index, PPP_PCB_PTH_7) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isNTE_8(size_t index = 0) {
    try {
      return this->getObject(index, PPP_PCB_NTE_8) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isVAR_9(size_t index = 0) {
    try {
      return this->getObject(index, PPP_PCB_VAR_9) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isROL_12(size_t index = 0) {
    try {
      return this->getObject(index, PPP_PCB_ROL_12) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isVAR_13(size_t index = 0) {
    try {
      return this->getObject(index, PPP_PCB_VAR_13) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isROL_14(size_t index = 0) {
    try {
      return this->getObject(index, PPP_PCB_ROL_14) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isVAR_15(size_t index = 0) {
    try {
      return this->getObject(index, PPP_PCB_VAR_15) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isPRB_16(size_t index = 0) {
    try {
      return this->getObject(index, PPP_PCB_PRB_16) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isNTE_17(size_t index = 0) {
    try {
      return this->getObject(index, PPP_PCB_NTE_17) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isVAR_18(size_t index = 0) {
    try {
      return this->getObject(index, PPP_PCB_VAR_18) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isROL_23(size_t index = 0) {
    try {
      return this->getObject(index, PPP_PCB_ROL_23) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isVAR_24(size_t index = 0) {
    try {
      return this->getObject(index, PPP_PCB_VAR_24) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isROL_25(size_t index = 0) {
    try {
      return this->getObject(index, PPP_PCB_ROL_25) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isVAR_26(size_t index = 0) {
    try {
      return this->getObject(index, PPP_PCB_VAR_26) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isOBX_27(size_t index = 0) {
    try {
      return this->getObject(index, PPP_PCB_OBX_27) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isPRT_28(size_t index = 0) {
    try {
      return this->getObject(index, PPP_PCB_PRT_28) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isNTE_29(size_t index = 0) {
    try {
      return this->getObject(index, PPP_PCB_NTE_29) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isROL_30(size_t index = 0) {
    try {
      return this->getObject(index, PPP_PCB_ROL_30) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isVAR_31(size_t index = 0) {
    try {
      return this->getObject(index, PPP_PCB_VAR_31) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isOBX_32(size_t index = 0) {
    try {
      return this->getObject(index, PPP_PCB_OBX_32) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isPRT_33(size_t index = 0) {
    try {
      return this->getObject(index, PPP_PCB_PRT_33) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isNTE_34(size_t index = 0) {
    try {
      return this->getObject(index, PPP_PCB_NTE_34) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isGOL_35(size_t index = 0) {
    try {
      return this->getObject(index, PPP_PCB_GOL_35) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isNTE_36(size_t index = 0) {
    try {
      return this->getObject(index, PPP_PCB_NTE_36) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isVAR_37(size_t index = 0) {
    try {
      return this->getObject(index, PPP_PCB_VAR_37) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isROL_40(size_t index = 0) {
    try {
      return this->getObject(index, PPP_PCB_ROL_40) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isVAR_41(size_t index = 0) {
    try {
      return this->getObject(index, PPP_PCB_VAR_41) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isROL_42(size_t index = 0) {
    try {
      return this->getObject(index, PPP_PCB_ROL_42) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isVAR_43(size_t index = 0) {
    try {
      return this->getObject(index, PPP_PCB_VAR_43) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isOBX_44(size_t index = 0) {
    try {
      return this->getObject(index, PPP_PCB_OBX_44) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isPRT_45(size_t index = 0) {
    try {
      return this->getObject(index, PPP_PCB_PRT_45) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isNTE_46(size_t index = 0) {
    try {
      return this->getObject(index, PPP_PCB_NTE_46) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isROL_47(size_t index = 0) {
    try {
      return this->getObject(index, PPP_PCB_ROL_47) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isVAR_48(size_t index = 0) {
    try {
      return this->getObject(index, PPP_PCB_VAR_48) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isOBX_49(size_t index = 0) {
    try {
      return this->getObject(index, PPP_PCB_OBX_49) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isPRT_50(size_t index = 0) {
    try {
      return this->getObject(index, PPP_PCB_PRT_50) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isNTE_51(size_t index = 0) {
    try {
      return this->getObject(index, PPP_PCB_NTE_51) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isGOL_52(size_t index = 0) {
    try {
      return this->getObject(index, PPP_PCB_GOL_52) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isNTE_53(size_t index = 0) {
    try {
      return this->getObject(index, PPP_PCB_NTE_53) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isVAR_54(size_t index = 0) {
    try {
      return this->getObject(index, PPP_PCB_VAR_54) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isORC_57(size_t index = 0) {
    try {
      return this->getObject(index, PPP_PCB_ORC_57) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isROL_59(size_t index = 0) {
    try {
      return this->getObject(index, PPP_PCB_ROL_59) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isVAR_60(size_t index = 0) {
    try {
      return this->getObject(index, PPP_PCB_VAR_60) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isROL_61(size_t index = 0) {
    try {
      return this->getObject(index, PPP_PCB_ROL_61) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isVAR_62(size_t index = 0) {
    try {
      return this->getObject(index, PPP_PCB_VAR_62) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isOBX_63(size_t index = 0) {
    try {
      return this->getObject(index, PPP_PCB_OBX_63) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isPRT_64(size_t index = 0) {
    try {
      return this->getObject(index, PPP_PCB_PRT_64) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isNTE_65(size_t index = 0) {
    try {
      return this->getObject(index, PPP_PCB_NTE_65) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isROL_66(size_t index = 0) {
    try {
      return this->getObject(index, PPP_PCB_ROL_66) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isVAR_67(size_t index = 0) {
    try {
      return this->getObject(index, PPP_PCB_VAR_67) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isOBX_68(size_t index = 0) {
    try {
      return this->getObject(index, PPP_PCB_OBX_68) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isPRT_69(size_t index = 0) {
    try {
      return this->getObject(index, PPP_PCB_PRT_69) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isNTE_70(size_t index = 0) {
    try {
      return this->getObject(index, PPP_PCB_NTE_70) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isOBR_71(size_t index = 0) {
    try {
      return this->getObject(index, PPP_PCB_OBR_71) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isHxx_72(size_t index = 0) {
    try {
      return this->getObject(index, PPP_PCB_Hxx_72) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isNTE_73(size_t index = 0) {
    try {
      return this->getObject(index, PPP_PCB_NTE_73) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isVAR_74(size_t index = 0) {
    try {
      return this->getObject(index, PPP_PCB_VAR_74) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isOBX_97(size_t index = 0) {
    try {
      return this->getObject(index, PPP_PCB_OBX_97) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isPRT_98(size_t index = 0) {
    try {
      return this->getObject(index, PPP_PCB_PRT_98) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isNTE_99(size_t index = 0) {
    try {
      return this->getObject(index, PPP_PCB_NTE_99) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isVAR_100(size_t index = 0) {
    try {
      return this->getObject(index, PPP_PCB_VAR_100) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isPV1_101(size_t index = 0) {
    try {
      return this->getObject(index, PPP_PCB_PV1_101) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isPV2_102(size_t index = 0) {
    try {
      return this->getObject(index, PPP_PCB_PV2_102) != NULL;
    } catch (...) {
    }
    return false;
  }
}; /* PPP_PCB_ */
} /* namespace HL7_281 */
#endif /*  __PPP_PCB__281_H__ */
