/*
 * hacca - C Toolkit for the HL7 Protocol
 *
 * Warning: This file was automatically generated by [hawk], please do not edit.
 *          Thu 25 Jun 19:05:53 CEST 2020
 *
 * R. Carbone (rocco@tecsiel.it)
 * Jun 2020
 *
 * SPDX-License-Identifier: BSD-2-Clause-FreeBSD
 *
 * This file was developed as part of the ongoing activities related
 * to the design, implementation and execution of interoperability tests
 * between hacca-based versus AurigaHL7-based applications.
 *
 * In more details I decided to extend AurigaHL7 C++ Library with header files
 * implementing HL7 structures of the version 2.8.1 of the protocol (April 2014)
 * because the version 2.4 distributed with AurigaHL7 is a bit outdated (October 2000).
 *
 * All files in this fork was automatically generated by hacca-based tool [hawk]
 * and strictly follow the syntax and convention originally defined
 * by Auriga HL7 C++ Library just as form of continuity, convenience
 * and respect for their superb work.
 */


#ifndef __PMU_B03__281_H__
#define __PMU_B03__281_H__

#include "../../common/Util.h"
#include "../segment/EVN.h"
#include "../segment/MSH.h"
#include "../segment/SFT.h"
#include "../segment/STF.h"
#include "../segment/UAC.h"

namespace HL7_281 {

/* PMU_B03 */
struct PMU_B03 : public HL7Message {
  PMU_B03() { this->init(); }
  /* Fields ID  */
  enum FIELD_ID {
    PMU_B03_MSH_1,
    PMU_B03_SFT_2,
    PMU_B03_UAC_3,
    PMU_B03_EVN_4,
    PMU_B03_STF_5,
    FIELD_ID_MAX
  };

  const char* className() const { return "PMU_B03"; }
  PMU_B03* create() const { return new PMU_B03(); }

 private:
  /* Initialize object */
  void init() {
    setName("PMU_B03");
    addObject<MSH>(PMU_B03_MSH_1, "MSH.1", HL7::initialized, HL7::repetition_off);
    addObject<SFT>(PMU_B03_SFT_2, "SFT.2", HL7::optional, HL7::repetition_on);
    addObject<UAC>(PMU_B03_UAC_3, "UAC.3", HL7::optional, HL7::repetition_off);
    addObject<EVN>(PMU_B03_EVN_4, "EVN.4", HL7::initialized, HL7::repetition_off);
    addObject<STF>(PMU_B03_STF_5, "STF.5", HL7::initialized, HL7::repetition_off);
  }

 public:
  /* Getters list */
  MSH* getMSH_1(size_t index = 0) {
    return (MSH*)this->getObjectSafe(index, PMU_B03_MSH_1);
  }
  SFT* getSFT_2(size_t index = 0) {
    return (SFT*)this->getObjectSafe(index, PMU_B03_SFT_2);
  }
  UAC* getUAC_3(size_t index = 0) {
    return (UAC*)this->getObjectSafe(index, PMU_B03_UAC_3);
  }
  EVN* getEVN_4(size_t index = 0) {
    return (EVN*)this->getObjectSafe(index, PMU_B03_EVN_4);
  }
  STF* getSTF_5(size_t index = 0) {
    return (STF*)this->getObjectSafe(index, PMU_B03_STF_5);
  }

  /* Checker list */
  bool isMSH_1(size_t index = 0) {
    try {
      return this->getObject(index, PMU_B03_MSH_1) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isSFT_2(size_t index = 0) {
    try {
      return this->getObject(index, PMU_B03_SFT_2) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isUAC_3(size_t index = 0) {
    try {
      return this->getObject(index, PMU_B03_UAC_3) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isEVN_4(size_t index = 0) {
    try {
      return this->getObject(index, PMU_B03_EVN_4) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isSTF_5(size_t index = 0) {
    try {
      return this->getObject(index, PMU_B03_STF_5) != NULL;
    } catch (...) {
    }
    return false;
  }
}; /* PMU_B03_ */
} /* namespace HL7_281 */
#endif /*  __PMU_B03__281_H__ */
