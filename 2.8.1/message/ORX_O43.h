/*
 * hacca - C Toolkit for the HL7 Protocol
 *
 * Warning: This file was automatically generated by [hawk], please do not edit.
 *          Thu 25 Jun 19:05:25 CEST 2020
 *
 * R. Carbone (rocco@tecsiel.it)
 * Jun 2020
 *
 * SPDX-License-Identifier: BSD-2-Clause-FreeBSD
 *
 * This file was developed as part of the ongoing activities related
 * to the design, implementation and execution of interoperability tests
 * between hacca-based versus AurigaHL7-based applications.
 *
 * In more details I decided to extend AurigaHL7 C++ Library with header files
 * implementing HL7 structures of the version 2.8.1 of the protocol (April 2014)
 * because the version 2.4 distributed with AurigaHL7 is a bit outdated (October 2000).
 *
 * All files in this fork was automatically generated by hacca-based tool [hawk]
 * and strictly follow the syntax and convention originally defined
 * by Auriga HL7 C++ Library just as form of continuity, convenience
 * and respect for their superb work.
 */


#ifndef __ORX_O43__281_H__
#define __ORX_O43__281_H__

#include "../../common/Util.h"
#include "../segment/ARV.h"
#include "../segment/CTI.h"
#include "../segment/ERR.h"
#include "../segment/MSA.h"
#include "../segment/MSH.h"
#include "../segment/NTE.h"
#include "../segment/ORC.h"
#include "../segment/PID.h"
#include "../segment/PRT.h"
#include "../segment/SFT.h"
#include "../segment/TXA.h"
#include "../segment/UAC.h"

namespace HL7_281 {

/* Internal structures/groups */
struct ORX_O43_RESPONSE; /* RESPONSE */
struct ORX_O43_PATIENT; /* PATIENT */
struct ORX_O43_ORDER; /* ORDER */

/* RESPONSE */
struct ORX_O43_RESPONSE : public HL7Group {
  ORX_O43_RESPONSE() { this->init(); }
  /* Fields ID  */
  enum FIELD_ID {
    ORX_O43_ORX_O43_ORDER_1,
    ORX_O43_ORX_O43_PATIENT_2,
    FIELD_ID_MAX
  };

  const char* className() const { return "ORX_O43_RESPONSE"; }
  ORX_O43_RESPONSE* create() const { return new ORX_O43_RESPONSE(); }

 private:
  /* Initialize object */
  void init() {
    setName("ORX_O43.RESPONSE");
    addObject<ORX_O43_ORDER>(ORX_O43_ORX_O43_ORDER_1, "ORX_O43_ORDER.1", HL7::optional, HL7::repetition_on);
    addObject<ORX_O43_PATIENT>(ORX_O43_ORX_O43_PATIENT_2, "ORX_O43_PATIENT.2", HL7::optional, HL7::repetition_on);
  }

 public:
  /* Getters list */
  ORX_O43_ORDER* getORX_O43_ORDER_1(size_t index = 0) {
    return (ORX_O43_ORDER*)this->getObjectSafe(index, ORX_O43_ORX_O43_ORDER_1);
  }
  ORX_O43_PATIENT* getORX_O43_PATIENT_2(size_t index = 0) {
    return (ORX_O43_PATIENT*)this->getObjectSafe(index, ORX_O43_ORX_O43_PATIENT_2);
  }

  /* Checker list */
  bool isORX_O43_ORDER_1(size_t index = 0) {
    try {
      return this->getObject(index, ORX_O43_ORX_O43_ORDER_1) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isORX_O43_PATIENT_2(size_t index = 0) {
    try {
      return this->getObject(index, ORX_O43_ORX_O43_PATIENT_2) != NULL;
    } catch (...) {
    }
    return false;
  }
}; /* ORX_O43_RESPONSE */

/* PATIENT */
struct ORX_O43_PATIENT : public HL7Group {
  ORX_O43_PATIENT() { this->init(); }
  /* Fields ID  */
  enum FIELD_ID {
    ORX_O43_ARV_1,
    ORX_O43_NTE_2,
    ORX_O43_PID_3,
    ORX_O43_PRT_4,
    FIELD_ID_MAX
  };

  const char* className() const { return "ORX_O43_PATIENT"; }
  ORX_O43_PATIENT* create() const { return new ORX_O43_PATIENT(); }

 private:
  /* Initialize object */
  void init() {
    setName("ORX_O43.PATIENT");
    addObject<ARV>(ORX_O43_ARV_1, "ARV.1", HL7::optional, HL7::repetition_on);
    addObject<NTE>(ORX_O43_NTE_2, "NTE.2", HL7::optional, HL7::repetition_on);
    addObject<PID>(ORX_O43_PID_3, "PID.3", HL7::optional, HL7::repetition_on);
    addObject<PRT>(ORX_O43_PRT_4, "PRT.4", HL7::optional, HL7::repetition_on);
  }

 public:
  /* Getters list */
  ARV* getARV_1(size_t index = 0) {
    return (ARV*)this->getObjectSafe(index, ORX_O43_ARV_1);
  }
  NTE* getNTE_2(size_t index = 0) {
    return (NTE*)this->getObjectSafe(index, ORX_O43_NTE_2);
  }
  PID* getPID_3(size_t index = 0) {
    return (PID*)this->getObjectSafe(index, ORX_O43_PID_3);
  }
  PRT* getPRT_4(size_t index = 0) {
    return (PRT*)this->getObjectSafe(index, ORX_O43_PRT_4);
  }

  /* Checker list */
  bool isARV_1(size_t index = 0) {
    try {
      return this->getObject(index, ORX_O43_ARV_1) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isNTE_2(size_t index = 0) {
    try {
      return this->getObject(index, ORX_O43_NTE_2) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isPID_3(size_t index = 0) {
    try {
      return this->getObject(index, ORX_O43_PID_3) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isPRT_4(size_t index = 0) {
    try {
      return this->getObject(index, ORX_O43_PRT_4) != NULL;
    } catch (...) {
    }
    return false;
  }
}; /* ORX_O43_PATIENT */

/* ORDER */
struct ORX_O43_ORDER : public HL7Group {
  ORX_O43_ORDER() { this->init(); }
  /* Fields ID  */
  enum FIELD_ID {
    ORX_O43_CTI_1,
    ORX_O43_ORC_2,
    ORX_O43_PRT_3,
    ORX_O43_TXA_4,
    FIELD_ID_MAX
  };

  const char* className() const { return "ORX_O43_ORDER"; }
  ORX_O43_ORDER* create() const { return new ORX_O43_ORDER(); }

 private:
  /* Initialize object */
  void init() {
    setName("ORX_O43.ORDER");
    addObject<CTI>(ORX_O43_CTI_1, "CTI.1", HL7::optional, HL7::repetition_on);
    addObject<ORC>(ORX_O43_ORC_2, "ORC.2", HL7::optional, HL7::repetition_on);
    addObject<PRT>(ORX_O43_PRT_3, "PRT.3", HL7::optional, HL7::repetition_on);
    addObject<TXA>(ORX_O43_TXA_4, "TXA.4", HL7::optional, HL7::repetition_on);
  }

 public:
  /* Getters list */
  CTI* getCTI_1(size_t index = 0) {
    return (CTI*)this->getObjectSafe(index, ORX_O43_CTI_1);
  }
  ORC* getORC_2(size_t index = 0) {
    return (ORC*)this->getObjectSafe(index, ORX_O43_ORC_2);
  }
  PRT* getPRT_3(size_t index = 0) {
    return (PRT*)this->getObjectSafe(index, ORX_O43_PRT_3);
  }
  TXA* getTXA_4(size_t index = 0) {
    return (TXA*)this->getObjectSafe(index, ORX_O43_TXA_4);
  }

  /* Checker list */
  bool isCTI_1(size_t index = 0) {
    try {
      return this->getObject(index, ORX_O43_CTI_1) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isORC_2(size_t index = 0) {
    try {
      return this->getObject(index, ORX_O43_ORC_2) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isPRT_3(size_t index = 0) {
    try {
      return this->getObject(index, ORX_O43_PRT_3) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isTXA_4(size_t index = 0) {
    try {
      return this->getObject(index, ORX_O43_TXA_4) != NULL;
    } catch (...) {
    }
    return false;
  }
}; /* ORX_O43_ORDER */

/* ORX_O43 */
struct ORX_O43 : public HL7Message {
  ORX_O43() { this->init(); }
  /* Fields ID  */
  enum FIELD_ID {
    ORX_O43_MSH_1,
    ORX_O43_MSA_2,
    ORX_O43_ERR_3,
    ORX_O43_SFT_4,
    ORX_O43_UAC_5,
    ORX_O43_NTE_6,
    ORX_O43_PID_10,
    ORX_O43_NTE_11,
    ORX_O43_PRT_12,
    ORX_O43_ARV_13,
    ORX_O43_PID_14,
    ORX_O43_NTE_15,
    ORX_O43_PRT_16,
    ORX_O43_ARV_17,
    ORX_O43_ORC_18,
    ORX_O43_PRT_19,
    ORX_O43_TXA_20,
    ORX_O43_CTI_21,
    FIELD_ID_MAX
  };

  const char* className() const { return "ORX_O43"; }
  ORX_O43* create() const { return new ORX_O43(); }

 private:
  /* Initialize object */
  void init() {
    setName("ORX_O43");
    addObject<MSH>(ORX_O43_MSH_1, "MSH.1", HL7::initialized, HL7::repetition_off);
    addObject<MSA>(ORX_O43_MSA_2, "MSA.2", HL7::initialized, HL7::repetition_off);
    addObject<ERR>(ORX_O43_ERR_3, "ERR.3", HL7::optional, HL7::repetition_on);
    addObject<SFT>(ORX_O43_SFT_4, "SFT.4", HL7::optional, HL7::repetition_on);
    addObject<UAC>(ORX_O43_UAC_5, "UAC.5", HL7::optional, HL7::repetition_off);
    addObject<NTE>(ORX_O43_NTE_6, "NTE.6", HL7::optional, HL7::repetition_on);
    addObject<PID>(ORX_O43_PID_10, "PID.10", HL7::initialized, HL7::repetition_off);
    addObject<NTE>(ORX_O43_NTE_11, "NTE.11", HL7::optional, HL7::repetition_off);
    addObject<PRT>(ORX_O43_PRT_12, "PRT.12", HL7::optional, HL7::repetition_off);
    addObject<ARV>(ORX_O43_ARV_13, "ARV.13", HL7::optional, HL7::repetition_off);
    addObject<PID>(ORX_O43_PID_14, "PID.14", HL7::initialized, HL7::repetition_off);
    addObject<NTE>(ORX_O43_NTE_15, "NTE.15", HL7::optional, HL7::repetition_off);
    addObject<PRT>(ORX_O43_PRT_16, "PRT.16", HL7::optional, HL7::repetition_off);
    addObject<ARV>(ORX_O43_ARV_17, "ARV.17", HL7::optional, HL7::repetition_off);
    addObject<ORC>(ORX_O43_ORC_18, "ORC.18", HL7::initialized, HL7::repetition_off);
    addObject<PRT>(ORX_O43_PRT_19, "PRT.19", HL7::optional, HL7::repetition_off);
    addObject<TXA>(ORX_O43_TXA_20, "TXA.20", HL7::initialized, HL7::repetition_off);
    addObject<CTI>(ORX_O43_CTI_21, "CTI.21", HL7::optional, HL7::repetition_off);
  }

 public:
  /* Getters list */
  MSH* getMSH_1(size_t index = 0) {
    return (MSH*)this->getObjectSafe(index, ORX_O43_MSH_1);
  }
  MSA* getMSA_2(size_t index = 0) {
    return (MSA*)this->getObjectSafe(index, ORX_O43_MSA_2);
  }
  ERR* getERR_3(size_t index = 0) {
    return (ERR*)this->getObjectSafe(index, ORX_O43_ERR_3);
  }
  SFT* getSFT_4(size_t index = 0) {
    return (SFT*)this->getObjectSafe(index, ORX_O43_SFT_4);
  }
  UAC* getUAC_5(size_t index = 0) {
    return (UAC*)this->getObjectSafe(index, ORX_O43_UAC_5);
  }
  NTE* getNTE_6(size_t index = 0) {
    return (NTE*)this->getObjectSafe(index, ORX_O43_NTE_6);
  }
  PID* getPID_10(size_t index = 0) {
    return (PID*)this->getObjectSafe(index, ORX_O43_PID_10);
  }
  NTE* getNTE_11(size_t index = 0) {
    return (NTE*)this->getObjectSafe(index, ORX_O43_NTE_11);
  }
  PRT* getPRT_12(size_t index = 0) {
    return (PRT*)this->getObjectSafe(index, ORX_O43_PRT_12);
  }
  ARV* getARV_13(size_t index = 0) {
    return (ARV*)this->getObjectSafe(index, ORX_O43_ARV_13);
  }
  PID* getPID_14(size_t index = 0) {
    return (PID*)this->getObjectSafe(index, ORX_O43_PID_14);
  }
  NTE* getNTE_15(size_t index = 0) {
    return (NTE*)this->getObjectSafe(index, ORX_O43_NTE_15);
  }
  PRT* getPRT_16(size_t index = 0) {
    return (PRT*)this->getObjectSafe(index, ORX_O43_PRT_16);
  }
  ARV* getARV_17(size_t index = 0) {
    return (ARV*)this->getObjectSafe(index, ORX_O43_ARV_17);
  }
  ORC* getORC_18(size_t index = 0) {
    return (ORC*)this->getObjectSafe(index, ORX_O43_ORC_18);
  }
  PRT* getPRT_19(size_t index = 0) {
    return (PRT*)this->getObjectSafe(index, ORX_O43_PRT_19);
  }
  TXA* getTXA_20(size_t index = 0) {
    return (TXA*)this->getObjectSafe(index, ORX_O43_TXA_20);
  }
  CTI* getCTI_21(size_t index = 0) {
    return (CTI*)this->getObjectSafe(index, ORX_O43_CTI_21);
  }

  /* Checker list */
  bool isMSH_1(size_t index = 0) {
    try {
      return this->getObject(index, ORX_O43_MSH_1) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isMSA_2(size_t index = 0) {
    try {
      return this->getObject(index, ORX_O43_MSA_2) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isERR_3(size_t index = 0) {
    try {
      return this->getObject(index, ORX_O43_ERR_3) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isSFT_4(size_t index = 0) {
    try {
      return this->getObject(index, ORX_O43_SFT_4) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isUAC_5(size_t index = 0) {
    try {
      return this->getObject(index, ORX_O43_UAC_5) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isNTE_6(size_t index = 0) {
    try {
      return this->getObject(index, ORX_O43_NTE_6) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isPID_10(size_t index = 0) {
    try {
      return this->getObject(index, ORX_O43_PID_10) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isNTE_11(size_t index = 0) {
    try {
      return this->getObject(index, ORX_O43_NTE_11) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isPRT_12(size_t index = 0) {
    try {
      return this->getObject(index, ORX_O43_PRT_12) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isARV_13(size_t index = 0) {
    try {
      return this->getObject(index, ORX_O43_ARV_13) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isPID_14(size_t index = 0) {
    try {
      return this->getObject(index, ORX_O43_PID_14) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isNTE_15(size_t index = 0) {
    try {
      return this->getObject(index, ORX_O43_NTE_15) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isPRT_16(size_t index = 0) {
    try {
      return this->getObject(index, ORX_O43_PRT_16) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isARV_17(size_t index = 0) {
    try {
      return this->getObject(index, ORX_O43_ARV_17) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isORC_18(size_t index = 0) {
    try {
      return this->getObject(index, ORX_O43_ORC_18) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isPRT_19(size_t index = 0) {
    try {
      return this->getObject(index, ORX_O43_PRT_19) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isTXA_20(size_t index = 0) {
    try {
      return this->getObject(index, ORX_O43_TXA_20) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isCTI_21(size_t index = 0) {
    try {
      return this->getObject(index, ORX_O43_CTI_21) != NULL;
    } catch (...) {
    }
    return false;
  }
}; /* ORX_O43_ */
} /* namespace HL7_281 */
#endif /*  __ORX_O43__281_H__ */
