/*
 * hacca - C Toolkit for the HL7 Protocol
 *
 * Warning: This file was automatically generated by [hawk], please do not edit.
 *          Thu 25 Jun 19:01:05 CEST 2020
 *
 * R. Carbone (rocco@tecsiel.it)
 * Jun 2020
 *
 * SPDX-License-Identifier: BSD-2-Clause-FreeBSD
 *
 * This file was developed as part of the ongoing activities related
 * to the design, implementation and execution of interoperability tests
 * between hacca-based versus AurigaHL7-based applications.
 *
 * In more details I decided to extend AurigaHL7 C++ Library with header files
 * implementing HL7 structures of the version 2.8.1 of the protocol (April 2014)
 * because the version 2.4 distributed with AurigaHL7 is a bit outdated (October 2000).
 *
 * All files in this fork was automatically generated by hacca-based tool [hawk]
 * and strictly follow the syntax and convention originally defined
 * by Auriga HL7 C++ Library just as form of continuity, convenience
 * and respect for their superb work.
 */


#ifndef __BAR_P12__281_H__
#define __BAR_P12__281_H__

#include "../../common/Util.h"
#include "../segment/DG1.h"
#include "../segment/DRG.h"
#include "../segment/EVN.h"
#include "../segment/MSH.h"
#include "../segment/OBX.h"
#include "../segment/PID.h"
#include "../segment/PR1.h"
#include "../segment/PRT.h"
#include "../segment/PV1.h"
#include "../segment/ROL.h"
#include "../segment/SFT.h"
#include "../segment/UAC.h"

namespace HL7_281 {

/* Internal structures/groups */
struct BAR_P12_PROCEDURE; /* PROCEDURE */

/* PROCEDURE */
struct BAR_P12_PROCEDURE : public HL7Group {
  BAR_P12_PROCEDURE() { this->init(); }
  /* Fields ID  */
  enum FIELD_ID {
    BAR_P12_PR1_1,
    BAR_P12_PRT_2,
    BAR_P12_ROL_3,
    FIELD_ID_MAX
  };

  const char* className() const { return "BAR_P12_PROCEDURE"; }
  BAR_P12_PROCEDURE* create() const { return new BAR_P12_PROCEDURE(); }

 private:
  /* Initialize object */
  void init() {
    setName("BAR_P12.PROCEDURE");
    addObject<PR1>(BAR_P12_PR1_1, "PR1.1", HL7::optional, HL7::repetition_on);
    addObject<PRT>(BAR_P12_PRT_2, "PRT.2", HL7::optional, HL7::repetition_on);
    addObject<ROL>(BAR_P12_ROL_3, "ROL.3", HL7::optional, HL7::repetition_on);
  }

 public:
  /* Getters list */
  PR1* getPR1_1(size_t index = 0) {
    return (PR1*)this->getObjectSafe(index, BAR_P12_PR1_1);
  }
  PRT* getPRT_2(size_t index = 0) {
    return (PRT*)this->getObjectSafe(index, BAR_P12_PRT_2);
  }
  ROL* getROL_3(size_t index = 0) {
    return (ROL*)this->getObjectSafe(index, BAR_P12_ROL_3);
  }

  /* Checker list */
  bool isPR1_1(size_t index = 0) {
    try {
      return this->getObject(index, BAR_P12_PR1_1) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isPRT_2(size_t index = 0) {
    try {
      return this->getObject(index, BAR_P12_PRT_2) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isROL_3(size_t index = 0) {
    try {
      return this->getObject(index, BAR_P12_ROL_3) != NULL;
    } catch (...) {
    }
    return false;
  }
}; /* BAR_P12_PROCEDURE */

/* BAR_P12 */
struct BAR_P12 : public HL7Message {
  BAR_P12() { this->init(); }
  /* Fields ID  */
  enum FIELD_ID {
    BAR_P12_MSH_1,
    BAR_P12_SFT_2,
    BAR_P12_UAC_3,
    BAR_P12_EVN_4,
    BAR_P12_PID_5,
    BAR_P12_PV1_6,
    BAR_P12_DG1_7,
    BAR_P12_DRG_8,
    BAR_P12_OBX_10,
    BAR_P12_PR1_11,
    BAR_P12_PRT_12,
    BAR_P12_ROL_13,
    FIELD_ID_MAX
  };

  const char* className() const { return "BAR_P12"; }
  BAR_P12* create() const { return new BAR_P12(); }

 private:
  /* Initialize object */
  void init() {
    setName("BAR_P12");
    addObject<MSH>(BAR_P12_MSH_1, "MSH.1", HL7::initialized, HL7::repetition_off);
    addObject<SFT>(BAR_P12_SFT_2, "SFT.2", HL7::optional, HL7::repetition_on);
    addObject<UAC>(BAR_P12_UAC_3, "UAC.3", HL7::optional, HL7::repetition_off);
    addObject<EVN>(BAR_P12_EVN_4, "EVN.4", HL7::initialized, HL7::repetition_off);
    addObject<PID>(BAR_P12_PID_5, "PID.5", HL7::initialized, HL7::repetition_off);
    addObject<PV1>(BAR_P12_PV1_6, "PV1.6", HL7::initialized, HL7::repetition_off);
    addObject<DG1>(BAR_P12_DG1_7, "DG1.7", HL7::optional, HL7::repetition_on);
    addObject<DRG>(BAR_P12_DRG_8, "DRG.8", HL7::optional, HL7::repetition_off);
    addObject<OBX>(BAR_P12_OBX_10, "OBX.10", HL7::optional, HL7::repetition_off);
    addObject<PR1>(BAR_P12_PR1_11, "PR1.11", HL7::initialized, HL7::repetition_off);
    addObject<PRT>(BAR_P12_PRT_12, "PRT.12", HL7::optional, HL7::repetition_off);
    addObject<ROL>(BAR_P12_ROL_13, "ROL.13", HL7::optional, HL7::repetition_off);
  }

 public:
  /* Getters list */
  MSH* getMSH_1(size_t index = 0) {
    return (MSH*)this->getObjectSafe(index, BAR_P12_MSH_1);
  }
  SFT* getSFT_2(size_t index = 0) {
    return (SFT*)this->getObjectSafe(index, BAR_P12_SFT_2);
  }
  UAC* getUAC_3(size_t index = 0) {
    return (UAC*)this->getObjectSafe(index, BAR_P12_UAC_3);
  }
  EVN* getEVN_4(size_t index = 0) {
    return (EVN*)this->getObjectSafe(index, BAR_P12_EVN_4);
  }
  PID* getPID_5(size_t index = 0) {
    return (PID*)this->getObjectSafe(index, BAR_P12_PID_5);
  }
  PV1* getPV1_6(size_t index = 0) {
    return (PV1*)this->getObjectSafe(index, BAR_P12_PV1_6);
  }
  DG1* getDG1_7(size_t index = 0) {
    return (DG1*)this->getObjectSafe(index, BAR_P12_DG1_7);
  }
  DRG* getDRG_8(size_t index = 0) {
    return (DRG*)this->getObjectSafe(index, BAR_P12_DRG_8);
  }
  OBX* getOBX_10(size_t index = 0) {
    return (OBX*)this->getObjectSafe(index, BAR_P12_OBX_10);
  }
  PR1* getPR1_11(size_t index = 0) {
    return (PR1*)this->getObjectSafe(index, BAR_P12_PR1_11);
  }
  PRT* getPRT_12(size_t index = 0) {
    return (PRT*)this->getObjectSafe(index, BAR_P12_PRT_12);
  }
  ROL* getROL_13(size_t index = 0) {
    return (ROL*)this->getObjectSafe(index, BAR_P12_ROL_13);
  }

  /* Checker list */
  bool isMSH_1(size_t index = 0) {
    try {
      return this->getObject(index, BAR_P12_MSH_1) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isSFT_2(size_t index = 0) {
    try {
      return this->getObject(index, BAR_P12_SFT_2) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isUAC_3(size_t index = 0) {
    try {
      return this->getObject(index, BAR_P12_UAC_3) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isEVN_4(size_t index = 0) {
    try {
      return this->getObject(index, BAR_P12_EVN_4) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isPID_5(size_t index = 0) {
    try {
      return this->getObject(index, BAR_P12_PID_5) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isPV1_6(size_t index = 0) {
    try {
      return this->getObject(index, BAR_P12_PV1_6) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isDG1_7(size_t index = 0) {
    try {
      return this->getObject(index, BAR_P12_DG1_7) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isDRG_8(size_t index = 0) {
    try {
      return this->getObject(index, BAR_P12_DRG_8) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isOBX_10(size_t index = 0) {
    try {
      return this->getObject(index, BAR_P12_OBX_10) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isPR1_11(size_t index = 0) {
    try {
      return this->getObject(index, BAR_P12_PR1_11) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isPRT_12(size_t index = 0) {
    try {
      return this->getObject(index, BAR_P12_PRT_12) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isROL_13(size_t index = 0) {
    try {
      return this->getObject(index, BAR_P12_ROL_13) != NULL;
    } catch (...) {
    }
    return false;
  }
}; /* BAR_P12_ */
} /* namespace HL7_281 */
#endif /*  __BAR_P12__281_H__ */
