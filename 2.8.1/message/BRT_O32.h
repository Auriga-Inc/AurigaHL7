/*
 * hacca - C Toolkit for the HL7 Protocol
 *
 * Warning: This file was automatically generated by [hawk], please do not edit.
 *          Thu 25 Jun 19:01:09 CEST 2020
 *
 * R. Carbone (rocco@tecsiel.it)
 * Jun 2020
 *
 * SPDX-License-Identifier: BSD-2-Clause-FreeBSD
 *
 * This file was developed as part of the ongoing activities related
 * to the design, implementation and execution of interoperability tests
 * between hacca-based versus AurigaHL7-based applications.
 *
 * In more details I decided to extend AurigaHL7 C++ Library with header files
 * implementing HL7 structures of the version 2.8.1 of the protocol (April 2014)
 * because the version 2.4 distributed with AurigaHL7 is a bit outdated (October 2000).
 *
 * All files in this fork was automatically generated by hacca-based tool [hawk]
 * and strictly follow the syntax and convention originally defined
 * by Auriga HL7 C++ Library just as form of continuity, convenience
 * and respect for their superb work.
 */


#ifndef __BRT_O32__281_H__
#define __BRT_O32__281_H__

#include "../../common/Util.h"
#include "../segment/ARV.h"
#include "../segment/BPO.h"
#include "../segment/BTX.h"
#include "../segment/ERR.h"
#include "../segment/MSA.h"
#include "../segment/MSH.h"
#include "../segment/NTE.h"
#include "../segment/ORC.h"
#include "../segment/PID.h"
#include "../segment/PRT.h"
#include "../segment/SFT.h"
#include "../segment/TQ1.h"
#include "../segment/TQ2.h"
#include "../segment/UAC.h"

namespace HL7_281 {

/* Internal structures/groups */
struct BRT_O32_RESPONSE; /* RESPONSE */
struct BRT_O32_ORDER; /* ORDER */
struct BRT_O32_TIMING; /* TIMING */

/* RESPONSE */
struct BRT_O32_RESPONSE : public HL7Group {
  BRT_O32_RESPONSE() { this->init(); }
  /* Fields ID  */
  enum FIELD_ID {
    BRT_O32_ARV_1,
    BRT_O32_BRT_O32_ORDER_2,
    BRT_O32_PID_3,
    FIELD_ID_MAX
  };

  const char* className() const { return "BRT_O32_RESPONSE"; }
  BRT_O32_RESPONSE* create() const { return new BRT_O32_RESPONSE(); }

 private:
  /* Initialize object */
  void init() {
    setName("BRT_O32.RESPONSE");
    addObject<ARV>(BRT_O32_ARV_1, "ARV.1", HL7::optional, HL7::repetition_on);
    addObject<BRT_O32_ORDER>(BRT_O32_BRT_O32_ORDER_2, "BRT_O32_ORDER.2", HL7::optional, HL7::repetition_on);
    addObject<PID>(BRT_O32_PID_3, "PID.3", HL7::optional, HL7::repetition_on);
  }

 public:
  /* Getters list */
  ARV* getARV_1(size_t index = 0) {
    return (ARV*)this->getObjectSafe(index, BRT_O32_ARV_1);
  }
  BRT_O32_ORDER* getBRT_O32_ORDER_2(size_t index = 0) {
    return (BRT_O32_ORDER*)this->getObjectSafe(index, BRT_O32_BRT_O32_ORDER_2);
  }
  PID* getPID_3(size_t index = 0) {
    return (PID*)this->getObjectSafe(index, BRT_O32_PID_3);
  }

  /* Checker list */
  bool isARV_1(size_t index = 0) {
    try {
      return this->getObject(index, BRT_O32_ARV_1) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isBRT_O32_ORDER_2(size_t index = 0) {
    try {
      return this->getObject(index, BRT_O32_BRT_O32_ORDER_2) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isPID_3(size_t index = 0) {
    try {
      return this->getObject(index, BRT_O32_PID_3) != NULL;
    } catch (...) {
    }
    return false;
  }
}; /* BRT_O32_RESPONSE */

/* ORDER */
struct BRT_O32_ORDER : public HL7Group {
  BRT_O32_ORDER() { this->init(); }
  /* Fields ID  */
  enum FIELD_ID {
    BRT_O32_BPO_1,
    BRT_O32_BRT_O32_TIMING_2,
    BRT_O32_BTX_3,
    BRT_O32_ORC_4,
    BRT_O32_PRT_5,
    FIELD_ID_MAX
  };

  const char* className() const { return "BRT_O32_ORDER"; }
  BRT_O32_ORDER* create() const { return new BRT_O32_ORDER(); }

 private:
  /* Initialize object */
  void init() {
    setName("BRT_O32.ORDER");
    addObject<BPO>(BRT_O32_BPO_1, "BPO.1", HL7::optional, HL7::repetition_on);
    addObject<BRT_O32_TIMING>(BRT_O32_BRT_O32_TIMING_2, "BRT_O32_TIMING.2", HL7::optional, HL7::repetition_on);
    addObject<BTX>(BRT_O32_BTX_3, "BTX.3", HL7::optional, HL7::repetition_on);
    addObject<ORC>(BRT_O32_ORC_4, "ORC.4", HL7::optional, HL7::repetition_on);
    addObject<PRT>(BRT_O32_PRT_5, "PRT.5", HL7::optional, HL7::repetition_on);
  }

 public:
  /* Getters list */
  BPO* getBPO_1(size_t index = 0) {
    return (BPO*)this->getObjectSafe(index, BRT_O32_BPO_1);
  }
  BRT_O32_TIMING* getBRT_O32_TIMING_2(size_t index = 0) {
    return (BRT_O32_TIMING*)this->getObjectSafe(index, BRT_O32_BRT_O32_TIMING_2);
  }
  BTX* getBTX_3(size_t index = 0) {
    return (BTX*)this->getObjectSafe(index, BRT_O32_BTX_3);
  }
  ORC* getORC_4(size_t index = 0) {
    return (ORC*)this->getObjectSafe(index, BRT_O32_ORC_4);
  }
  PRT* getPRT_5(size_t index = 0) {
    return (PRT*)this->getObjectSafe(index, BRT_O32_PRT_5);
  }

  /* Checker list */
  bool isBPO_1(size_t index = 0) {
    try {
      return this->getObject(index, BRT_O32_BPO_1) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isBRT_O32_TIMING_2(size_t index = 0) {
    try {
      return this->getObject(index, BRT_O32_BRT_O32_TIMING_2) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isBTX_3(size_t index = 0) {
    try {
      return this->getObject(index, BRT_O32_BTX_3) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isORC_4(size_t index = 0) {
    try {
      return this->getObject(index, BRT_O32_ORC_4) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isPRT_5(size_t index = 0) {
    try {
      return this->getObject(index, BRT_O32_PRT_5) != NULL;
    } catch (...) {
    }
    return false;
  }
}; /* BRT_O32_ORDER */

/* TIMING */
struct BRT_O32_TIMING : public HL7Group {
  BRT_O32_TIMING() { this->init(); }
  /* Fields ID  */
  enum FIELD_ID {
    BRT_O32_TQ1_1,
    BRT_O32_TQ2_2,
    FIELD_ID_MAX
  };

  const char* className() const { return "BRT_O32_TIMING"; }
  BRT_O32_TIMING* create() const { return new BRT_O32_TIMING(); }

 private:
  /* Initialize object */
  void init() {
    setName("BRT_O32.TIMING");
    addObject<TQ1>(BRT_O32_TQ1_1, "TQ1.1", HL7::optional, HL7::repetition_on);
    addObject<TQ2>(BRT_O32_TQ2_2, "TQ2.2", HL7::optional, HL7::repetition_on);
  }

 public:
  /* Getters list */
  TQ1* getTQ1_1(size_t index = 0) {
    return (TQ1*)this->getObjectSafe(index, BRT_O32_TQ1_1);
  }
  TQ2* getTQ2_2(size_t index = 0) {
    return (TQ2*)this->getObjectSafe(index, BRT_O32_TQ2_2);
  }

  /* Checker list */
  bool isTQ1_1(size_t index = 0) {
    try {
      return this->getObject(index, BRT_O32_TQ1_1) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isTQ2_2(size_t index = 0) {
    try {
      return this->getObject(index, BRT_O32_TQ2_2) != NULL;
    } catch (...) {
    }
    return false;
  }
}; /* BRT_O32_TIMING */

/* BRT_O32 */
struct BRT_O32 : public HL7Message {
  BRT_O32() { this->init(); }
  /* Fields ID  */
  enum FIELD_ID {
    BRT_O32_MSH_1,
    BRT_O32_MSA_2,
    BRT_O32_ERR_3,
    BRT_O32_SFT_4,
    BRT_O32_UAC_5,
    BRT_O32_NTE_6,
    BRT_O32_PID_8,
    BRT_O32_ARV_9,
    BRT_O32_ORC_11,
    BRT_O32_PRT_12,
    BRT_O32_BPO_14,
    BRT_O32_BTX_15,
    BRT_O32_TQ1_16,
    BRT_O32_TQ2_17,
    FIELD_ID_MAX
  };

  const char* className() const { return "BRT_O32"; }
  BRT_O32* create() const { return new BRT_O32(); }

 private:
  /* Initialize object */
  void init() {
    setName("BRT_O32");
    addObject<MSH>(BRT_O32_MSH_1, "MSH.1", HL7::initialized, HL7::repetition_off);
    addObject<MSA>(BRT_O32_MSA_2, "MSA.2", HL7::initialized, HL7::repetition_off);
    addObject<ERR>(BRT_O32_ERR_3, "ERR.3", HL7::optional, HL7::repetition_on);
    addObject<SFT>(BRT_O32_SFT_4, "SFT.4", HL7::optional, HL7::repetition_on);
    addObject<UAC>(BRT_O32_UAC_5, "UAC.5", HL7::optional, HL7::repetition_off);
    addObject<NTE>(BRT_O32_NTE_6, "NTE.6", HL7::optional, HL7::repetition_on);
    addObject<PID>(BRT_O32_PID_8, "PID.8", HL7::optional, HL7::repetition_off);
    addObject<ARV>(BRT_O32_ARV_9, "ARV.9", HL7::optional, HL7::repetition_off);
    addObject<ORC>(BRT_O32_ORC_11, "ORC.11", HL7::initialized, HL7::repetition_off);
    addObject<PRT>(BRT_O32_PRT_12, "PRT.12", HL7::optional, HL7::repetition_off);
    addObject<BPO>(BRT_O32_BPO_14, "BPO.14", HL7::optional, HL7::repetition_off);
    addObject<BTX>(BRT_O32_BTX_15, "BTX.15", HL7::optional, HL7::repetition_off);
    addObject<TQ1>(BRT_O32_TQ1_16, "TQ1.16", HL7::initialized, HL7::repetition_off);
    addObject<TQ2>(BRT_O32_TQ2_17, "TQ2.17", HL7::optional, HL7::repetition_off);
  }

 public:
  /* Getters list */
  MSH* getMSH_1(size_t index = 0) {
    return (MSH*)this->getObjectSafe(index, BRT_O32_MSH_1);
  }
  MSA* getMSA_2(size_t index = 0) {
    return (MSA*)this->getObjectSafe(index, BRT_O32_MSA_2);
  }
  ERR* getERR_3(size_t index = 0) {
    return (ERR*)this->getObjectSafe(index, BRT_O32_ERR_3);
  }
  SFT* getSFT_4(size_t index = 0) {
    return (SFT*)this->getObjectSafe(index, BRT_O32_SFT_4);
  }
  UAC* getUAC_5(size_t index = 0) {
    return (UAC*)this->getObjectSafe(index, BRT_O32_UAC_5);
  }
  NTE* getNTE_6(size_t index = 0) {
    return (NTE*)this->getObjectSafe(index, BRT_O32_NTE_6);
  }
  PID* getPID_8(size_t index = 0) {
    return (PID*)this->getObjectSafe(index, BRT_O32_PID_8);
  }
  ARV* getARV_9(size_t index = 0) {
    return (ARV*)this->getObjectSafe(index, BRT_O32_ARV_9);
  }
  ORC* getORC_11(size_t index = 0) {
    return (ORC*)this->getObjectSafe(index, BRT_O32_ORC_11);
  }
  PRT* getPRT_12(size_t index = 0) {
    return (PRT*)this->getObjectSafe(index, BRT_O32_PRT_12);
  }
  BPO* getBPO_14(size_t index = 0) {
    return (BPO*)this->getObjectSafe(index, BRT_O32_BPO_14);
  }
  BTX* getBTX_15(size_t index = 0) {
    return (BTX*)this->getObjectSafe(index, BRT_O32_BTX_15);
  }
  TQ1* getTQ1_16(size_t index = 0) {
    return (TQ1*)this->getObjectSafe(index, BRT_O32_TQ1_16);
  }
  TQ2* getTQ2_17(size_t index = 0) {
    return (TQ2*)this->getObjectSafe(index, BRT_O32_TQ2_17);
  }

  /* Checker list */
  bool isMSH_1(size_t index = 0) {
    try {
      return this->getObject(index, BRT_O32_MSH_1) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isMSA_2(size_t index = 0) {
    try {
      return this->getObject(index, BRT_O32_MSA_2) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isERR_3(size_t index = 0) {
    try {
      return this->getObject(index, BRT_O32_ERR_3) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isSFT_4(size_t index = 0) {
    try {
      return this->getObject(index, BRT_O32_SFT_4) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isUAC_5(size_t index = 0) {
    try {
      return this->getObject(index, BRT_O32_UAC_5) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isNTE_6(size_t index = 0) {
    try {
      return this->getObject(index, BRT_O32_NTE_6) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isPID_8(size_t index = 0) {
    try {
      return this->getObject(index, BRT_O32_PID_8) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isARV_9(size_t index = 0) {
    try {
      return this->getObject(index, BRT_O32_ARV_9) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isORC_11(size_t index = 0) {
    try {
      return this->getObject(index, BRT_O32_ORC_11) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isPRT_12(size_t index = 0) {
    try {
      return this->getObject(index, BRT_O32_PRT_12) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isBPO_14(size_t index = 0) {
    try {
      return this->getObject(index, BRT_O32_BPO_14) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isBTX_15(size_t index = 0) {
    try {
      return this->getObject(index, BRT_O32_BTX_15) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isTQ1_16(size_t index = 0) {
    try {
      return this->getObject(index, BRT_O32_TQ1_16) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isTQ2_17(size_t index = 0) {
    try {
      return this->getObject(index, BRT_O32_TQ2_17) != NULL;
    } catch (...) {
    }
    return false;
  }
}; /* BRT_O32_ */
} /* namespace HL7_281 */
#endif /*  __BRT_O32__281_H__ */
