/*
 * hacca - C Toolkit for the HL7 Protocol
 *
 * Warning: This file was automatically generated by [hawk], please do not edit.
 *          Thu 25 Jun 19:03:19 CEST 2020
 *
 * R. Carbone (rocco@tecsiel.it)
 * Jun 2020
 *
 * SPDX-License-Identifier: BSD-2-Clause-FreeBSD
 *
 * This file was developed as part of the ongoing activities related
 * to the design, implementation and execution of interoperability tests
 * between hacca-based versus AurigaHL7-based applications.
 *
 * In more details I decided to extend AurigaHL7 C++ Library with header files
 * implementing HL7 structures of the version 2.8.1 of the protocol (April 2014)
 * because the version 2.4 distributed with AurigaHL7 is a bit outdated (October 2000).
 *
 * All files in this fork was automatically generated by hacca-based tool [hawk]
 * and strictly follow the syntax and convention originally defined
 * by Auriga HL7 C++ Library just as form of continuity, convenience
 * and respect for their superb work.
 */


#ifndef __EHC_E13__281_H__
#define __EHC_E13__281_H__

#include "../../common/Util.h"
#include "../segment/CTD.h"
#include "../segment/ERR.h"
#include "../segment/IVC.h"
#include "../segment/MSA.h"
#include "../segment/MSH.h"
#include "../segment/NTE.h"
#include "../segment/OBR.h"
#include "../segment/OBX.h"
#include "../segment/PID.h"
#include "../segment/PSG.h"
#include "../segment/PSL.h"
#include "../segment/PSS.h"
#include "../segment/RFI.h"
#include "../segment/SFT.h"
#include "../segment/TXA.h"
#include "../segment/UAC.h"

namespace HL7_281 {

/* Internal structures/groups */
struct EHC_E13_REQUEST; /* REQUEST */
struct EHC_E13_RESPONSE; /* RESPONSE */

/* REQUEST */
struct EHC_E13_REQUEST : public HL7Group {
  EHC_E13_REQUEST() { this->init(); }
  /* Fields ID  */
  enum FIELD_ID {
    EHC_E13_CTD_1,
    EHC_E13_EHC_E13_RESPONSE_2,
    EHC_E13_NTE_3,
    EHC_E13_OBR_4,
    FIELD_ID_MAX
  };

  const char* className() const { return "EHC_E13_REQUEST"; }
  EHC_E13_REQUEST* create() const { return new EHC_E13_REQUEST(); }

 private:
  /* Initialize object */
  void init() {
    setName("EHC_E13.REQUEST");
    addObject<CTD>(EHC_E13_CTD_1, "CTD.1", HL7::optional, HL7::repetition_on);
    addObject<EHC_E13_RESPONSE>(EHC_E13_EHC_E13_RESPONSE_2, "EHC_E13_RESPONSE.2", HL7::optional, HL7::repetition_on);
    addObject<NTE>(EHC_E13_NTE_3, "NTE.3", HL7::optional, HL7::repetition_on);
    addObject<OBR>(EHC_E13_OBR_4, "OBR.4", HL7::optional, HL7::repetition_on);
  }

 public:
  /* Getters list */
  CTD* getCTD_1(size_t index = 0) {
    return (CTD*)this->getObjectSafe(index, EHC_E13_CTD_1);
  }
  EHC_E13_RESPONSE* getEHC_E13_RESPONSE_2(size_t index = 0) {
    return (EHC_E13_RESPONSE*)this->getObjectSafe(index, EHC_E13_EHC_E13_RESPONSE_2);
  }
  NTE* getNTE_3(size_t index = 0) {
    return (NTE*)this->getObjectSafe(index, EHC_E13_NTE_3);
  }
  OBR* getOBR_4(size_t index = 0) {
    return (OBR*)this->getObjectSafe(index, EHC_E13_OBR_4);
  }

  /* Checker list */
  bool isCTD_1(size_t index = 0) {
    try {
      return this->getObject(index, EHC_E13_CTD_1) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isEHC_E13_RESPONSE_2(size_t index = 0) {
    try {
      return this->getObject(index, EHC_E13_EHC_E13_RESPONSE_2) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isNTE_3(size_t index = 0) {
    try {
      return this->getObject(index, EHC_E13_NTE_3) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isOBR_4(size_t index = 0) {
    try {
      return this->getObject(index, EHC_E13_OBR_4) != NULL;
    } catch (...) {
    }
    return false;
  }
}; /* EHC_E13_REQUEST */

/* RESPONSE */
struct EHC_E13_RESPONSE : public HL7Group {
  EHC_E13_RESPONSE() { this->init(); }
  /* Fields ID  */
  enum FIELD_ID {
    EHC_E13_NTE_1,
    EHC_E13_OBX_2,
    EHC_E13_TXA_3,
    FIELD_ID_MAX
  };

  const char* className() const { return "EHC_E13_RESPONSE"; }
  EHC_E13_RESPONSE* create() const { return new EHC_E13_RESPONSE(); }

 private:
  /* Initialize object */
  void init() {
    setName("EHC_E13.RESPONSE");
    addObject<NTE>(EHC_E13_NTE_1, "NTE.1", HL7::optional, HL7::repetition_on);
    addObject<OBX>(EHC_E13_OBX_2, "OBX.2", HL7::optional, HL7::repetition_on);
    addObject<TXA>(EHC_E13_TXA_3, "TXA.3", HL7::optional, HL7::repetition_on);
  }

 public:
  /* Getters list */
  NTE* getNTE_1(size_t index = 0) {
    return (NTE*)this->getObjectSafe(index, EHC_E13_NTE_1);
  }
  OBX* getOBX_2(size_t index = 0) {
    return (OBX*)this->getObjectSafe(index, EHC_E13_OBX_2);
  }
  TXA* getTXA_3(size_t index = 0) {
    return (TXA*)this->getObjectSafe(index, EHC_E13_TXA_3);
  }

  /* Checker list */
  bool isNTE_1(size_t index = 0) {
    try {
      return this->getObject(index, EHC_E13_NTE_1) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isOBX_2(size_t index = 0) {
    try {
      return this->getObject(index, EHC_E13_OBX_2) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isTXA_3(size_t index = 0) {
    try {
      return this->getObject(index, EHC_E13_TXA_3) != NULL;
    } catch (...) {
    }
    return false;
  }
}; /* EHC_E13_RESPONSE */

/* EHC_E13 */
struct EHC_E13 : public HL7Message {
  EHC_E13() { this->init(); }
  /* Fields ID  */
  enum FIELD_ID {
    EHC_E13_MSH_1,
    EHC_E13_SFT_2,
    EHC_E13_UAC_3,
    EHC_E13_MSA_4,
    EHC_E13_ERR_5,
    EHC_E13_RFI_6,
    EHC_E13_CTD_7,
    EHC_E13_IVC_8,
    EHC_E13_PSS_9,
    EHC_E13_PSG_10,
    EHC_E13_PID_11,
    EHC_E13_PSL_12,
    EHC_E13_CTD_14,
    EHC_E13_OBR_15,
    EHC_E13_NTE_16,
    EHC_E13_OBX_18,
    EHC_E13_NTE_19,
    EHC_E13_TXA_20,
    FIELD_ID_MAX
  };

  const char* className() const { return "EHC_E13"; }
  EHC_E13* create() const { return new EHC_E13(); }

 private:
  /* Initialize object */
  void init() {
    setName("EHC_E13");
    addObject<MSH>(EHC_E13_MSH_1, "MSH.1", HL7::initialized, HL7::repetition_off);
    addObject<SFT>(EHC_E13_SFT_2, "SFT.2", HL7::optional, HL7::repetition_on);
    addObject<UAC>(EHC_E13_UAC_3, "UAC.3", HL7::optional, HL7::repetition_on);
    addObject<MSA>(EHC_E13_MSA_4, "MSA.4", HL7::initialized, HL7::repetition_off);
    addObject<ERR>(EHC_E13_ERR_5, "ERR.5", HL7::optional, HL7::repetition_on);
    addObject<RFI>(EHC_E13_RFI_6, "RFI.6", HL7::initialized, HL7::repetition_off);
    addObject<CTD>(EHC_E13_CTD_7, "CTD.7", HL7::optional, HL7::repetition_on);
    addObject<IVC>(EHC_E13_IVC_8, "IVC.8", HL7::initialized, HL7::repetition_off);
    addObject<PSS>(EHC_E13_PSS_9, "PSS.9", HL7::initialized, HL7::repetition_off);
    addObject<PSG>(EHC_E13_PSG_10, "PSG.10", HL7::initialized, HL7::repetition_off);
    addObject<PID>(EHC_E13_PID_11, "PID.11", HL7::optional, HL7::repetition_off);
    addObject<PSL>(EHC_E13_PSL_12, "PSL.12", HL7::optional, HL7::repetition_off);
    addObject<CTD>(EHC_E13_CTD_14, "CTD.14", HL7::optional, HL7::repetition_off);
    addObject<OBR>(EHC_E13_OBR_15, "OBR.15", HL7::initialized, HL7::repetition_off);
    addObject<NTE>(EHC_E13_NTE_16, "NTE.16", HL7::optional, HL7::repetition_off);
    addObject<OBX>(EHC_E13_OBX_18, "OBX.18", HL7::initialized, HL7::repetition_off);
    addObject<NTE>(EHC_E13_NTE_19, "NTE.19", HL7::optional, HL7::repetition_off);
    addObject<TXA>(EHC_E13_TXA_20, "TXA.20", HL7::optional, HL7::repetition_off);
  }

 public:
  /* Getters list */
  MSH* getMSH_1(size_t index = 0) {
    return (MSH*)this->getObjectSafe(index, EHC_E13_MSH_1);
  }
  SFT* getSFT_2(size_t index = 0) {
    return (SFT*)this->getObjectSafe(index, EHC_E13_SFT_2);
  }
  UAC* getUAC_3(size_t index = 0) {
    return (UAC*)this->getObjectSafe(index, EHC_E13_UAC_3);
  }
  MSA* getMSA_4(size_t index = 0) {
    return (MSA*)this->getObjectSafe(index, EHC_E13_MSA_4);
  }
  ERR* getERR_5(size_t index = 0) {
    return (ERR*)this->getObjectSafe(index, EHC_E13_ERR_5);
  }
  RFI* getRFI_6(size_t index = 0) {
    return (RFI*)this->getObjectSafe(index, EHC_E13_RFI_6);
  }
  CTD* getCTD_7(size_t index = 0) {
    return (CTD*)this->getObjectSafe(index, EHC_E13_CTD_7);
  }
  IVC* getIVC_8(size_t index = 0) {
    return (IVC*)this->getObjectSafe(index, EHC_E13_IVC_8);
  }
  PSS* getPSS_9(size_t index = 0) {
    return (PSS*)this->getObjectSafe(index, EHC_E13_PSS_9);
  }
  PSG* getPSG_10(size_t index = 0) {
    return (PSG*)this->getObjectSafe(index, EHC_E13_PSG_10);
  }
  PID* getPID_11(size_t index = 0) {
    return (PID*)this->getObjectSafe(index, EHC_E13_PID_11);
  }
  PSL* getPSL_12(size_t index = 0) {
    return (PSL*)this->getObjectSafe(index, EHC_E13_PSL_12);
  }
  CTD* getCTD_14(size_t index = 0) {
    return (CTD*)this->getObjectSafe(index, EHC_E13_CTD_14);
  }
  OBR* getOBR_15(size_t index = 0) {
    return (OBR*)this->getObjectSafe(index, EHC_E13_OBR_15);
  }
  NTE* getNTE_16(size_t index = 0) {
    return (NTE*)this->getObjectSafe(index, EHC_E13_NTE_16);
  }
  OBX* getOBX_18(size_t index = 0) {
    return (OBX*)this->getObjectSafe(index, EHC_E13_OBX_18);
  }
  NTE* getNTE_19(size_t index = 0) {
    return (NTE*)this->getObjectSafe(index, EHC_E13_NTE_19);
  }
  TXA* getTXA_20(size_t index = 0) {
    return (TXA*)this->getObjectSafe(index, EHC_E13_TXA_20);
  }

  /* Checker list */
  bool isMSH_1(size_t index = 0) {
    try {
      return this->getObject(index, EHC_E13_MSH_1) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isSFT_2(size_t index = 0) {
    try {
      return this->getObject(index, EHC_E13_SFT_2) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isUAC_3(size_t index = 0) {
    try {
      return this->getObject(index, EHC_E13_UAC_3) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isMSA_4(size_t index = 0) {
    try {
      return this->getObject(index, EHC_E13_MSA_4) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isERR_5(size_t index = 0) {
    try {
      return this->getObject(index, EHC_E13_ERR_5) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isRFI_6(size_t index = 0) {
    try {
      return this->getObject(index, EHC_E13_RFI_6) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isCTD_7(size_t index = 0) {
    try {
      return this->getObject(index, EHC_E13_CTD_7) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isIVC_8(size_t index = 0) {
    try {
      return this->getObject(index, EHC_E13_IVC_8) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isPSS_9(size_t index = 0) {
    try {
      return this->getObject(index, EHC_E13_PSS_9) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isPSG_10(size_t index = 0) {
    try {
      return this->getObject(index, EHC_E13_PSG_10) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isPID_11(size_t index = 0) {
    try {
      return this->getObject(index, EHC_E13_PID_11) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isPSL_12(size_t index = 0) {
    try {
      return this->getObject(index, EHC_E13_PSL_12) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isCTD_14(size_t index = 0) {
    try {
      return this->getObject(index, EHC_E13_CTD_14) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isOBR_15(size_t index = 0) {
    try {
      return this->getObject(index, EHC_E13_OBR_15) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isNTE_16(size_t index = 0) {
    try {
      return this->getObject(index, EHC_E13_NTE_16) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isOBX_18(size_t index = 0) {
    try {
      return this->getObject(index, EHC_E13_OBX_18) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isNTE_19(size_t index = 0) {
    try {
      return this->getObject(index, EHC_E13_NTE_19) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isTXA_20(size_t index = 0) {
    try {
      return this->getObject(index, EHC_E13_TXA_20) != NULL;
    } catch (...) {
    }
    return false;
  }
}; /* EHC_E13_ */
} /* namespace HL7_281 */
#endif /*  __EHC_E13__281_H__ */
