/*
 * hacca - C Toolkit for the HL7 Protocol
 *
 * Warning: This file was automatically generated by [hawk], please do not edit.
 *          Thu 25 Jun 19:06:21 CEST 2020
 *
 * R. Carbone (rocco@tecsiel.it)
 * Jun 2020
 *
 * SPDX-License-Identifier: BSD-2-Clause-FreeBSD
 *
 * This file was developed as part of the ongoing activities related
 * to the design, implementation and execution of interoperability tests
 * between hacca-based versus AurigaHL7-based applications.
 *
 * In more details I decided to extend AurigaHL7 C++ Library with header files
 * implementing HL7 structures of the version 2.8.1 of the protocol (April 2014)
 * because the version 2.4 distributed with AurigaHL7 is a bit outdated (October 2000).
 *
 * All files in this fork was automatically generated by hacca-based tool [hawk]
 * and strictly follow the syntax and convention originally defined
 * by Auriga HL7 C++ Library just as form of continuity, convenience
 * and respect for their superb work.
 */


#ifndef __RDR_RDR__281_H__
#define __RDR_RDR__281_H__

#include "../../common/Util.h"
#include "../segment/DSC.h"
#include "../segment/ERR.h"
#include "../segment/MSA.h"
#include "../segment/MSH.h"
#include "../segment/NTE.h"
#include "../segment/ORC.h"
#include "../segment/PID.h"
#include "../segment/QRD.h"
#include "../segment/QRF.h"
#include "../segment/RXC.h"
#include "../segment/RXD.h"
#include "../segment/RXE.h"
#include "../segment/RXR.h"
#include "../segment/SFT.h"
#include "../segment/TQ1.h"
#include "../segment/TQ2.h"
#include "../segment/UAC.h"

namespace HL7_281 {

/* Internal structures/groups */
struct RDR_RDR_DEFINITION; /* DEFINITION */
struct RDR_RDR_PATIENT; /* PATIENT */
struct RDR_RDR_ORDER; /* ORDER */
struct RDR_RDR_TIMING; /* TIMING */
struct RDR_RDR_ENCODING; /* ENCODING */
struct RDR_RDR_DISPENSE; /* DISPENSE */
struct RDR_RDR_TIMING_ENCODED; /* TIMING_ENCODED */
struct RDR_RDR_TIMING_ENCODED; /* TIMING_ENCODED */

/* DEFINITION */
struct RDR_RDR_DEFINITION : public HL7Group {
  RDR_RDR_DEFINITION() { this->init(); }
  /* Fields ID  */
  enum FIELD_ID {
    RDR_RDR_QRD_1,
    RDR_RDR_QRF_2,
    RDR_RDR_RDR_RDR_ORDER_3,
    RDR_RDR_RDR_RDR_PATIENT_4,
    FIELD_ID_MAX
  };

  const char* className() const { return "RDR_RDR_DEFINITION"; }
  RDR_RDR_DEFINITION* create() const { return new RDR_RDR_DEFINITION(); }

 private:
  /* Initialize object */
  void init() {
    setName("RDR_RDR.DEFINITION");
    addObject<QRD>(RDR_RDR_QRD_1, "QRD.1", HL7::optional, HL7::repetition_on);
    addObject<QRF>(RDR_RDR_QRF_2, "QRF.2", HL7::optional, HL7::repetition_on);
    addObject<RDR_RDR_ORDER>(RDR_RDR_RDR_RDR_ORDER_3, "RDR_RDR_ORDER.3", HL7::optional, HL7::repetition_on);
    addObject<RDR_RDR_PATIENT>(RDR_RDR_RDR_RDR_PATIENT_4, "RDR_RDR_PATIENT.4", HL7::optional, HL7::repetition_on);
  }

 public:
  /* Getters list */
  QRD* getQRD_1(size_t index = 0) {
    return (QRD*)this->getObjectSafe(index, RDR_RDR_QRD_1);
  }
  QRF* getQRF_2(size_t index = 0) {
    return (QRF*)this->getObjectSafe(index, RDR_RDR_QRF_2);
  }
  RDR_RDR_ORDER* getRDR_RDR_ORDER_3(size_t index = 0) {
    return (RDR_RDR_ORDER*)this->getObjectSafe(index, RDR_RDR_RDR_RDR_ORDER_3);
  }
  RDR_RDR_PATIENT* getRDR_RDR_PATIENT_4(size_t index = 0) {
    return (RDR_RDR_PATIENT*)this->getObjectSafe(index, RDR_RDR_RDR_RDR_PATIENT_4);
  }

  /* Checker list */
  bool isQRD_1(size_t index = 0) {
    try {
      return this->getObject(index, RDR_RDR_QRD_1) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isQRF_2(size_t index = 0) {
    try {
      return this->getObject(index, RDR_RDR_QRF_2) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isRDR_RDR_ORDER_3(size_t index = 0) {
    try {
      return this->getObject(index, RDR_RDR_RDR_RDR_ORDER_3) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isRDR_RDR_PATIENT_4(size_t index = 0) {
    try {
      return this->getObject(index, RDR_RDR_RDR_RDR_PATIENT_4) != NULL;
    } catch (...) {
    }
    return false;
  }
}; /* RDR_RDR_DEFINITION */

/* PATIENT */
struct RDR_RDR_PATIENT : public HL7Group {
  RDR_RDR_PATIENT() { this->init(); }
  /* Fields ID  */
  enum FIELD_ID {
    RDR_RDR_NTE_1,
    RDR_RDR_PID_2,
    FIELD_ID_MAX
  };

  const char* className() const { return "RDR_RDR_PATIENT"; }
  RDR_RDR_PATIENT* create() const { return new RDR_RDR_PATIENT(); }

 private:
  /* Initialize object */
  void init() {
    setName("RDR_RDR.PATIENT");
    addObject<NTE>(RDR_RDR_NTE_1, "NTE.1", HL7::optional, HL7::repetition_on);
    addObject<PID>(RDR_RDR_PID_2, "PID.2", HL7::optional, HL7::repetition_on);
  }

 public:
  /* Getters list */
  NTE* getNTE_1(size_t index = 0) {
    return (NTE*)this->getObjectSafe(index, RDR_RDR_NTE_1);
  }
  PID* getPID_2(size_t index = 0) {
    return (PID*)this->getObjectSafe(index, RDR_RDR_PID_2);
  }

  /* Checker list */
  bool isNTE_1(size_t index = 0) {
    try {
      return this->getObject(index, RDR_RDR_NTE_1) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isPID_2(size_t index = 0) {
    try {
      return this->getObject(index, RDR_RDR_PID_2) != NULL;
    } catch (...) {
    }
    return false;
  }
}; /* RDR_RDR_PATIENT */

/* ORDER */
struct RDR_RDR_ORDER : public HL7Group {
  RDR_RDR_ORDER() { this->init(); }
  /* Fields ID  */
  enum FIELD_ID {
    RDR_RDR_ORC_1,
    RDR_RDR_RDR_RDR_DISPENSE_2,
    RDR_RDR_RDR_RDR_ENCODING_3,
    RDR_RDR_RDR_RDR_TIMING_4,
    FIELD_ID_MAX
  };

  const char* className() const { return "RDR_RDR_ORDER"; }
  RDR_RDR_ORDER* create() const { return new RDR_RDR_ORDER(); }

 private:
  /* Initialize object */
  void init() {
    setName("RDR_RDR.ORDER");
    addObject<ORC>(RDR_RDR_ORC_1, "ORC.1", HL7::optional, HL7::repetition_on);
    addObject<RDR_RDR_DISPENSE>(RDR_RDR_RDR_RDR_DISPENSE_2, "RDR_RDR_DISPENSE.2", HL7::optional, HL7::repetition_on);
    addObject<RDR_RDR_ENCODING>(RDR_RDR_RDR_RDR_ENCODING_3, "RDR_RDR_ENCODING.3", HL7::optional, HL7::repetition_on);
    addObject<RDR_RDR_TIMING>(RDR_RDR_RDR_RDR_TIMING_4, "RDR_RDR_TIMING.4", HL7::optional, HL7::repetition_on);
  }

 public:
  /* Getters list */
  ORC* getORC_1(size_t index = 0) {
    return (ORC*)this->getObjectSafe(index, RDR_RDR_ORC_1);
  }
  RDR_RDR_DISPENSE* getRDR_RDR_DISPENSE_2(size_t index = 0) {
    return (RDR_RDR_DISPENSE*)this->getObjectSafe(index, RDR_RDR_RDR_RDR_DISPENSE_2);
  }
  RDR_RDR_ENCODING* getRDR_RDR_ENCODING_3(size_t index = 0) {
    return (RDR_RDR_ENCODING*)this->getObjectSafe(index, RDR_RDR_RDR_RDR_ENCODING_3);
  }
  RDR_RDR_TIMING* getRDR_RDR_TIMING_4(size_t index = 0) {
    return (RDR_RDR_TIMING*)this->getObjectSafe(index, RDR_RDR_RDR_RDR_TIMING_4);
  }

  /* Checker list */
  bool isORC_1(size_t index = 0) {
    try {
      return this->getObject(index, RDR_RDR_ORC_1) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isRDR_RDR_DISPENSE_2(size_t index = 0) {
    try {
      return this->getObject(index, RDR_RDR_RDR_RDR_DISPENSE_2) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isRDR_RDR_ENCODING_3(size_t index = 0) {
    try {
      return this->getObject(index, RDR_RDR_RDR_RDR_ENCODING_3) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isRDR_RDR_TIMING_4(size_t index = 0) {
    try {
      return this->getObject(index, RDR_RDR_RDR_RDR_TIMING_4) != NULL;
    } catch (...) {
    }
    return false;
  }
}; /* RDR_RDR_ORDER */

/* TIMING */
struct RDR_RDR_TIMING : public HL7Group {
  RDR_RDR_TIMING() { this->init(); }
  /* Fields ID  */
  enum FIELD_ID {
    RDR_RDR_TQ1_1,
    RDR_RDR_TQ2_2,
    FIELD_ID_MAX
  };

  const char* className() const { return "RDR_RDR_TIMING"; }
  RDR_RDR_TIMING* create() const { return new RDR_RDR_TIMING(); }

 private:
  /* Initialize object */
  void init() {
    setName("RDR_RDR.TIMING");
    addObject<TQ1>(RDR_RDR_TQ1_1, "TQ1.1", HL7::optional, HL7::repetition_on);
    addObject<TQ2>(RDR_RDR_TQ2_2, "TQ2.2", HL7::optional, HL7::repetition_on);
  }

 public:
  /* Getters list */
  TQ1* getTQ1_1(size_t index = 0) {
    return (TQ1*)this->getObjectSafe(index, RDR_RDR_TQ1_1);
  }
  TQ2* getTQ2_2(size_t index = 0) {
    return (TQ2*)this->getObjectSafe(index, RDR_RDR_TQ2_2);
  }

  /* Checker list */
  bool isTQ1_1(size_t index = 0) {
    try {
      return this->getObject(index, RDR_RDR_TQ1_1) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isTQ2_2(size_t index = 0) {
    try {
      return this->getObject(index, RDR_RDR_TQ2_2) != NULL;
    } catch (...) {
    }
    return false;
  }
}; /* RDR_RDR_TIMING */

/* ENCODING */
struct RDR_RDR_ENCODING : public HL7Group {
  RDR_RDR_ENCODING() { this->init(); }
  /* Fields ID  */
  enum FIELD_ID {
    RDR_RDR_RDR_RDR_TIMING_ENCODED_1,
    RDR_RDR_RXC_2,
    RDR_RDR_RXE_3,
    RDR_RDR_RXR_4,
    FIELD_ID_MAX
  };

  const char* className() const { return "RDR_RDR_ENCODING"; }
  RDR_RDR_ENCODING* create() const { return new RDR_RDR_ENCODING(); }

 private:
  /* Initialize object */
  void init() {
    setName("RDR_RDR.ENCODING");
    addObject<RDR_RDR_TIMING_ENCODED>(RDR_RDR_RDR_RDR_TIMING_ENCODED_1, "RDR_RDR_TIMING_ENCODED.1", HL7::optional, HL7::repetition_on);
    addObject<RXC>(RDR_RDR_RXC_2, "RXC.2", HL7::optional, HL7::repetition_on);
    addObject<RXE>(RDR_RDR_RXE_3, "RXE.3", HL7::optional, HL7::repetition_on);
    addObject<RXR>(RDR_RDR_RXR_4, "RXR.4", HL7::optional, HL7::repetition_on);
  }

 public:
  /* Getters list */
  RDR_RDR_TIMING_ENCODED* getRDR_RDR_TIMING_ENCODED_1(size_t index = 0) {
    return (RDR_RDR_TIMING_ENCODED*)this->getObjectSafe(index, RDR_RDR_RDR_RDR_TIMING_ENCODED_1);
  }
  RXC* getRXC_2(size_t index = 0) {
    return (RXC*)this->getObjectSafe(index, RDR_RDR_RXC_2);
  }
  RXE* getRXE_3(size_t index = 0) {
    return (RXE*)this->getObjectSafe(index, RDR_RDR_RXE_3);
  }
  RXR* getRXR_4(size_t index = 0) {
    return (RXR*)this->getObjectSafe(index, RDR_RDR_RXR_4);
  }

  /* Checker list */
  bool isRDR_RDR_TIMING_ENCODED_1(size_t index = 0) {
    try {
      return this->getObject(index, RDR_RDR_RDR_RDR_TIMING_ENCODED_1) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isRXC_2(size_t index = 0) {
    try {
      return this->getObject(index, RDR_RDR_RXC_2) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isRXE_3(size_t index = 0) {
    try {
      return this->getObject(index, RDR_RDR_RXE_3) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isRXR_4(size_t index = 0) {
    try {
      return this->getObject(index, RDR_RDR_RXR_4) != NULL;
    } catch (...) {
    }
    return false;
  }
}; /* RDR_RDR_ENCODING */

/* DISPENSE */
struct RDR_RDR_DISPENSE : public HL7Group {
  RDR_RDR_DISPENSE() { this->init(); }
  /* Fields ID  */
  enum FIELD_ID {
    RDR_RDR_RXC_1,
    RDR_RDR_RXD_2,
    RDR_RDR_RXR_3,
    FIELD_ID_MAX
  };

  const char* className() const { return "RDR_RDR_DISPENSE"; }
  RDR_RDR_DISPENSE* create() const { return new RDR_RDR_DISPENSE(); }

 private:
  /* Initialize object */
  void init() {
    setName("RDR_RDR.DISPENSE");
    addObject<RXC>(RDR_RDR_RXC_1, "RXC.1", HL7::optional, HL7::repetition_on);
    addObject<RXD>(RDR_RDR_RXD_2, "RXD.2", HL7::optional, HL7::repetition_on);
    addObject<RXR>(RDR_RDR_RXR_3, "RXR.3", HL7::optional, HL7::repetition_on);
  }

 public:
  /* Getters list */
  RXC* getRXC_1(size_t index = 0) {
    return (RXC*)this->getObjectSafe(index, RDR_RDR_RXC_1);
  }
  RXD* getRXD_2(size_t index = 0) {
    return (RXD*)this->getObjectSafe(index, RDR_RDR_RXD_2);
  }
  RXR* getRXR_3(size_t index = 0) {
    return (RXR*)this->getObjectSafe(index, RDR_RDR_RXR_3);
  }

  /* Checker list */
  bool isRXC_1(size_t index = 0) {
    try {
      return this->getObject(index, RDR_RDR_RXC_1) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isRXD_2(size_t index = 0) {
    try {
      return this->getObject(index, RDR_RDR_RXD_2) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isRXR_3(size_t index = 0) {
    try {
      return this->getObject(index, RDR_RDR_RXR_3) != NULL;
    } catch (...) {
    }
    return false;
  }
}; /* RDR_RDR_DISPENSE */

/* TIMING_ENCODED */
struct RDR_RDR_TIMING_ENCODED : public HL7Group {
  RDR_RDR_TIMING_ENCODED() { this->init(); }
  /* Fields ID  */
  enum FIELD_ID {
    RDR_RDR_TQ1_1,
    RDR_RDR_TQ2_2,
    FIELD_ID_MAX
  };

  const char* className() const { return "RDR_RDR_TIMING_ENCODED"; }
  RDR_RDR_TIMING_ENCODED* create() const { return new RDR_RDR_TIMING_ENCODED(); }

 private:
  /* Initialize object */
  void init() {
    setName("RDR_RDR.TIMING_ENCODED");
    addObject<TQ1>(RDR_RDR_TQ1_1, "TQ1.1", HL7::optional, HL7::repetition_on);
    addObject<TQ2>(RDR_RDR_TQ2_2, "TQ2.2", HL7::optional, HL7::repetition_on);
  }

 public:
  /* Getters list */
  TQ1* getTQ1_1(size_t index = 0) {
    return (TQ1*)this->getObjectSafe(index, RDR_RDR_TQ1_1);
  }
  TQ2* getTQ2_2(size_t index = 0) {
    return (TQ2*)this->getObjectSafe(index, RDR_RDR_TQ2_2);
  }

  /* Checker list */
  bool isTQ1_1(size_t index = 0) {
    try {
      return this->getObject(index, RDR_RDR_TQ1_1) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isTQ2_2(size_t index = 0) {
    try {
      return this->getObject(index, RDR_RDR_TQ2_2) != NULL;
    } catch (...) {
    }
    return false;
  }
}; /* RDR_RDR_TIMING_ENCODED */

/* RDR_RDR */
struct RDR_RDR : public HL7Message {
  RDR_RDR() { this->init(); }
  /* Fields ID  */
  enum FIELD_ID {
    RDR_RDR_MSH_1,
    RDR_RDR_MSA_2,
    RDR_RDR_ERR_3,
    RDR_RDR_SFT_4,
    RDR_RDR_UAC_5,
    RDR_RDR_DSC_7,
    RDR_RDR_QRD_8,
    RDR_RDR_QRF_9,
    RDR_RDR_PID_12,
    RDR_RDR_NTE_13,
    RDR_RDR_PID_14,
    RDR_RDR_NTE_15,
    RDR_RDR_ORC_16,
    RDR_RDR_TQ1_20,
    RDR_RDR_TQ2_21,
    RDR_RDR_TQ1_22,
    RDR_RDR_TQ2_23,
    RDR_RDR_RXE_24,
    RDR_RDR_RXR_26,
    RDR_RDR_RXC_27,
    RDR_RDR_TQ1_28,
    RDR_RDR_TQ2_29,
    RDR_RDR_TQ1_30,
    RDR_RDR_TQ2_31,
    RDR_RDR_RXE_32,
    RDR_RDR_RXR_34,
    RDR_RDR_RXC_35,
    RDR_RDR_RXD_36,
    RDR_RDR_RXR_37,
    RDR_RDR_RXC_38,
    RDR_RDR_TQ1_39,
    RDR_RDR_TQ2_40,
    FIELD_ID_MAX
  };

  const char* className() const { return "RDR_RDR"; }
  RDR_RDR* create() const { return new RDR_RDR(); }

 private:
  /* Initialize object */
  void init() {
    setName("RDR_RDR");
    addObject<MSH>(RDR_RDR_MSH_1, "MSH.1", HL7::initialized, HL7::repetition_off);
    addObject<MSA>(RDR_RDR_MSA_2, "MSA.2", HL7::initialized, HL7::repetition_off);
    addObject<ERR>(RDR_RDR_ERR_3, "ERR.3", HL7::optional, HL7::repetition_on);
    addObject<SFT>(RDR_RDR_SFT_4, "SFT.4", HL7::optional, HL7::repetition_off);
    addObject<UAC>(RDR_RDR_UAC_5, "UAC.5", HL7::optional, HL7::repetition_off);
    addObject<DSC>(RDR_RDR_DSC_7, "DSC.7", HL7::optional, HL7::repetition_off);
    addObject<QRD>(RDR_RDR_QRD_8, "QRD.8", HL7::initialized, HL7::repetition_off);
    addObject<QRF>(RDR_RDR_QRF_9, "QRF.9", HL7::optional, HL7::repetition_off);
    addObject<PID>(RDR_RDR_PID_12, "PID.12", HL7::initialized, HL7::repetition_off);
    addObject<NTE>(RDR_RDR_NTE_13, "NTE.13", HL7::optional, HL7::repetition_off);
    addObject<PID>(RDR_RDR_PID_14, "PID.14", HL7::initialized, HL7::repetition_off);
    addObject<NTE>(RDR_RDR_NTE_15, "NTE.15", HL7::optional, HL7::repetition_off);
    addObject<ORC>(RDR_RDR_ORC_16, "ORC.16", HL7::initialized, HL7::repetition_off);
    addObject<TQ1>(RDR_RDR_TQ1_20, "TQ1.20", HL7::initialized, HL7::repetition_off);
    addObject<TQ2>(RDR_RDR_TQ2_21, "TQ2.21", HL7::optional, HL7::repetition_off);
    addObject<TQ1>(RDR_RDR_TQ1_22, "TQ1.22", HL7::initialized, HL7::repetition_off);
    addObject<TQ2>(RDR_RDR_TQ2_23, "TQ2.23", HL7::optional, HL7::repetition_off);
    addObject<RXE>(RDR_RDR_RXE_24, "RXE.24", HL7::initialized, HL7::repetition_off);
    addObject<RXR>(RDR_RDR_RXR_26, "RXR.26", HL7::initialized, HL7::repetition_off);
    addObject<RXC>(RDR_RDR_RXC_27, "RXC.27", HL7::optional, HL7::repetition_off);
    addObject<TQ1>(RDR_RDR_TQ1_28, "TQ1.28", HL7::initialized, HL7::repetition_off);
    addObject<TQ2>(RDR_RDR_TQ2_29, "TQ2.29", HL7::optional, HL7::repetition_off);
    addObject<TQ1>(RDR_RDR_TQ1_30, "TQ1.30", HL7::initialized, HL7::repetition_off);
    addObject<TQ2>(RDR_RDR_TQ2_31, "TQ2.31", HL7::optional, HL7::repetition_off);
    addObject<RXE>(RDR_RDR_RXE_32, "RXE.32", HL7::initialized, HL7::repetition_off);
    addObject<RXR>(RDR_RDR_RXR_34, "RXR.34", HL7::initialized, HL7::repetition_off);
    addObject<RXC>(RDR_RDR_RXC_35, "RXC.35", HL7::optional, HL7::repetition_off);
    addObject<RXD>(RDR_RDR_RXD_36, "RXD.36", HL7::initialized, HL7::repetition_off);
    addObject<RXR>(RDR_RDR_RXR_37, "RXR.37", HL7::initialized, HL7::repetition_off);
    addObject<RXC>(RDR_RDR_RXC_38, "RXC.38", HL7::optional, HL7::repetition_off);
    addObject<TQ1>(RDR_RDR_TQ1_39, "TQ1.39", HL7::initialized, HL7::repetition_off);
    addObject<TQ2>(RDR_RDR_TQ2_40, "TQ2.40", HL7::optional, HL7::repetition_off);
  }

 public:
  /* Getters list */
  MSH* getMSH_1(size_t index = 0) {
    return (MSH*)this->getObjectSafe(index, RDR_RDR_MSH_1);
  }
  MSA* getMSA_2(size_t index = 0) {
    return (MSA*)this->getObjectSafe(index, RDR_RDR_MSA_2);
  }
  ERR* getERR_3(size_t index = 0) {
    return (ERR*)this->getObjectSafe(index, RDR_RDR_ERR_3);
  }
  SFT* getSFT_4(size_t index = 0) {
    return (SFT*)this->getObjectSafe(index, RDR_RDR_SFT_4);
  }
  UAC* getUAC_5(size_t index = 0) {
    return (UAC*)this->getObjectSafe(index, RDR_RDR_UAC_5);
  }
  DSC* getDSC_7(size_t index = 0) {
    return (DSC*)this->getObjectSafe(index, RDR_RDR_DSC_7);
  }
  QRD* getQRD_8(size_t index = 0) {
    return (QRD*)this->getObjectSafe(index, RDR_RDR_QRD_8);
  }
  QRF* getQRF_9(size_t index = 0) {
    return (QRF*)this->getObjectSafe(index, RDR_RDR_QRF_9);
  }
  PID* getPID_12(size_t index = 0) {
    return (PID*)this->getObjectSafe(index, RDR_RDR_PID_12);
  }
  NTE* getNTE_13(size_t index = 0) {
    return (NTE*)this->getObjectSafe(index, RDR_RDR_NTE_13);
  }
  PID* getPID_14(size_t index = 0) {
    return (PID*)this->getObjectSafe(index, RDR_RDR_PID_14);
  }
  NTE* getNTE_15(size_t index = 0) {
    return (NTE*)this->getObjectSafe(index, RDR_RDR_NTE_15);
  }
  ORC* getORC_16(size_t index = 0) {
    return (ORC*)this->getObjectSafe(index, RDR_RDR_ORC_16);
  }
  TQ1* getTQ1_20(size_t index = 0) {
    return (TQ1*)this->getObjectSafe(index, RDR_RDR_TQ1_20);
  }
  TQ2* getTQ2_21(size_t index = 0) {
    return (TQ2*)this->getObjectSafe(index, RDR_RDR_TQ2_21);
  }
  TQ1* getTQ1_22(size_t index = 0) {
    return (TQ1*)this->getObjectSafe(index, RDR_RDR_TQ1_22);
  }
  TQ2* getTQ2_23(size_t index = 0) {
    return (TQ2*)this->getObjectSafe(index, RDR_RDR_TQ2_23);
  }
  RXE* getRXE_24(size_t index = 0) {
    return (RXE*)this->getObjectSafe(index, RDR_RDR_RXE_24);
  }
  RXR* getRXR_26(size_t index = 0) {
    return (RXR*)this->getObjectSafe(index, RDR_RDR_RXR_26);
  }
  RXC* getRXC_27(size_t index = 0) {
    return (RXC*)this->getObjectSafe(index, RDR_RDR_RXC_27);
  }
  TQ1* getTQ1_28(size_t index = 0) {
    return (TQ1*)this->getObjectSafe(index, RDR_RDR_TQ1_28);
  }
  TQ2* getTQ2_29(size_t index = 0) {
    return (TQ2*)this->getObjectSafe(index, RDR_RDR_TQ2_29);
  }
  TQ1* getTQ1_30(size_t index = 0) {
    return (TQ1*)this->getObjectSafe(index, RDR_RDR_TQ1_30);
  }
  TQ2* getTQ2_31(size_t index = 0) {
    return (TQ2*)this->getObjectSafe(index, RDR_RDR_TQ2_31);
  }
  RXE* getRXE_32(size_t index = 0) {
    return (RXE*)this->getObjectSafe(index, RDR_RDR_RXE_32);
  }
  RXR* getRXR_34(size_t index = 0) {
    return (RXR*)this->getObjectSafe(index, RDR_RDR_RXR_34);
  }
  RXC* getRXC_35(size_t index = 0) {
    return (RXC*)this->getObjectSafe(index, RDR_RDR_RXC_35);
  }
  RXD* getRXD_36(size_t index = 0) {
    return (RXD*)this->getObjectSafe(index, RDR_RDR_RXD_36);
  }
  RXR* getRXR_37(size_t index = 0) {
    return (RXR*)this->getObjectSafe(index, RDR_RDR_RXR_37);
  }
  RXC* getRXC_38(size_t index = 0) {
    return (RXC*)this->getObjectSafe(index, RDR_RDR_RXC_38);
  }
  TQ1* getTQ1_39(size_t index = 0) {
    return (TQ1*)this->getObjectSafe(index, RDR_RDR_TQ1_39);
  }
  TQ2* getTQ2_40(size_t index = 0) {
    return (TQ2*)this->getObjectSafe(index, RDR_RDR_TQ2_40);
  }

  /* Checker list */
  bool isMSH_1(size_t index = 0) {
    try {
      return this->getObject(index, RDR_RDR_MSH_1) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isMSA_2(size_t index = 0) {
    try {
      return this->getObject(index, RDR_RDR_MSA_2) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isERR_3(size_t index = 0) {
    try {
      return this->getObject(index, RDR_RDR_ERR_3) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isSFT_4(size_t index = 0) {
    try {
      return this->getObject(index, RDR_RDR_SFT_4) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isUAC_5(size_t index = 0) {
    try {
      return this->getObject(index, RDR_RDR_UAC_5) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isDSC_7(size_t index = 0) {
    try {
      return this->getObject(index, RDR_RDR_DSC_7) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isQRD_8(size_t index = 0) {
    try {
      return this->getObject(index, RDR_RDR_QRD_8) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isQRF_9(size_t index = 0) {
    try {
      return this->getObject(index, RDR_RDR_QRF_9) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isPID_12(size_t index = 0) {
    try {
      return this->getObject(index, RDR_RDR_PID_12) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isNTE_13(size_t index = 0) {
    try {
      return this->getObject(index, RDR_RDR_NTE_13) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isPID_14(size_t index = 0) {
    try {
      return this->getObject(index, RDR_RDR_PID_14) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isNTE_15(size_t index = 0) {
    try {
      return this->getObject(index, RDR_RDR_NTE_15) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isORC_16(size_t index = 0) {
    try {
      return this->getObject(index, RDR_RDR_ORC_16) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isTQ1_20(size_t index = 0) {
    try {
      return this->getObject(index, RDR_RDR_TQ1_20) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isTQ2_21(size_t index = 0) {
    try {
      return this->getObject(index, RDR_RDR_TQ2_21) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isTQ1_22(size_t index = 0) {
    try {
      return this->getObject(index, RDR_RDR_TQ1_22) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isTQ2_23(size_t index = 0) {
    try {
      return this->getObject(index, RDR_RDR_TQ2_23) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isRXE_24(size_t index = 0) {
    try {
      return this->getObject(index, RDR_RDR_RXE_24) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isRXR_26(size_t index = 0) {
    try {
      return this->getObject(index, RDR_RDR_RXR_26) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isRXC_27(size_t index = 0) {
    try {
      return this->getObject(index, RDR_RDR_RXC_27) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isTQ1_28(size_t index = 0) {
    try {
      return this->getObject(index, RDR_RDR_TQ1_28) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isTQ2_29(size_t index = 0) {
    try {
      return this->getObject(index, RDR_RDR_TQ2_29) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isTQ1_30(size_t index = 0) {
    try {
      return this->getObject(index, RDR_RDR_TQ1_30) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isTQ2_31(size_t index = 0) {
    try {
      return this->getObject(index, RDR_RDR_TQ2_31) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isRXE_32(size_t index = 0) {
    try {
      return this->getObject(index, RDR_RDR_RXE_32) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isRXR_34(size_t index = 0) {
    try {
      return this->getObject(index, RDR_RDR_RXR_34) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isRXC_35(size_t index = 0) {
    try {
      return this->getObject(index, RDR_RDR_RXC_35) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isRXD_36(size_t index = 0) {
    try {
      return this->getObject(index, RDR_RDR_RXD_36) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isRXR_37(size_t index = 0) {
    try {
      return this->getObject(index, RDR_RDR_RXR_37) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isRXC_38(size_t index = 0) {
    try {
      return this->getObject(index, RDR_RDR_RXC_38) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isTQ1_39(size_t index = 0) {
    try {
      return this->getObject(index, RDR_RDR_TQ1_39) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isTQ2_40(size_t index = 0) {
    try {
      return this->getObject(index, RDR_RDR_TQ2_40) != NULL;
    } catch (...) {
    }
    return false;
  }
}; /* RDR_RDR_ */
} /* namespace HL7_281 */
#endif /*  __RDR_RDR__281_H__ */
