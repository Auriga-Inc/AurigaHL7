/*
 * hacca - C Toolkit for the HL7 Protocol
 *
 * Warning: This file was automatically generated by [hawk], please do not edit.
 *          Thu 25 Jun 19:05:29 CEST 2020
 *
 * R. Carbone (rocco@tecsiel.it)
 * Jun 2020
 *
 * SPDX-License-Identifier: BSD-2-Clause-FreeBSD
 *
 * This file was developed as part of the ongoing activities related
 * to the design, implementation and execution of interoperability tests
 * between hacca-based versus AurigaHL7-based applications.
 *
 * In more details I decided to extend AurigaHL7 C++ Library with header files
 * implementing HL7 structures of the version 2.8.1 of the protocol (April 2014)
 * because the version 2.4 distributed with AurigaHL7 is a bit outdated (October 2000).
 *
 * All files in this fork was automatically generated by hacca-based tool [hawk]
 * and strictly follow the syntax and convention originally defined
 * by Auriga HL7 C++ Library just as form of continuity, convenience
 * and respect for their superb work.
 */


#ifndef __OSU_O41__281_H__
#define __OSU_O41__281_H__

#include "../../common/Util.h"
#include "../segment/ARV.h"
#include "../segment/ERR.h"
#include "../segment/MSA.h"
#include "../segment/MSH.h"
#include "../segment/NTE.h"
#include "../segment/ORC.h"
#include "../segment/PID.h"
#include "../segment/PRT.h"
#include "../segment/SFT.h"
#include "../segment/UAC.h"

namespace HL7_281 {

/* Internal structures/groups */
struct OSU_O41_ORDER_STATUS; /* ORDER_STATUS */

/* ORDER_STATUS */
struct OSU_O41_ORDER_STATUS : public HL7Group {
  OSU_O41_ORDER_STATUS() { this->init(); }
  /* Fields ID  */
  enum FIELD_ID {
    OSU_O41_ORC_1,
    OSU_O41_PRT_2,
    FIELD_ID_MAX
  };

  const char* className() const { return "OSU_O41_ORDER_STATUS"; }
  OSU_O41_ORDER_STATUS* create() const { return new OSU_O41_ORDER_STATUS(); }

 private:
  /* Initialize object */
  void init() {
    setName("OSU_O41.ORDER_STATUS");
    addObject<ORC>(OSU_O41_ORC_1, "ORC.1", HL7::optional, HL7::repetition_on);
    addObject<PRT>(OSU_O41_PRT_2, "PRT.2", HL7::optional, HL7::repetition_on);
  }

 public:
  /* Getters list */
  ORC* getORC_1(size_t index = 0) {
    return (ORC*)this->getObjectSafe(index, OSU_O41_ORC_1);
  }
  PRT* getPRT_2(size_t index = 0) {
    return (PRT*)this->getObjectSafe(index, OSU_O41_PRT_2);
  }

  /* Checker list */
  bool isORC_1(size_t index = 0) {
    try {
      return this->getObject(index, OSU_O41_ORC_1) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isPRT_2(size_t index = 0) {
    try {
      return this->getObject(index, OSU_O41_PRT_2) != NULL;
    } catch (...) {
    }
    return false;
  }
}; /* OSU_O41_ORDER_STATUS */

/* OSU_O41 */
struct OSU_O41 : public HL7Message {
  OSU_O41() { this->init(); }
  /* Fields ID  */
  enum FIELD_ID {
    OSU_O41_MSH_1,
    OSU_O41_MSA_2,
    OSU_O41_ERR_3,
    OSU_O41_SFT_4,
    OSU_O41_UAC_5,
    OSU_O41_NTE_6,
    OSU_O41_PID_7,
    OSU_O41_ARV_8,
    OSU_O41_ORC_10,
    OSU_O41_PRT_11,
    FIELD_ID_MAX
  };

  const char* className() const { return "OSU_O41"; }
  OSU_O41* create() const { return new OSU_O41(); }

 private:
  /* Initialize object */
  void init() {
    setName("OSU_O41");
    addObject<MSH>(OSU_O41_MSH_1, "MSH.1", HL7::initialized, HL7::repetition_off);
    addObject<MSA>(OSU_O41_MSA_2, "MSA.2", HL7::initialized, HL7::repetition_off);
    addObject<ERR>(OSU_O41_ERR_3, "ERR.3", HL7::optional, HL7::repetition_on);
    addObject<SFT>(OSU_O41_SFT_4, "SFT.4", HL7::optional, HL7::repetition_on);
    addObject<UAC>(OSU_O41_UAC_5, "UAC.5", HL7::optional, HL7::repetition_off);
    addObject<NTE>(OSU_O41_NTE_6, "NTE.6", HL7::optional, HL7::repetition_on);
    addObject<PID>(OSU_O41_PID_7, "PID.7", HL7::optional, HL7::repetition_off);
    addObject<ARV>(OSU_O41_ARV_8, "ARV.8", HL7::optional, HL7::repetition_on);
    addObject<ORC>(OSU_O41_ORC_10, "ORC.10", HL7::initialized, HL7::repetition_off);
    addObject<PRT>(OSU_O41_PRT_11, "PRT.11", HL7::optional, HL7::repetition_off);
  }

 public:
  /* Getters list */
  MSH* getMSH_1(size_t index = 0) {
    return (MSH*)this->getObjectSafe(index, OSU_O41_MSH_1);
  }
  MSA* getMSA_2(size_t index = 0) {
    return (MSA*)this->getObjectSafe(index, OSU_O41_MSA_2);
  }
  ERR* getERR_3(size_t index = 0) {
    return (ERR*)this->getObjectSafe(index, OSU_O41_ERR_3);
  }
  SFT* getSFT_4(size_t index = 0) {
    return (SFT*)this->getObjectSafe(index, OSU_O41_SFT_4);
  }
  UAC* getUAC_5(size_t index = 0) {
    return (UAC*)this->getObjectSafe(index, OSU_O41_UAC_5);
  }
  NTE* getNTE_6(size_t index = 0) {
    return (NTE*)this->getObjectSafe(index, OSU_O41_NTE_6);
  }
  PID* getPID_7(size_t index = 0) {
    return (PID*)this->getObjectSafe(index, OSU_O41_PID_7);
  }
  ARV* getARV_8(size_t index = 0) {
    return (ARV*)this->getObjectSafe(index, OSU_O41_ARV_8);
  }
  ORC* getORC_10(size_t index = 0) {
    return (ORC*)this->getObjectSafe(index, OSU_O41_ORC_10);
  }
  PRT* getPRT_11(size_t index = 0) {
    return (PRT*)this->getObjectSafe(index, OSU_O41_PRT_11);
  }

  /* Checker list */
  bool isMSH_1(size_t index = 0) {
    try {
      return this->getObject(index, OSU_O41_MSH_1) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isMSA_2(size_t index = 0) {
    try {
      return this->getObject(index, OSU_O41_MSA_2) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isERR_3(size_t index = 0) {
    try {
      return this->getObject(index, OSU_O41_ERR_3) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isSFT_4(size_t index = 0) {
    try {
      return this->getObject(index, OSU_O41_SFT_4) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isUAC_5(size_t index = 0) {
    try {
      return this->getObject(index, OSU_O41_UAC_5) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isNTE_6(size_t index = 0) {
    try {
      return this->getObject(index, OSU_O41_NTE_6) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isPID_7(size_t index = 0) {
    try {
      return this->getObject(index, OSU_O41_PID_7) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isARV_8(size_t index = 0) {
    try {
      return this->getObject(index, OSU_O41_ARV_8) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isORC_10(size_t index = 0) {
    try {
      return this->getObject(index, OSU_O41_ORC_10) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isPRT_11(size_t index = 0) {
    try {
      return this->getObject(index, OSU_O41_PRT_11) != NULL;
    } catch (...) {
    }
    return false;
  }
}; /* OSU_O41_ */
} /* namespace HL7_281 */
#endif /*  __OSU_O41__281_H__ */
