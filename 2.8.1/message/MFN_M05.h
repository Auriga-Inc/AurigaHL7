/*
 * hacca - C Toolkit for the HL7 Protocol
 *
 * Warning: This file was automatically generated by [hawk], please do not edit.
 *          Thu 25 Jun 19:03:33 CEST 2020
 *
 * R. Carbone (rocco@tecsiel.it)
 * Jun 2020
 *
 * SPDX-License-Identifier: BSD-2-Clause-FreeBSD
 *
 * This file was developed as part of the ongoing activities related
 * to the design, implementation and execution of interoperability tests
 * between hacca-based versus AurigaHL7-based applications.
 *
 * In more details I decided to extend AurigaHL7 C++ Library with header files
 * implementing HL7 structures of the version 2.8.1 of the protocol (April 2014)
 * because the version 2.4 distributed with AurigaHL7 is a bit outdated (October 2000).
 *
 * All files in this fork was automatically generated by hacca-based tool [hawk]
 * and strictly follow the syntax and convention originally defined
 * by Auriga HL7 C++ Library just as form of continuity, convenience
 * and respect for their superb work.
 */


#ifndef __MFN_M05__281_H__
#define __MFN_M05__281_H__

#include "../../common/Util.h"
#include "../segment/LCC.h"
#include "../segment/LCH.h"
#include "../segment/LDP.h"
#include "../segment/LOC.h"
#include "../segment/LRL.h"
#include "../segment/MFE.h"
#include "../segment/MFI.h"
#include "../segment/MSH.h"
#include "../segment/SFT.h"
#include "../segment/UAC.h"

namespace HL7_281 {

/* Internal structures/groups */
struct MFN_M05_MF_LOCATION; /* MF_LOCATION */
struct MFN_M05_MF_LOC_DEPT; /* MF_LOC_DEPT */

/* MF_LOCATION */
struct MFN_M05_MF_LOCATION : public HL7Group {
  MFN_M05_MF_LOCATION() { this->init(); }
  /* Fields ID  */
  enum FIELD_ID {
    MFN_M05_LCH_1,
    MFN_M05_LOC_2,
    MFN_M05_LRL_3,
    MFN_M05_MFE_4,
    MFN_M05_MFN_M05_MF_LOC_DEPT_5,
    FIELD_ID_MAX
  };

  const char* className() const { return "MFN_M05_MF_LOCATION"; }
  MFN_M05_MF_LOCATION* create() const { return new MFN_M05_MF_LOCATION(); }

 private:
  /* Initialize object */
  void init() {
    setName("MFN_M05.MF_LOCATION");
    addObject<LCH>(MFN_M05_LCH_1, "LCH.1", HL7::optional, HL7::repetition_on);
    addObject<LOC>(MFN_M05_LOC_2, "LOC.2", HL7::optional, HL7::repetition_on);
    addObject<LRL>(MFN_M05_LRL_3, "LRL.3", HL7::optional, HL7::repetition_on);
    addObject<MFE>(MFN_M05_MFE_4, "MFE.4", HL7::optional, HL7::repetition_on);
    addObject<MFN_M05_MF_LOC_DEPT>(MFN_M05_MFN_M05_MF_LOC_DEPT_5, "MFN_M05_MF_LOC_DEPT.5", HL7::optional, HL7::repetition_on);
  }

 public:
  /* Getters list */
  LCH* getLCH_1(size_t index = 0) {
    return (LCH*)this->getObjectSafe(index, MFN_M05_LCH_1);
  }
  LOC* getLOC_2(size_t index = 0) {
    return (LOC*)this->getObjectSafe(index, MFN_M05_LOC_2);
  }
  LRL* getLRL_3(size_t index = 0) {
    return (LRL*)this->getObjectSafe(index, MFN_M05_LRL_3);
  }
  MFE* getMFE_4(size_t index = 0) {
    return (MFE*)this->getObjectSafe(index, MFN_M05_MFE_4);
  }
  MFN_M05_MF_LOC_DEPT* getMFN_M05_MF_LOC_DEPT_5(size_t index = 0) {
    return (MFN_M05_MF_LOC_DEPT*)this->getObjectSafe(index, MFN_M05_MFN_M05_MF_LOC_DEPT_5);
  }

  /* Checker list */
  bool isLCH_1(size_t index = 0) {
    try {
      return this->getObject(index, MFN_M05_LCH_1) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isLOC_2(size_t index = 0) {
    try {
      return this->getObject(index, MFN_M05_LOC_2) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isLRL_3(size_t index = 0) {
    try {
      return this->getObject(index, MFN_M05_LRL_3) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isMFE_4(size_t index = 0) {
    try {
      return this->getObject(index, MFN_M05_MFE_4) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isMFN_M05_MF_LOC_DEPT_5(size_t index = 0) {
    try {
      return this->getObject(index, MFN_M05_MFN_M05_MF_LOC_DEPT_5) != NULL;
    } catch (...) {
    }
    return false;
  }
}; /* MFN_M05_MF_LOCATION */

/* MF_LOC_DEPT */
struct MFN_M05_MF_LOC_DEPT : public HL7Group {
  MFN_M05_MF_LOC_DEPT() { this->init(); }
  /* Fields ID  */
  enum FIELD_ID {
    MFN_M05_LCC_1,
    MFN_M05_LCH_2,
    MFN_M05_LDP_3,
    FIELD_ID_MAX
  };

  const char* className() const { return "MFN_M05_MF_LOC_DEPT"; }
  MFN_M05_MF_LOC_DEPT* create() const { return new MFN_M05_MF_LOC_DEPT(); }

 private:
  /* Initialize object */
  void init() {
    setName("MFN_M05.MF_LOC_DEPT");
    addObject<LCC>(MFN_M05_LCC_1, "LCC.1", HL7::optional, HL7::repetition_on);
    addObject<LCH>(MFN_M05_LCH_2, "LCH.2", HL7::optional, HL7::repetition_on);
    addObject<LDP>(MFN_M05_LDP_3, "LDP.3", HL7::optional, HL7::repetition_on);
  }

 public:
  /* Getters list */
  LCC* getLCC_1(size_t index = 0) {
    return (LCC*)this->getObjectSafe(index, MFN_M05_LCC_1);
  }
  LCH* getLCH_2(size_t index = 0) {
    return (LCH*)this->getObjectSafe(index, MFN_M05_LCH_2);
  }
  LDP* getLDP_3(size_t index = 0) {
    return (LDP*)this->getObjectSafe(index, MFN_M05_LDP_3);
  }

  /* Checker list */
  bool isLCC_1(size_t index = 0) {
    try {
      return this->getObject(index, MFN_M05_LCC_1) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isLCH_2(size_t index = 0) {
    try {
      return this->getObject(index, MFN_M05_LCH_2) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isLDP_3(size_t index = 0) {
    try {
      return this->getObject(index, MFN_M05_LDP_3) != NULL;
    } catch (...) {
    }
    return false;
  }
}; /* MFN_M05_MF_LOC_DEPT */

/* MFN_M05 */
struct MFN_M05 : public HL7Message {
  MFN_M05() { this->init(); }
  /* Fields ID  */
  enum FIELD_ID {
    MFN_M05_MSH_1,
    MFN_M05_SFT_2,
    MFN_M05_UAC_3,
    MFN_M05_MFI_4,
    MFN_M05_MFE_6,
    MFN_M05_LOC_7,
    MFN_M05_LCH_8,
    MFN_M05_LRL_9,
    MFN_M05_LDP_11,
    MFN_M05_LCH_12,
    MFN_M05_LCC_13,
    FIELD_ID_MAX
  };

  const char* className() const { return "MFN_M05"; }
  MFN_M05* create() const { return new MFN_M05(); }

 private:
  /* Initialize object */
  void init() {
    setName("MFN_M05");
    addObject<MSH>(MFN_M05_MSH_1, "MSH.1", HL7::initialized, HL7::repetition_off);
    addObject<SFT>(MFN_M05_SFT_2, "SFT.2", HL7::optional, HL7::repetition_on);
    addObject<UAC>(MFN_M05_UAC_3, "UAC.3", HL7::optional, HL7::repetition_off);
    addObject<MFI>(MFN_M05_MFI_4, "MFI.4", HL7::initialized, HL7::repetition_off);
    addObject<MFE>(MFN_M05_MFE_6, "MFE.6", HL7::initialized, HL7::repetition_off);
    addObject<LOC>(MFN_M05_LOC_7, "LOC.7", HL7::initialized, HL7::repetition_off);
    addObject<LCH>(MFN_M05_LCH_8, "LCH.8", HL7::optional, HL7::repetition_off);
    addObject<LRL>(MFN_M05_LRL_9, "LRL.9", HL7::optional, HL7::repetition_off);
    addObject<LDP>(MFN_M05_LDP_11, "LDP.11", HL7::initialized, HL7::repetition_off);
    addObject<LCH>(MFN_M05_LCH_12, "LCH.12", HL7::optional, HL7::repetition_off);
    addObject<LCC>(MFN_M05_LCC_13, "LCC.13", HL7::optional, HL7::repetition_off);
  }

 public:
  /* Getters list */
  MSH* getMSH_1(size_t index = 0) {
    return (MSH*)this->getObjectSafe(index, MFN_M05_MSH_1);
  }
  SFT* getSFT_2(size_t index = 0) {
    return (SFT*)this->getObjectSafe(index, MFN_M05_SFT_2);
  }
  UAC* getUAC_3(size_t index = 0) {
    return (UAC*)this->getObjectSafe(index, MFN_M05_UAC_3);
  }
  MFI* getMFI_4(size_t index = 0) {
    return (MFI*)this->getObjectSafe(index, MFN_M05_MFI_4);
  }
  MFE* getMFE_6(size_t index = 0) {
    return (MFE*)this->getObjectSafe(index, MFN_M05_MFE_6);
  }
  LOC* getLOC_7(size_t index = 0) {
    return (LOC*)this->getObjectSafe(index, MFN_M05_LOC_7);
  }
  LCH* getLCH_8(size_t index = 0) {
    return (LCH*)this->getObjectSafe(index, MFN_M05_LCH_8);
  }
  LRL* getLRL_9(size_t index = 0) {
    return (LRL*)this->getObjectSafe(index, MFN_M05_LRL_9);
  }
  LDP* getLDP_11(size_t index = 0) {
    return (LDP*)this->getObjectSafe(index, MFN_M05_LDP_11);
  }
  LCH* getLCH_12(size_t index = 0) {
    return (LCH*)this->getObjectSafe(index, MFN_M05_LCH_12);
  }
  LCC* getLCC_13(size_t index = 0) {
    return (LCC*)this->getObjectSafe(index, MFN_M05_LCC_13);
  }

  /* Checker list */
  bool isMSH_1(size_t index = 0) {
    try {
      return this->getObject(index, MFN_M05_MSH_1) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isSFT_2(size_t index = 0) {
    try {
      return this->getObject(index, MFN_M05_SFT_2) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isUAC_3(size_t index = 0) {
    try {
      return this->getObject(index, MFN_M05_UAC_3) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isMFI_4(size_t index = 0) {
    try {
      return this->getObject(index, MFN_M05_MFI_4) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isMFE_6(size_t index = 0) {
    try {
      return this->getObject(index, MFN_M05_MFE_6) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isLOC_7(size_t index = 0) {
    try {
      return this->getObject(index, MFN_M05_LOC_7) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isLCH_8(size_t index = 0) {
    try {
      return this->getObject(index, MFN_M05_LCH_8) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isLRL_9(size_t index = 0) {
    try {
      return this->getObject(index, MFN_M05_LRL_9) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isLDP_11(size_t index = 0) {
    try {
      return this->getObject(index, MFN_M05_LDP_11) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isLCH_12(size_t index = 0) {
    try {
      return this->getObject(index, MFN_M05_LCH_12) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isLCC_13(size_t index = 0) {
    try {
      return this->getObject(index, MFN_M05_LCC_13) != NULL;
    } catch (...) {
    }
    return false;
  }
}; /* MFN_M05_ */
} /* namespace HL7_281 */
#endif /*  __MFN_M05__281_H__ */
