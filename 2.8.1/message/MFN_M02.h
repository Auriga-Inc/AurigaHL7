/*
 * hacca - C Toolkit for the HL7 Protocol
 *
 * Warning: This file was automatically generated by [hawk], please do not edit.
 *          Thu 25 Jun 19:03:32 CEST 2020
 *
 * R. Carbone (rocco@tecsiel.it)
 * Jun 2020
 *
 * SPDX-License-Identifier: BSD-2-Clause-FreeBSD
 *
 * This file was developed as part of the ongoing activities related
 * to the design, implementation and execution of interoperability tests
 * between hacca-based versus AurigaHL7-based applications.
 *
 * In more details I decided to extend AurigaHL7 C++ Library with header files
 * implementing HL7 structures of the version 2.8.1 of the protocol (April 2014)
 * because the version 2.4 distributed with AurigaHL7 is a bit outdated (October 2000).
 *
 * All files in this fork was automatically generated by hacca-based tool [hawk]
 * and strictly follow the syntax and convention originally defined
 * by Auriga HL7 C++ Library just as form of continuity, convenience
 * and respect for their superb work.
 */


#ifndef __MFN_M02__281_H__
#define __MFN_M02__281_H__

#include "../../common/Util.h"
#include "../segment/AFF.h"
#include "../segment/CER.h"
#include "../segment/EDU.h"
#include "../segment/LAN.h"
#include "../segment/MFE.h"
#include "../segment/MFI.h"
#include "../segment/MSH.h"
#include "../segment/NTE.h"
#include "../segment/ORG.h"
#include "../segment/PRA.h"
#include "../segment/SFT.h"
#include "../segment/STF.h"
#include "../segment/UAC.h"

namespace HL7_281 {

/* Internal structures/groups */
struct MFN_M02_MF_STAFF; /* MF_STAFF */

/* MF_STAFF */
struct MFN_M02_MF_STAFF : public HL7Group {
  MFN_M02_MF_STAFF() { this->init(); }
  /* Fields ID  */
  enum FIELD_ID {
    MFN_M02_AFF_1,
    MFN_M02_CER_2,
    MFN_M02_EDU_3,
    MFN_M02_LAN_4,
    MFN_M02_MFE_5,
    MFN_M02_NTE_6,
    MFN_M02_ORG_7,
    MFN_M02_PRA_8,
    MFN_M02_STF_9,
    FIELD_ID_MAX
  };

  const char* className() const { return "MFN_M02_MF_STAFF"; }
  MFN_M02_MF_STAFF* create() const { return new MFN_M02_MF_STAFF(); }

 private:
  /* Initialize object */
  void init() {
    setName("MFN_M02.MF_STAFF");
    addObject<AFF>(MFN_M02_AFF_1, "AFF.1", HL7::optional, HL7::repetition_on);
    addObject<CER>(MFN_M02_CER_2, "CER.2", HL7::optional, HL7::repetition_on);
    addObject<EDU>(MFN_M02_EDU_3, "EDU.3", HL7::optional, HL7::repetition_on);
    addObject<LAN>(MFN_M02_LAN_4, "LAN.4", HL7::optional, HL7::repetition_on);
    addObject<MFE>(MFN_M02_MFE_5, "MFE.5", HL7::optional, HL7::repetition_on);
    addObject<NTE>(MFN_M02_NTE_6, "NTE.6", HL7::optional, HL7::repetition_on);
    addObject<ORG>(MFN_M02_ORG_7, "ORG.7", HL7::optional, HL7::repetition_on);
    addObject<PRA>(MFN_M02_PRA_8, "PRA.8", HL7::optional, HL7::repetition_on);
    addObject<STF>(MFN_M02_STF_9, "STF.9", HL7::optional, HL7::repetition_on);
  }

 public:
  /* Getters list */
  AFF* getAFF_1(size_t index = 0) {
    return (AFF*)this->getObjectSafe(index, MFN_M02_AFF_1);
  }
  CER* getCER_2(size_t index = 0) {
    return (CER*)this->getObjectSafe(index, MFN_M02_CER_2);
  }
  EDU* getEDU_3(size_t index = 0) {
    return (EDU*)this->getObjectSafe(index, MFN_M02_EDU_3);
  }
  LAN* getLAN_4(size_t index = 0) {
    return (LAN*)this->getObjectSafe(index, MFN_M02_LAN_4);
  }
  MFE* getMFE_5(size_t index = 0) {
    return (MFE*)this->getObjectSafe(index, MFN_M02_MFE_5);
  }
  NTE* getNTE_6(size_t index = 0) {
    return (NTE*)this->getObjectSafe(index, MFN_M02_NTE_6);
  }
  ORG* getORG_7(size_t index = 0) {
    return (ORG*)this->getObjectSafe(index, MFN_M02_ORG_7);
  }
  PRA* getPRA_8(size_t index = 0) {
    return (PRA*)this->getObjectSafe(index, MFN_M02_PRA_8);
  }
  STF* getSTF_9(size_t index = 0) {
    return (STF*)this->getObjectSafe(index, MFN_M02_STF_9);
  }

  /* Checker list */
  bool isAFF_1(size_t index = 0) {
    try {
      return this->getObject(index, MFN_M02_AFF_1) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isCER_2(size_t index = 0) {
    try {
      return this->getObject(index, MFN_M02_CER_2) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isEDU_3(size_t index = 0) {
    try {
      return this->getObject(index, MFN_M02_EDU_3) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isLAN_4(size_t index = 0) {
    try {
      return this->getObject(index, MFN_M02_LAN_4) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isMFE_5(size_t index = 0) {
    try {
      return this->getObject(index, MFN_M02_MFE_5) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isNTE_6(size_t index = 0) {
    try {
      return this->getObject(index, MFN_M02_NTE_6) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isORG_7(size_t index = 0) {
    try {
      return this->getObject(index, MFN_M02_ORG_7) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isPRA_8(size_t index = 0) {
    try {
      return this->getObject(index, MFN_M02_PRA_8) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isSTF_9(size_t index = 0) {
    try {
      return this->getObject(index, MFN_M02_STF_9) != NULL;
    } catch (...) {
    }
    return false;
  }
}; /* MFN_M02_MF_STAFF */

/* MFN_M02 */
struct MFN_M02 : public HL7Message {
  MFN_M02() { this->init(); }
  /* Fields ID  */
  enum FIELD_ID {
    MFN_M02_MSH_1,
    MFN_M02_SFT_2,
    MFN_M02_UAC_3,
    MFN_M02_MFI_4,
    MFN_M02_MFE_6,
    MFN_M02_STF_7,
    MFN_M02_PRA_8,
    MFN_M02_ORG_9,
    MFN_M02_AFF_10,
    MFN_M02_LAN_11,
    MFN_M02_EDU_12,
    MFN_M02_CER_13,
    MFN_M02_NTE_14,
    FIELD_ID_MAX
  };

  const char* className() const { return "MFN_M02"; }
  MFN_M02* create() const { return new MFN_M02(); }

 private:
  /* Initialize object */
  void init() {
    setName("MFN_M02");
    addObject<MSH>(MFN_M02_MSH_1, "MSH.1", HL7::initialized, HL7::repetition_off);
    addObject<SFT>(MFN_M02_SFT_2, "SFT.2", HL7::optional, HL7::repetition_on);
    addObject<UAC>(MFN_M02_UAC_3, "UAC.3", HL7::optional, HL7::repetition_off);
    addObject<MFI>(MFN_M02_MFI_4, "MFI.4", HL7::initialized, HL7::repetition_off);
    addObject<MFE>(MFN_M02_MFE_6, "MFE.6", HL7::initialized, HL7::repetition_off);
    addObject<STF>(MFN_M02_STF_7, "STF.7", HL7::initialized, HL7::repetition_off);
    addObject<PRA>(MFN_M02_PRA_8, "PRA.8", HL7::optional, HL7::repetition_off);
    addObject<ORG>(MFN_M02_ORG_9, "ORG.9", HL7::optional, HL7::repetition_off);
    addObject<AFF>(MFN_M02_AFF_10, "AFF.10", HL7::optional, HL7::repetition_off);
    addObject<LAN>(MFN_M02_LAN_11, "LAN.11", HL7::optional, HL7::repetition_off);
    addObject<EDU>(MFN_M02_EDU_12, "EDU.12", HL7::optional, HL7::repetition_off);
    addObject<CER>(MFN_M02_CER_13, "CER.13", HL7::optional, HL7::repetition_off);
    addObject<NTE>(MFN_M02_NTE_14, "NTE.14", HL7::optional, HL7::repetition_off);
  }

 public:
  /* Getters list */
  MSH* getMSH_1(size_t index = 0) {
    return (MSH*)this->getObjectSafe(index, MFN_M02_MSH_1);
  }
  SFT* getSFT_2(size_t index = 0) {
    return (SFT*)this->getObjectSafe(index, MFN_M02_SFT_2);
  }
  UAC* getUAC_3(size_t index = 0) {
    return (UAC*)this->getObjectSafe(index, MFN_M02_UAC_3);
  }
  MFI* getMFI_4(size_t index = 0) {
    return (MFI*)this->getObjectSafe(index, MFN_M02_MFI_4);
  }
  MFE* getMFE_6(size_t index = 0) {
    return (MFE*)this->getObjectSafe(index, MFN_M02_MFE_6);
  }
  STF* getSTF_7(size_t index = 0) {
    return (STF*)this->getObjectSafe(index, MFN_M02_STF_7);
  }
  PRA* getPRA_8(size_t index = 0) {
    return (PRA*)this->getObjectSafe(index, MFN_M02_PRA_8);
  }
  ORG* getORG_9(size_t index = 0) {
    return (ORG*)this->getObjectSafe(index, MFN_M02_ORG_9);
  }
  AFF* getAFF_10(size_t index = 0) {
    return (AFF*)this->getObjectSafe(index, MFN_M02_AFF_10);
  }
  LAN* getLAN_11(size_t index = 0) {
    return (LAN*)this->getObjectSafe(index, MFN_M02_LAN_11);
  }
  EDU* getEDU_12(size_t index = 0) {
    return (EDU*)this->getObjectSafe(index, MFN_M02_EDU_12);
  }
  CER* getCER_13(size_t index = 0) {
    return (CER*)this->getObjectSafe(index, MFN_M02_CER_13);
  }
  NTE* getNTE_14(size_t index = 0) {
    return (NTE*)this->getObjectSafe(index, MFN_M02_NTE_14);
  }

  /* Checker list */
  bool isMSH_1(size_t index = 0) {
    try {
      return this->getObject(index, MFN_M02_MSH_1) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isSFT_2(size_t index = 0) {
    try {
      return this->getObject(index, MFN_M02_SFT_2) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isUAC_3(size_t index = 0) {
    try {
      return this->getObject(index, MFN_M02_UAC_3) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isMFI_4(size_t index = 0) {
    try {
      return this->getObject(index, MFN_M02_MFI_4) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isMFE_6(size_t index = 0) {
    try {
      return this->getObject(index, MFN_M02_MFE_6) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isSTF_7(size_t index = 0) {
    try {
      return this->getObject(index, MFN_M02_STF_7) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isPRA_8(size_t index = 0) {
    try {
      return this->getObject(index, MFN_M02_PRA_8) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isORG_9(size_t index = 0) {
    try {
      return this->getObject(index, MFN_M02_ORG_9) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isAFF_10(size_t index = 0) {
    try {
      return this->getObject(index, MFN_M02_AFF_10) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isLAN_11(size_t index = 0) {
    try {
      return this->getObject(index, MFN_M02_LAN_11) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isEDU_12(size_t index = 0) {
    try {
      return this->getObject(index, MFN_M02_EDU_12) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isCER_13(size_t index = 0) {
    try {
      return this->getObject(index, MFN_M02_CER_13) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isNTE_14(size_t index = 0) {
    try {
      return this->getObject(index, MFN_M02_NTE_14) != NULL;
    } catch (...) {
    }
    return false;
  }
}; /* MFN_M02_ */
} /* namespace HL7_281 */
#endif /*  __MFN_M02__281_H__ */
