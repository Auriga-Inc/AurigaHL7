/*
 * hacca - C Toolkit for the HL7 Protocol
 *
 * Warning: This file was automatically generated by [hawk], please do not edit.
 *          Thu 25 Jun 19:02:44 CEST 2020
 *
 * R. Carbone (rocco@tecsiel.it)
 * Jun 2020
 *
 * SPDX-License-Identifier: BSD-2-Clause-FreeBSD
 *
 * This file was developed as part of the ongoing activities related
 * to the design, implementation and execution of interoperability tests
 * between hacca-based versus AurigaHL7-based applications.
 *
 * In more details I decided to extend AurigaHL7 C++ Library with header files
 * implementing HL7 structures of the version 2.8.1 of the protocol (April 2014)
 * because the version 2.4 distributed with AurigaHL7 is a bit outdated (October 2000).
 *
 * All files in this fork was automatically generated by hacca-based tool [hawk]
 * and strictly follow the syntax and convention originally defined
 * by Auriga HL7 C++ Library just as form of continuity, convenience
 * and respect for their superb work.
 */


#ifndef __DFT_P03__281_H__
#define __DFT_P03__281_H__

#include "../../common/Util.h"
#include "../segment/ACC.h"
#include "../segment/DB1.h"
#include "../segment/DG1.h"
#include "../segment/DRG.h"
#include "../segment/EVN.h"
#include "../segment/FT1.h"
#include "../segment/GT1.h"
#include "../segment/IN1.h"
#include "../segment/IN2.h"
#include "../segment/IN3.h"
#include "../segment/MSH.h"
#include "../segment/NTE.h"
#include "../segment/OBR.h"
#include "../segment/OBX.h"
#include "../segment/ORC.h"
#include "../segment/PD1.h"
#include "../segment/PID.h"
#include "../segment/PR1.h"
#include "../segment/PRT.h"
#include "../segment/PV1.h"
#include "../segment/PV2.h"
#include "../segment/ROL.h"
#include "../segment/SFT.h"
#include "../segment/TQ1.h"
#include "../segment/TQ2.h"
#include "../segment/UAC.h"

namespace HL7_281 {

/* Internal structures/groups */
struct DFT_P03_COMMON_ORDER; /* COMMON_ORDER */
struct DFT_P03_FINANCIAL; /* FINANCIAL */
struct DFT_P03_INSURANCE; /* INSURANCE */
struct DFT_P03_TIMING_QUANTITY; /* TIMING_QUANTITY */
struct DFT_P03_ORDER; /* ORDER */
struct DFT_P03_OBSERVATION; /* OBSERVATION */
struct DFT_P03_FINANCIAL_PROCEDURE; /* FINANCIAL_PROCEDURE */
struct DFT_P03_FINANCIAL_COMMON_ORDER; /* FINANCIAL_COMMON_ORDER */
struct DFT_P03_FINANCIAL_TIMING_QUANTITY; /* FINANCIAL_TIMING_QUANTITY */
struct DFT_P03_FINANCIAL_ORDER; /* FINANCIAL_ORDER */
struct DFT_P03_FINANCIAL_OBSERVATION; /* FINANCIAL_OBSERVATION */

/* COMMON_ORDER */
struct DFT_P03_COMMON_ORDER : public HL7Group {
  DFT_P03_COMMON_ORDER() { this->init(); }
  /* Fields ID  */
  enum FIELD_ID {
    DFT_P03_DFT_P03_OBSERVATION_1,
    DFT_P03_DFT_P03_ORDER_2,
    DFT_P03_DFT_P03_TIMING_QUANTITY_3,
    DFT_P03_ORC_4,
    FIELD_ID_MAX
  };

  const char* className() const { return "DFT_P03_COMMON_ORDER"; }
  DFT_P03_COMMON_ORDER* create() const { return new DFT_P03_COMMON_ORDER(); }

 private:
  /* Initialize object */
  void init() {
    setName("DFT_P03.COMMON_ORDER");
    addObject<DFT_P03_OBSERVATION>(DFT_P03_DFT_P03_OBSERVATION_1, "DFT_P03_OBSERVATION.1", HL7::optional, HL7::repetition_on);
    addObject<DFT_P03_ORDER>(DFT_P03_DFT_P03_ORDER_2, "DFT_P03_ORDER.2", HL7::optional, HL7::repetition_on);
    addObject<DFT_P03_TIMING_QUANTITY>(DFT_P03_DFT_P03_TIMING_QUANTITY_3, "DFT_P03_TIMING_QUANTITY.3", HL7::optional, HL7::repetition_on);
    addObject<ORC>(DFT_P03_ORC_4, "ORC.4", HL7::optional, HL7::repetition_on);
  }

 public:
  /* Getters list */
  DFT_P03_OBSERVATION* getDFT_P03_OBSERVATION_1(size_t index = 0) {
    return (DFT_P03_OBSERVATION*)this->getObjectSafe(index, DFT_P03_DFT_P03_OBSERVATION_1);
  }
  DFT_P03_ORDER* getDFT_P03_ORDER_2(size_t index = 0) {
    return (DFT_P03_ORDER*)this->getObjectSafe(index, DFT_P03_DFT_P03_ORDER_2);
  }
  DFT_P03_TIMING_QUANTITY* getDFT_P03_TIMING_QUANTITY_3(size_t index = 0) {
    return (DFT_P03_TIMING_QUANTITY*)this->getObjectSafe(index, DFT_P03_DFT_P03_TIMING_QUANTITY_3);
  }
  ORC* getORC_4(size_t index = 0) {
    return (ORC*)this->getObjectSafe(index, DFT_P03_ORC_4);
  }

  /* Checker list */
  bool isDFT_P03_OBSERVATION_1(size_t index = 0) {
    try {
      return this->getObject(index, DFT_P03_DFT_P03_OBSERVATION_1) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isDFT_P03_ORDER_2(size_t index = 0) {
    try {
      return this->getObject(index, DFT_P03_DFT_P03_ORDER_2) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isDFT_P03_TIMING_QUANTITY_3(size_t index = 0) {
    try {
      return this->getObject(index, DFT_P03_DFT_P03_TIMING_QUANTITY_3) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isORC_4(size_t index = 0) {
    try {
      return this->getObject(index, DFT_P03_ORC_4) != NULL;
    } catch (...) {
    }
    return false;
  }
}; /* DFT_P03_COMMON_ORDER */

/* FINANCIAL */
struct DFT_P03_FINANCIAL : public HL7Group {
  DFT_P03_FINANCIAL() { this->init(); }
  /* Fields ID  */
  enum FIELD_ID {
    DFT_P03_DFT_P03_FINANCIAL_COMMON_ORDER_1,
    DFT_P03_DFT_P03_FINANCIAL_PROCEDURE_2,
    DFT_P03_FT1_3,
    DFT_P03_NTE_4,
    DFT_P03_PRT_5,
    DFT_P03_ROL_6,
    FIELD_ID_MAX
  };

  const char* className() const { return "DFT_P03_FINANCIAL"; }
  DFT_P03_FINANCIAL* create() const { return new DFT_P03_FINANCIAL(); }

 private:
  /* Initialize object */
  void init() {
    setName("DFT_P03.FINANCIAL");
    addObject<DFT_P03_FINANCIAL_COMMON_ORDER>(DFT_P03_DFT_P03_FINANCIAL_COMMON_ORDER_1, "DFT_P03_FINANCIAL_COMMON_ORDER.1", HL7::optional, HL7::repetition_on);
    addObject<DFT_P03_FINANCIAL_PROCEDURE>(DFT_P03_DFT_P03_FINANCIAL_PROCEDURE_2, "DFT_P03_FINANCIAL_PROCEDURE.2", HL7::optional, HL7::repetition_on);
    addObject<FT1>(DFT_P03_FT1_3, "FT1.3", HL7::optional, HL7::repetition_on);
    addObject<NTE>(DFT_P03_NTE_4, "NTE.4", HL7::optional, HL7::repetition_on);
    addObject<PRT>(DFT_P03_PRT_5, "PRT.5", HL7::optional, HL7::repetition_on);
    addObject<ROL>(DFT_P03_ROL_6, "ROL.6", HL7::optional, HL7::repetition_on);
  }

 public:
  /* Getters list */
  DFT_P03_FINANCIAL_COMMON_ORDER* getDFT_P03_FINANCIAL_COMMON_ORDER_1(size_t index = 0) {
    return (DFT_P03_FINANCIAL_COMMON_ORDER*)this->getObjectSafe(index, DFT_P03_DFT_P03_FINANCIAL_COMMON_ORDER_1);
  }
  DFT_P03_FINANCIAL_PROCEDURE* getDFT_P03_FINANCIAL_PROCEDURE_2(size_t index = 0) {
    return (DFT_P03_FINANCIAL_PROCEDURE*)this->getObjectSafe(index, DFT_P03_DFT_P03_FINANCIAL_PROCEDURE_2);
  }
  FT1* getFT1_3(size_t index = 0) {
    return (FT1*)this->getObjectSafe(index, DFT_P03_FT1_3);
  }
  NTE* getNTE_4(size_t index = 0) {
    return (NTE*)this->getObjectSafe(index, DFT_P03_NTE_4);
  }
  PRT* getPRT_5(size_t index = 0) {
    return (PRT*)this->getObjectSafe(index, DFT_P03_PRT_5);
  }
  ROL* getROL_6(size_t index = 0) {
    return (ROL*)this->getObjectSafe(index, DFT_P03_ROL_6);
  }

  /* Checker list */
  bool isDFT_P03_FINANCIAL_COMMON_ORDER_1(size_t index = 0) {
    try {
      return this->getObject(index, DFT_P03_DFT_P03_FINANCIAL_COMMON_ORDER_1) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isDFT_P03_FINANCIAL_PROCEDURE_2(size_t index = 0) {
    try {
      return this->getObject(index, DFT_P03_DFT_P03_FINANCIAL_PROCEDURE_2) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isFT1_3(size_t index = 0) {
    try {
      return this->getObject(index, DFT_P03_FT1_3) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isNTE_4(size_t index = 0) {
    try {
      return this->getObject(index, DFT_P03_NTE_4) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isPRT_5(size_t index = 0) {
    try {
      return this->getObject(index, DFT_P03_PRT_5) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isROL_6(size_t index = 0) {
    try {
      return this->getObject(index, DFT_P03_ROL_6) != NULL;
    } catch (...) {
    }
    return false;
  }
}; /* DFT_P03_FINANCIAL */

/* INSURANCE */
struct DFT_P03_INSURANCE : public HL7Group {
  DFT_P03_INSURANCE() { this->init(); }
  /* Fields ID  */
  enum FIELD_ID {
    DFT_P03_IN1_1,
    DFT_P03_IN2_2,
    DFT_P03_IN3_3,
    DFT_P03_PRT_4,
    DFT_P03_ROL_5,
    FIELD_ID_MAX
  };

  const char* className() const { return "DFT_P03_INSURANCE"; }
  DFT_P03_INSURANCE* create() const { return new DFT_P03_INSURANCE(); }

 private:
  /* Initialize object */
  void init() {
    setName("DFT_P03.INSURANCE");
    addObject<IN1>(DFT_P03_IN1_1, "IN1.1", HL7::optional, HL7::repetition_on);
    addObject<IN2>(DFT_P03_IN2_2, "IN2.2", HL7::optional, HL7::repetition_on);
    addObject<IN3>(DFT_P03_IN3_3, "IN3.3", HL7::optional, HL7::repetition_on);
    addObject<PRT>(DFT_P03_PRT_4, "PRT.4", HL7::optional, HL7::repetition_on);
    addObject<ROL>(DFT_P03_ROL_5, "ROL.5", HL7::optional, HL7::repetition_on);
  }

 public:
  /* Getters list */
  IN1* getIN1_1(size_t index = 0) {
    return (IN1*)this->getObjectSafe(index, DFT_P03_IN1_1);
  }
  IN2* getIN2_2(size_t index = 0) {
    return (IN2*)this->getObjectSafe(index, DFT_P03_IN2_2);
  }
  IN3* getIN3_3(size_t index = 0) {
    return (IN3*)this->getObjectSafe(index, DFT_P03_IN3_3);
  }
  PRT* getPRT_4(size_t index = 0) {
    return (PRT*)this->getObjectSafe(index, DFT_P03_PRT_4);
  }
  ROL* getROL_5(size_t index = 0) {
    return (ROL*)this->getObjectSafe(index, DFT_P03_ROL_5);
  }

  /* Checker list */
  bool isIN1_1(size_t index = 0) {
    try {
      return this->getObject(index, DFT_P03_IN1_1) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isIN2_2(size_t index = 0) {
    try {
      return this->getObject(index, DFT_P03_IN2_2) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isIN3_3(size_t index = 0) {
    try {
      return this->getObject(index, DFT_P03_IN3_3) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isPRT_4(size_t index = 0) {
    try {
      return this->getObject(index, DFT_P03_PRT_4) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isROL_5(size_t index = 0) {
    try {
      return this->getObject(index, DFT_P03_ROL_5) != NULL;
    } catch (...) {
    }
    return false;
  }
}; /* DFT_P03_INSURANCE */

/* TIMING_QUANTITY */
struct DFT_P03_TIMING_QUANTITY : public HL7Group {
  DFT_P03_TIMING_QUANTITY() { this->init(); }
  /* Fields ID  */
  enum FIELD_ID {
    DFT_P03_TQ1_1,
    DFT_P03_TQ2_2,
    FIELD_ID_MAX
  };

  const char* className() const { return "DFT_P03_TIMING_QUANTITY"; }
  DFT_P03_TIMING_QUANTITY* create() const { return new DFT_P03_TIMING_QUANTITY(); }

 private:
  /* Initialize object */
  void init() {
    setName("DFT_P03.TIMING_QUANTITY");
    addObject<TQ1>(DFT_P03_TQ1_1, "TQ1.1", HL7::optional, HL7::repetition_on);
    addObject<TQ2>(DFT_P03_TQ2_2, "TQ2.2", HL7::optional, HL7::repetition_on);
  }

 public:
  /* Getters list */
  TQ1* getTQ1_1(size_t index = 0) {
    return (TQ1*)this->getObjectSafe(index, DFT_P03_TQ1_1);
  }
  TQ2* getTQ2_2(size_t index = 0) {
    return (TQ2*)this->getObjectSafe(index, DFT_P03_TQ2_2);
  }

  /* Checker list */
  bool isTQ1_1(size_t index = 0) {
    try {
      return this->getObject(index, DFT_P03_TQ1_1) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isTQ2_2(size_t index = 0) {
    try {
      return this->getObject(index, DFT_P03_TQ2_2) != NULL;
    } catch (...) {
    }
    return false;
  }
}; /* DFT_P03_TIMING_QUANTITY */

/* ORDER */
struct DFT_P03_ORDER : public HL7Group {
  DFT_P03_ORDER() { this->init(); }
  /* Fields ID  */
  enum FIELD_ID {
    DFT_P03_NTE_1,
    DFT_P03_OBR_2,
    FIELD_ID_MAX
  };

  const char* className() const { return "DFT_P03_ORDER"; }
  DFT_P03_ORDER* create() const { return new DFT_P03_ORDER(); }

 private:
  /* Initialize object */
  void init() {
    setName("DFT_P03.ORDER");
    addObject<NTE>(DFT_P03_NTE_1, "NTE.1", HL7::optional, HL7::repetition_on);
    addObject<OBR>(DFT_P03_OBR_2, "OBR.2", HL7::optional, HL7::repetition_on);
  }

 public:
  /* Getters list */
  NTE* getNTE_1(size_t index = 0) {
    return (NTE*)this->getObjectSafe(index, DFT_P03_NTE_1);
  }
  OBR* getOBR_2(size_t index = 0) {
    return (OBR*)this->getObjectSafe(index, DFT_P03_OBR_2);
  }

  /* Checker list */
  bool isNTE_1(size_t index = 0) {
    try {
      return this->getObject(index, DFT_P03_NTE_1) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isOBR_2(size_t index = 0) {
    try {
      return this->getObject(index, DFT_P03_OBR_2) != NULL;
    } catch (...) {
    }
    return false;
  }
}; /* DFT_P03_ORDER */

/* OBSERVATION */
struct DFT_P03_OBSERVATION : public HL7Group {
  DFT_P03_OBSERVATION() { this->init(); }
  /* Fields ID  */
  enum FIELD_ID {
    DFT_P03_NTE_1,
    DFT_P03_OBX_2,
    FIELD_ID_MAX
  };

  const char* className() const { return "DFT_P03_OBSERVATION"; }
  DFT_P03_OBSERVATION* create() const { return new DFT_P03_OBSERVATION(); }

 private:
  /* Initialize object */
  void init() {
    setName("DFT_P03.OBSERVATION");
    addObject<NTE>(DFT_P03_NTE_1, "NTE.1", HL7::optional, HL7::repetition_on);
    addObject<OBX>(DFT_P03_OBX_2, "OBX.2", HL7::optional, HL7::repetition_on);
  }

 public:
  /* Getters list */
  NTE* getNTE_1(size_t index = 0) {
    return (NTE*)this->getObjectSafe(index, DFT_P03_NTE_1);
  }
  OBX* getOBX_2(size_t index = 0) {
    return (OBX*)this->getObjectSafe(index, DFT_P03_OBX_2);
  }

  /* Checker list */
  bool isNTE_1(size_t index = 0) {
    try {
      return this->getObject(index, DFT_P03_NTE_1) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isOBX_2(size_t index = 0) {
    try {
      return this->getObject(index, DFT_P03_OBX_2) != NULL;
    } catch (...) {
    }
    return false;
  }
}; /* DFT_P03_OBSERVATION */

/* FINANCIAL_PROCEDURE */
struct DFT_P03_FINANCIAL_PROCEDURE : public HL7Group {
  DFT_P03_FINANCIAL_PROCEDURE() { this->init(); }
  /* Fields ID  */
  enum FIELD_ID {
    DFT_P03_PR1_1,
    DFT_P03_PRT_2,
    DFT_P03_ROL_3,
    FIELD_ID_MAX
  };

  const char* className() const { return "DFT_P03_FINANCIAL_PROCEDURE"; }
  DFT_P03_FINANCIAL_PROCEDURE* create() const { return new DFT_P03_FINANCIAL_PROCEDURE(); }

 private:
  /* Initialize object */
  void init() {
    setName("DFT_P03.FINANCIAL_PROCEDURE");
    addObject<PR1>(DFT_P03_PR1_1, "PR1.1", HL7::optional, HL7::repetition_on);
    addObject<PRT>(DFT_P03_PRT_2, "PRT.2", HL7::optional, HL7::repetition_on);
    addObject<ROL>(DFT_P03_ROL_3, "ROL.3", HL7::optional, HL7::repetition_on);
  }

 public:
  /* Getters list */
  PR1* getPR1_1(size_t index = 0) {
    return (PR1*)this->getObjectSafe(index, DFT_P03_PR1_1);
  }
  PRT* getPRT_2(size_t index = 0) {
    return (PRT*)this->getObjectSafe(index, DFT_P03_PRT_2);
  }
  ROL* getROL_3(size_t index = 0) {
    return (ROL*)this->getObjectSafe(index, DFT_P03_ROL_3);
  }

  /* Checker list */
  bool isPR1_1(size_t index = 0) {
    try {
      return this->getObject(index, DFT_P03_PR1_1) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isPRT_2(size_t index = 0) {
    try {
      return this->getObject(index, DFT_P03_PRT_2) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isROL_3(size_t index = 0) {
    try {
      return this->getObject(index, DFT_P03_ROL_3) != NULL;
    } catch (...) {
    }
    return false;
  }
}; /* DFT_P03_FINANCIAL_PROCEDURE */

/* FINANCIAL_COMMON_ORDER */
struct DFT_P03_FINANCIAL_COMMON_ORDER : public HL7Group {
  DFT_P03_FINANCIAL_COMMON_ORDER() { this->init(); }
  /* Fields ID  */
  enum FIELD_ID {
    DFT_P03_DFT_P03_FINANCIAL_OBSERVATION_1,
    DFT_P03_DFT_P03_FINANCIAL_ORDER_2,
    DFT_P03_DFT_P03_FINANCIAL_TIMING_QUANTITY_3,
    DFT_P03_ORC_4,
    FIELD_ID_MAX
  };

  const char* className() const { return "DFT_P03_FINANCIAL_COMMON_ORDER"; }
  DFT_P03_FINANCIAL_COMMON_ORDER* create() const { return new DFT_P03_FINANCIAL_COMMON_ORDER(); }

 private:
  /* Initialize object */
  void init() {
    setName("DFT_P03.FINANCIAL_COMMON_ORDER");
    addObject<DFT_P03_FINANCIAL_OBSERVATION>(DFT_P03_DFT_P03_FINANCIAL_OBSERVATION_1, "DFT_P03_FINANCIAL_OBSERVATION.1", HL7::optional, HL7::repetition_on);
    addObject<DFT_P03_FINANCIAL_ORDER>(DFT_P03_DFT_P03_FINANCIAL_ORDER_2, "DFT_P03_FINANCIAL_ORDER.2", HL7::optional, HL7::repetition_on);
    addObject<DFT_P03_FINANCIAL_TIMING_QUANTITY>(DFT_P03_DFT_P03_FINANCIAL_TIMING_QUANTITY_3, "DFT_P03_FINANCIAL_TIMING_QUANTITY.3", HL7::optional, HL7::repetition_on);
    addObject<ORC>(DFT_P03_ORC_4, "ORC.4", HL7::optional, HL7::repetition_on);
  }

 public:
  /* Getters list */
  DFT_P03_FINANCIAL_OBSERVATION* getDFT_P03_FINANCIAL_OBSERVATION_1(size_t index = 0) {
    return (DFT_P03_FINANCIAL_OBSERVATION*)this->getObjectSafe(index, DFT_P03_DFT_P03_FINANCIAL_OBSERVATION_1);
  }
  DFT_P03_FINANCIAL_ORDER* getDFT_P03_FINANCIAL_ORDER_2(size_t index = 0) {
    return (DFT_P03_FINANCIAL_ORDER*)this->getObjectSafe(index, DFT_P03_DFT_P03_FINANCIAL_ORDER_2);
  }
  DFT_P03_FINANCIAL_TIMING_QUANTITY* getDFT_P03_FINANCIAL_TIMING_QUANTITY_3(size_t index = 0) {
    return (DFT_P03_FINANCIAL_TIMING_QUANTITY*)this->getObjectSafe(index, DFT_P03_DFT_P03_FINANCIAL_TIMING_QUANTITY_3);
  }
  ORC* getORC_4(size_t index = 0) {
    return (ORC*)this->getObjectSafe(index, DFT_P03_ORC_4);
  }

  /* Checker list */
  bool isDFT_P03_FINANCIAL_OBSERVATION_1(size_t index = 0) {
    try {
      return this->getObject(index, DFT_P03_DFT_P03_FINANCIAL_OBSERVATION_1) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isDFT_P03_FINANCIAL_ORDER_2(size_t index = 0) {
    try {
      return this->getObject(index, DFT_P03_DFT_P03_FINANCIAL_ORDER_2) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isDFT_P03_FINANCIAL_TIMING_QUANTITY_3(size_t index = 0) {
    try {
      return this->getObject(index, DFT_P03_DFT_P03_FINANCIAL_TIMING_QUANTITY_3) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isORC_4(size_t index = 0) {
    try {
      return this->getObject(index, DFT_P03_ORC_4) != NULL;
    } catch (...) {
    }
    return false;
  }
}; /* DFT_P03_FINANCIAL_COMMON_ORDER */

/* FINANCIAL_TIMING_QUANTITY */
struct DFT_P03_FINANCIAL_TIMING_QUANTITY : public HL7Group {
  DFT_P03_FINANCIAL_TIMING_QUANTITY() { this->init(); }
  /* Fields ID  */
  enum FIELD_ID {
    DFT_P03_TQ1_1,
    DFT_P03_TQ2_2,
    FIELD_ID_MAX
  };

  const char* className() const { return "DFT_P03_FINANCIAL_TIMING_QUANTITY"; }
  DFT_P03_FINANCIAL_TIMING_QUANTITY* create() const { return new DFT_P03_FINANCIAL_TIMING_QUANTITY(); }

 private:
  /* Initialize object */
  void init() {
    setName("DFT_P03.FINANCIAL_TIMING_QUANTITY");
    addObject<TQ1>(DFT_P03_TQ1_1, "TQ1.1", HL7::optional, HL7::repetition_on);
    addObject<TQ2>(DFT_P03_TQ2_2, "TQ2.2", HL7::optional, HL7::repetition_on);
  }

 public:
  /* Getters list */
  TQ1* getTQ1_1(size_t index = 0) {
    return (TQ1*)this->getObjectSafe(index, DFT_P03_TQ1_1);
  }
  TQ2* getTQ2_2(size_t index = 0) {
    return (TQ2*)this->getObjectSafe(index, DFT_P03_TQ2_2);
  }

  /* Checker list */
  bool isTQ1_1(size_t index = 0) {
    try {
      return this->getObject(index, DFT_P03_TQ1_1) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isTQ2_2(size_t index = 0) {
    try {
      return this->getObject(index, DFT_P03_TQ2_2) != NULL;
    } catch (...) {
    }
    return false;
  }
}; /* DFT_P03_FINANCIAL_TIMING_QUANTITY */

/* FINANCIAL_ORDER */
struct DFT_P03_FINANCIAL_ORDER : public HL7Group {
  DFT_P03_FINANCIAL_ORDER() { this->init(); }
  /* Fields ID  */
  enum FIELD_ID {
    DFT_P03_NTE_1,
    DFT_P03_OBR_2,
    FIELD_ID_MAX
  };

  const char* className() const { return "DFT_P03_FINANCIAL_ORDER"; }
  DFT_P03_FINANCIAL_ORDER* create() const { return new DFT_P03_FINANCIAL_ORDER(); }

 private:
  /* Initialize object */
  void init() {
    setName("DFT_P03.FINANCIAL_ORDER");
    addObject<NTE>(DFT_P03_NTE_1, "NTE.1", HL7::optional, HL7::repetition_on);
    addObject<OBR>(DFT_P03_OBR_2, "OBR.2", HL7::optional, HL7::repetition_on);
  }

 public:
  /* Getters list */
  NTE* getNTE_1(size_t index = 0) {
    return (NTE*)this->getObjectSafe(index, DFT_P03_NTE_1);
  }
  OBR* getOBR_2(size_t index = 0) {
    return (OBR*)this->getObjectSafe(index, DFT_P03_OBR_2);
  }

  /* Checker list */
  bool isNTE_1(size_t index = 0) {
    try {
      return this->getObject(index, DFT_P03_NTE_1) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isOBR_2(size_t index = 0) {
    try {
      return this->getObject(index, DFT_P03_OBR_2) != NULL;
    } catch (...) {
    }
    return false;
  }
}; /* DFT_P03_FINANCIAL_ORDER */

/* FINANCIAL_OBSERVATION */
struct DFT_P03_FINANCIAL_OBSERVATION : public HL7Group {
  DFT_P03_FINANCIAL_OBSERVATION() { this->init(); }
  /* Fields ID  */
  enum FIELD_ID {
    DFT_P03_NTE_1,
    DFT_P03_OBX_2,
    FIELD_ID_MAX
  };

  const char* className() const { return "DFT_P03_FINANCIAL_OBSERVATION"; }
  DFT_P03_FINANCIAL_OBSERVATION* create() const { return new DFT_P03_FINANCIAL_OBSERVATION(); }

 private:
  /* Initialize object */
  void init() {
    setName("DFT_P03.FINANCIAL_OBSERVATION");
    addObject<NTE>(DFT_P03_NTE_1, "NTE.1", HL7::optional, HL7::repetition_on);
    addObject<OBX>(DFT_P03_OBX_2, "OBX.2", HL7::optional, HL7::repetition_on);
  }

 public:
  /* Getters list */
  NTE* getNTE_1(size_t index = 0) {
    return (NTE*)this->getObjectSafe(index, DFT_P03_NTE_1);
  }
  OBX* getOBX_2(size_t index = 0) {
    return (OBX*)this->getObjectSafe(index, DFT_P03_OBX_2);
  }

  /* Checker list */
  bool isNTE_1(size_t index = 0) {
    try {
      return this->getObject(index, DFT_P03_NTE_1) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isOBX_2(size_t index = 0) {
    try {
      return this->getObject(index, DFT_P03_OBX_2) != NULL;
    } catch (...) {
    }
    return false;
  }
}; /* DFT_P03_FINANCIAL_OBSERVATION */

/* DFT_P03 */
struct DFT_P03 : public HL7Message {
  DFT_P03() { this->init(); }
  /* Fields ID  */
  enum FIELD_ID {
    DFT_P03_MSH_1,
    DFT_P03_SFT_2,
    DFT_P03_UAC_3,
    DFT_P03_EVN_4,
    DFT_P03_PID_5,
    DFT_P03_PD1_6,
    DFT_P03_PRT_7,
    DFT_P03_ROL_8,
    DFT_P03_PV1_9,
    DFT_P03_PV2_10,
    DFT_P03_PRT_11,
    DFT_P03_ROL_12,
    DFT_P03_DB1_13,
    DFT_P03_DG1_16,
    DFT_P03_DRG_17,
    DFT_P03_GT1_18,
    DFT_P03_ACC_20,
    DFT_P03_ORC_21,
    DFT_P03_TQ1_25,
    DFT_P03_TQ2_26,
    DFT_P03_TQ1_27,
    DFT_P03_TQ2_28,
    DFT_P03_OBR_29,
    DFT_P03_NTE_30,
    DFT_P03_TQ1_31,
    DFT_P03_TQ2_32,
    DFT_P03_OBR_33,
    DFT_P03_NTE_34,
    DFT_P03_OBX_35,
    DFT_P03_NTE_36,
    DFT_P03_FT1_37,
    DFT_P03_PRT_38,
    DFT_P03_ROL_39,
    DFT_P03_NTE_40,
    DFT_P03_PR1_43,
    DFT_P03_PRT_44,
    DFT_P03_ROL_45,
    DFT_P03_PR1_46,
    DFT_P03_PRT_47,
    DFT_P03_ROL_48,
    DFT_P03_ORC_49,
    DFT_P03_TQ1_53,
    DFT_P03_TQ2_54,
    DFT_P03_TQ1_55,
    DFT_P03_TQ2_56,
    DFT_P03_OBR_57,
    DFT_P03_NTE_58,
    DFT_P03_TQ1_59,
    DFT_P03_TQ2_60,
    DFT_P03_OBR_61,
    DFT_P03_NTE_62,
    DFT_P03_OBX_63,
    DFT_P03_NTE_64,
    DFT_P03_IN1_65,
    DFT_P03_IN2_66,
    DFT_P03_IN3_67,
    DFT_P03_PRT_68,
    DFT_P03_ROL_69,
    FIELD_ID_MAX
  };

  const char* className() const { return "DFT_P03"; }
  DFT_P03* create() const { return new DFT_P03(); }

 private:
  /* Initialize object */
  void init() {
    setName("DFT_P03");
    addObject<MSH>(DFT_P03_MSH_1, "MSH.1", HL7::initialized, HL7::repetition_off);
    addObject<SFT>(DFT_P03_SFT_2, "SFT.2", HL7::optional, HL7::repetition_on);
    addObject<UAC>(DFT_P03_UAC_3, "UAC.3", HL7::optional, HL7::repetition_off);
    addObject<EVN>(DFT_P03_EVN_4, "EVN.4", HL7::initialized, HL7::repetition_off);
    addObject<PID>(DFT_P03_PID_5, "PID.5", HL7::initialized, HL7::repetition_off);
    addObject<PD1>(DFT_P03_PD1_6, "PD1.6", HL7::optional, HL7::repetition_off);
    addObject<PRT>(DFT_P03_PRT_7, "PRT.7", HL7::optional, HL7::repetition_on);
    addObject<ROL>(DFT_P03_ROL_8, "ROL.8", HL7::optional, HL7::repetition_on);
    addObject<PV1>(DFT_P03_PV1_9, "PV1.9", HL7::optional, HL7::repetition_off);
    addObject<PV2>(DFT_P03_PV2_10, "PV2.10", HL7::optional, HL7::repetition_off);
    addObject<PRT>(DFT_P03_PRT_11, "PRT.11", HL7::optional, HL7::repetition_on);
    addObject<ROL>(DFT_P03_ROL_12, "ROL.12", HL7::optional, HL7::repetition_on);
    addObject<DB1>(DFT_P03_DB1_13, "DB1.13", HL7::optional, HL7::repetition_on);
    addObject<DG1>(DFT_P03_DG1_16, "DG1.16", HL7::optional, HL7::repetition_on);
    addObject<DRG>(DFT_P03_DRG_17, "DRG.17", HL7::optional, HL7::repetition_off);
    addObject<GT1>(DFT_P03_GT1_18, "GT1.18", HL7::optional, HL7::repetition_on);
    addObject<ACC>(DFT_P03_ACC_20, "ACC.20", HL7::optional, HL7::repetition_off);
    addObject<ORC>(DFT_P03_ORC_21, "ORC.21", HL7::optional, HL7::repetition_off);
    addObject<TQ1>(DFT_P03_TQ1_25, "TQ1.25", HL7::initialized, HL7::repetition_off);
    addObject<TQ2>(DFT_P03_TQ2_26, "TQ2.26", HL7::optional, HL7::repetition_off);
    addObject<TQ1>(DFT_P03_TQ1_27, "TQ1.27", HL7::initialized, HL7::repetition_off);
    addObject<TQ2>(DFT_P03_TQ2_28, "TQ2.28", HL7::optional, HL7::repetition_off);
    addObject<OBR>(DFT_P03_OBR_29, "OBR.29", HL7::initialized, HL7::repetition_off);
    addObject<NTE>(DFT_P03_NTE_30, "NTE.30", HL7::optional, HL7::repetition_off);
    addObject<TQ1>(DFT_P03_TQ1_31, "TQ1.31", HL7::initialized, HL7::repetition_off);
    addObject<TQ2>(DFT_P03_TQ2_32, "TQ2.32", HL7::optional, HL7::repetition_off);
    addObject<OBR>(DFT_P03_OBR_33, "OBR.33", HL7::initialized, HL7::repetition_off);
    addObject<NTE>(DFT_P03_NTE_34, "NTE.34", HL7::optional, HL7::repetition_off);
    addObject<OBX>(DFT_P03_OBX_35, "OBX.35", HL7::initialized, HL7::repetition_off);
    addObject<NTE>(DFT_P03_NTE_36, "NTE.36", HL7::optional, HL7::repetition_off);
    addObject<FT1>(DFT_P03_FT1_37, "FT1.37", HL7::initialized, HL7::repetition_off);
    addObject<PRT>(DFT_P03_PRT_38, "PRT.38", HL7::optional, HL7::repetition_off);
    addObject<ROL>(DFT_P03_ROL_39, "ROL.39", HL7::optional, HL7::repetition_off);
    addObject<NTE>(DFT_P03_NTE_40, "NTE.40", HL7::optional, HL7::repetition_off);
    addObject<PR1>(DFT_P03_PR1_43, "PR1.43", HL7::initialized, HL7::repetition_off);
    addObject<PRT>(DFT_P03_PRT_44, "PRT.44", HL7::optional, HL7::repetition_off);
    addObject<ROL>(DFT_P03_ROL_45, "ROL.45", HL7::optional, HL7::repetition_off);
    addObject<PR1>(DFT_P03_PR1_46, "PR1.46", HL7::initialized, HL7::repetition_off);
    addObject<PRT>(DFT_P03_PRT_47, "PRT.47", HL7::optional, HL7::repetition_off);
    addObject<ROL>(DFT_P03_ROL_48, "ROL.48", HL7::optional, HL7::repetition_off);
    addObject<ORC>(DFT_P03_ORC_49, "ORC.49", HL7::optional, HL7::repetition_off);
    addObject<TQ1>(DFT_P03_TQ1_53, "TQ1.53", HL7::initialized, HL7::repetition_off);
    addObject<TQ2>(DFT_P03_TQ2_54, "TQ2.54", HL7::optional, HL7::repetition_off);
    addObject<TQ1>(DFT_P03_TQ1_55, "TQ1.55", HL7::initialized, HL7::repetition_off);
    addObject<TQ2>(DFT_P03_TQ2_56, "TQ2.56", HL7::optional, HL7::repetition_off);
    addObject<OBR>(DFT_P03_OBR_57, "OBR.57", HL7::initialized, HL7::repetition_off);
    addObject<NTE>(DFT_P03_NTE_58, "NTE.58", HL7::optional, HL7::repetition_off);
    addObject<TQ1>(DFT_P03_TQ1_59, "TQ1.59", HL7::initialized, HL7::repetition_off);
    addObject<TQ2>(DFT_P03_TQ2_60, "TQ2.60", HL7::optional, HL7::repetition_off);
    addObject<OBR>(DFT_P03_OBR_61, "OBR.61", HL7::initialized, HL7::repetition_off);
    addObject<NTE>(DFT_P03_NTE_62, "NTE.62", HL7::optional, HL7::repetition_off);
    addObject<OBX>(DFT_P03_OBX_63, "OBX.63", HL7::initialized, HL7::repetition_off);
    addObject<NTE>(DFT_P03_NTE_64, "NTE.64", HL7::optional, HL7::repetition_off);
    addObject<IN1>(DFT_P03_IN1_65, "IN1.65", HL7::initialized, HL7::repetition_off);
    addObject<IN2>(DFT_P03_IN2_66, "IN2.66", HL7::optional, HL7::repetition_off);
    addObject<IN3>(DFT_P03_IN3_67, "IN3.67", HL7::optional, HL7::repetition_off);
    addObject<PRT>(DFT_P03_PRT_68, "PRT.68", HL7::optional, HL7::repetition_off);
    addObject<ROL>(DFT_P03_ROL_69, "ROL.69", HL7::optional, HL7::repetition_off);
  }

 public:
  /* Getters list */
  MSH* getMSH_1(size_t index = 0) {
    return (MSH*)this->getObjectSafe(index, DFT_P03_MSH_1);
  }
  SFT* getSFT_2(size_t index = 0) {
    return (SFT*)this->getObjectSafe(index, DFT_P03_SFT_2);
  }
  UAC* getUAC_3(size_t index = 0) {
    return (UAC*)this->getObjectSafe(index, DFT_P03_UAC_3);
  }
  EVN* getEVN_4(size_t index = 0) {
    return (EVN*)this->getObjectSafe(index, DFT_P03_EVN_4);
  }
  PID* getPID_5(size_t index = 0) {
    return (PID*)this->getObjectSafe(index, DFT_P03_PID_5);
  }
  PD1* getPD1_6(size_t index = 0) {
    return (PD1*)this->getObjectSafe(index, DFT_P03_PD1_6);
  }
  PRT* getPRT_7(size_t index = 0) {
    return (PRT*)this->getObjectSafe(index, DFT_P03_PRT_7);
  }
  ROL* getROL_8(size_t index = 0) {
    return (ROL*)this->getObjectSafe(index, DFT_P03_ROL_8);
  }
  PV1* getPV1_9(size_t index = 0) {
    return (PV1*)this->getObjectSafe(index, DFT_P03_PV1_9);
  }
  PV2* getPV2_10(size_t index = 0) {
    return (PV2*)this->getObjectSafe(index, DFT_P03_PV2_10);
  }
  PRT* getPRT_11(size_t index = 0) {
    return (PRT*)this->getObjectSafe(index, DFT_P03_PRT_11);
  }
  ROL* getROL_12(size_t index = 0) {
    return (ROL*)this->getObjectSafe(index, DFT_P03_ROL_12);
  }
  DB1* getDB1_13(size_t index = 0) {
    return (DB1*)this->getObjectSafe(index, DFT_P03_DB1_13);
  }
  DG1* getDG1_16(size_t index = 0) {
    return (DG1*)this->getObjectSafe(index, DFT_P03_DG1_16);
  }
  DRG* getDRG_17(size_t index = 0) {
    return (DRG*)this->getObjectSafe(index, DFT_P03_DRG_17);
  }
  GT1* getGT1_18(size_t index = 0) {
    return (GT1*)this->getObjectSafe(index, DFT_P03_GT1_18);
  }
  ACC* getACC_20(size_t index = 0) {
    return (ACC*)this->getObjectSafe(index, DFT_P03_ACC_20);
  }
  ORC* getORC_21(size_t index = 0) {
    return (ORC*)this->getObjectSafe(index, DFT_P03_ORC_21);
  }
  TQ1* getTQ1_25(size_t index = 0) {
    return (TQ1*)this->getObjectSafe(index, DFT_P03_TQ1_25);
  }
  TQ2* getTQ2_26(size_t index = 0) {
    return (TQ2*)this->getObjectSafe(index, DFT_P03_TQ2_26);
  }
  TQ1* getTQ1_27(size_t index = 0) {
    return (TQ1*)this->getObjectSafe(index, DFT_P03_TQ1_27);
  }
  TQ2* getTQ2_28(size_t index = 0) {
    return (TQ2*)this->getObjectSafe(index, DFT_P03_TQ2_28);
  }
  OBR* getOBR_29(size_t index = 0) {
    return (OBR*)this->getObjectSafe(index, DFT_P03_OBR_29);
  }
  NTE* getNTE_30(size_t index = 0) {
    return (NTE*)this->getObjectSafe(index, DFT_P03_NTE_30);
  }
  TQ1* getTQ1_31(size_t index = 0) {
    return (TQ1*)this->getObjectSafe(index, DFT_P03_TQ1_31);
  }
  TQ2* getTQ2_32(size_t index = 0) {
    return (TQ2*)this->getObjectSafe(index, DFT_P03_TQ2_32);
  }
  OBR* getOBR_33(size_t index = 0) {
    return (OBR*)this->getObjectSafe(index, DFT_P03_OBR_33);
  }
  NTE* getNTE_34(size_t index = 0) {
    return (NTE*)this->getObjectSafe(index, DFT_P03_NTE_34);
  }
  OBX* getOBX_35(size_t index = 0) {
    return (OBX*)this->getObjectSafe(index, DFT_P03_OBX_35);
  }
  NTE* getNTE_36(size_t index = 0) {
    return (NTE*)this->getObjectSafe(index, DFT_P03_NTE_36);
  }
  FT1* getFT1_37(size_t index = 0) {
    return (FT1*)this->getObjectSafe(index, DFT_P03_FT1_37);
  }
  PRT* getPRT_38(size_t index = 0) {
    return (PRT*)this->getObjectSafe(index, DFT_P03_PRT_38);
  }
  ROL* getROL_39(size_t index = 0) {
    return (ROL*)this->getObjectSafe(index, DFT_P03_ROL_39);
  }
  NTE* getNTE_40(size_t index = 0) {
    return (NTE*)this->getObjectSafe(index, DFT_P03_NTE_40);
  }
  PR1* getPR1_43(size_t index = 0) {
    return (PR1*)this->getObjectSafe(index, DFT_P03_PR1_43);
  }
  PRT* getPRT_44(size_t index = 0) {
    return (PRT*)this->getObjectSafe(index, DFT_P03_PRT_44);
  }
  ROL* getROL_45(size_t index = 0) {
    return (ROL*)this->getObjectSafe(index, DFT_P03_ROL_45);
  }
  PR1* getPR1_46(size_t index = 0) {
    return (PR1*)this->getObjectSafe(index, DFT_P03_PR1_46);
  }
  PRT* getPRT_47(size_t index = 0) {
    return (PRT*)this->getObjectSafe(index, DFT_P03_PRT_47);
  }
  ROL* getROL_48(size_t index = 0) {
    return (ROL*)this->getObjectSafe(index, DFT_P03_ROL_48);
  }
  ORC* getORC_49(size_t index = 0) {
    return (ORC*)this->getObjectSafe(index, DFT_P03_ORC_49);
  }
  TQ1* getTQ1_53(size_t index = 0) {
    return (TQ1*)this->getObjectSafe(index, DFT_P03_TQ1_53);
  }
  TQ2* getTQ2_54(size_t index = 0) {
    return (TQ2*)this->getObjectSafe(index, DFT_P03_TQ2_54);
  }
  TQ1* getTQ1_55(size_t index = 0) {
    return (TQ1*)this->getObjectSafe(index, DFT_P03_TQ1_55);
  }
  TQ2* getTQ2_56(size_t index = 0) {
    return (TQ2*)this->getObjectSafe(index, DFT_P03_TQ2_56);
  }
  OBR* getOBR_57(size_t index = 0) {
    return (OBR*)this->getObjectSafe(index, DFT_P03_OBR_57);
  }
  NTE* getNTE_58(size_t index = 0) {
    return (NTE*)this->getObjectSafe(index, DFT_P03_NTE_58);
  }
  TQ1* getTQ1_59(size_t index = 0) {
    return (TQ1*)this->getObjectSafe(index, DFT_P03_TQ1_59);
  }
  TQ2* getTQ2_60(size_t index = 0) {
    return (TQ2*)this->getObjectSafe(index, DFT_P03_TQ2_60);
  }
  OBR* getOBR_61(size_t index = 0) {
    return (OBR*)this->getObjectSafe(index, DFT_P03_OBR_61);
  }
  NTE* getNTE_62(size_t index = 0) {
    return (NTE*)this->getObjectSafe(index, DFT_P03_NTE_62);
  }
  OBX* getOBX_63(size_t index = 0) {
    return (OBX*)this->getObjectSafe(index, DFT_P03_OBX_63);
  }
  NTE* getNTE_64(size_t index = 0) {
    return (NTE*)this->getObjectSafe(index, DFT_P03_NTE_64);
  }
  IN1* getIN1_65(size_t index = 0) {
    return (IN1*)this->getObjectSafe(index, DFT_P03_IN1_65);
  }
  IN2* getIN2_66(size_t index = 0) {
    return (IN2*)this->getObjectSafe(index, DFT_P03_IN2_66);
  }
  IN3* getIN3_67(size_t index = 0) {
    return (IN3*)this->getObjectSafe(index, DFT_P03_IN3_67);
  }
  PRT* getPRT_68(size_t index = 0) {
    return (PRT*)this->getObjectSafe(index, DFT_P03_PRT_68);
  }
  ROL* getROL_69(size_t index = 0) {
    return (ROL*)this->getObjectSafe(index, DFT_P03_ROL_69);
  }

  /* Checker list */
  bool isMSH_1(size_t index = 0) {
    try {
      return this->getObject(index, DFT_P03_MSH_1) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isSFT_2(size_t index = 0) {
    try {
      return this->getObject(index, DFT_P03_SFT_2) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isUAC_3(size_t index = 0) {
    try {
      return this->getObject(index, DFT_P03_UAC_3) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isEVN_4(size_t index = 0) {
    try {
      return this->getObject(index, DFT_P03_EVN_4) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isPID_5(size_t index = 0) {
    try {
      return this->getObject(index, DFT_P03_PID_5) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isPD1_6(size_t index = 0) {
    try {
      return this->getObject(index, DFT_P03_PD1_6) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isPRT_7(size_t index = 0) {
    try {
      return this->getObject(index, DFT_P03_PRT_7) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isROL_8(size_t index = 0) {
    try {
      return this->getObject(index, DFT_P03_ROL_8) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isPV1_9(size_t index = 0) {
    try {
      return this->getObject(index, DFT_P03_PV1_9) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isPV2_10(size_t index = 0) {
    try {
      return this->getObject(index, DFT_P03_PV2_10) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isPRT_11(size_t index = 0) {
    try {
      return this->getObject(index, DFT_P03_PRT_11) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isROL_12(size_t index = 0) {
    try {
      return this->getObject(index, DFT_P03_ROL_12) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isDB1_13(size_t index = 0) {
    try {
      return this->getObject(index, DFT_P03_DB1_13) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isDG1_16(size_t index = 0) {
    try {
      return this->getObject(index, DFT_P03_DG1_16) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isDRG_17(size_t index = 0) {
    try {
      return this->getObject(index, DFT_P03_DRG_17) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isGT1_18(size_t index = 0) {
    try {
      return this->getObject(index, DFT_P03_GT1_18) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isACC_20(size_t index = 0) {
    try {
      return this->getObject(index, DFT_P03_ACC_20) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isORC_21(size_t index = 0) {
    try {
      return this->getObject(index, DFT_P03_ORC_21) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isTQ1_25(size_t index = 0) {
    try {
      return this->getObject(index, DFT_P03_TQ1_25) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isTQ2_26(size_t index = 0) {
    try {
      return this->getObject(index, DFT_P03_TQ2_26) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isTQ1_27(size_t index = 0) {
    try {
      return this->getObject(index, DFT_P03_TQ1_27) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isTQ2_28(size_t index = 0) {
    try {
      return this->getObject(index, DFT_P03_TQ2_28) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isOBR_29(size_t index = 0) {
    try {
      return this->getObject(index, DFT_P03_OBR_29) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isNTE_30(size_t index = 0) {
    try {
      return this->getObject(index, DFT_P03_NTE_30) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isTQ1_31(size_t index = 0) {
    try {
      return this->getObject(index, DFT_P03_TQ1_31) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isTQ2_32(size_t index = 0) {
    try {
      return this->getObject(index, DFT_P03_TQ2_32) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isOBR_33(size_t index = 0) {
    try {
      return this->getObject(index, DFT_P03_OBR_33) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isNTE_34(size_t index = 0) {
    try {
      return this->getObject(index, DFT_P03_NTE_34) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isOBX_35(size_t index = 0) {
    try {
      return this->getObject(index, DFT_P03_OBX_35) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isNTE_36(size_t index = 0) {
    try {
      return this->getObject(index, DFT_P03_NTE_36) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isFT1_37(size_t index = 0) {
    try {
      return this->getObject(index, DFT_P03_FT1_37) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isPRT_38(size_t index = 0) {
    try {
      return this->getObject(index, DFT_P03_PRT_38) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isROL_39(size_t index = 0) {
    try {
      return this->getObject(index, DFT_P03_ROL_39) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isNTE_40(size_t index = 0) {
    try {
      return this->getObject(index, DFT_P03_NTE_40) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isPR1_43(size_t index = 0) {
    try {
      return this->getObject(index, DFT_P03_PR1_43) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isPRT_44(size_t index = 0) {
    try {
      return this->getObject(index, DFT_P03_PRT_44) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isROL_45(size_t index = 0) {
    try {
      return this->getObject(index, DFT_P03_ROL_45) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isPR1_46(size_t index = 0) {
    try {
      return this->getObject(index, DFT_P03_PR1_46) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isPRT_47(size_t index = 0) {
    try {
      return this->getObject(index, DFT_P03_PRT_47) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isROL_48(size_t index = 0) {
    try {
      return this->getObject(index, DFT_P03_ROL_48) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isORC_49(size_t index = 0) {
    try {
      return this->getObject(index, DFT_P03_ORC_49) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isTQ1_53(size_t index = 0) {
    try {
      return this->getObject(index, DFT_P03_TQ1_53) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isTQ2_54(size_t index = 0) {
    try {
      return this->getObject(index, DFT_P03_TQ2_54) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isTQ1_55(size_t index = 0) {
    try {
      return this->getObject(index, DFT_P03_TQ1_55) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isTQ2_56(size_t index = 0) {
    try {
      return this->getObject(index, DFT_P03_TQ2_56) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isOBR_57(size_t index = 0) {
    try {
      return this->getObject(index, DFT_P03_OBR_57) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isNTE_58(size_t index = 0) {
    try {
      return this->getObject(index, DFT_P03_NTE_58) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isTQ1_59(size_t index = 0) {
    try {
      return this->getObject(index, DFT_P03_TQ1_59) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isTQ2_60(size_t index = 0) {
    try {
      return this->getObject(index, DFT_P03_TQ2_60) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isOBR_61(size_t index = 0) {
    try {
      return this->getObject(index, DFT_P03_OBR_61) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isNTE_62(size_t index = 0) {
    try {
      return this->getObject(index, DFT_P03_NTE_62) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isOBX_63(size_t index = 0) {
    try {
      return this->getObject(index, DFT_P03_OBX_63) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isNTE_64(size_t index = 0) {
    try {
      return this->getObject(index, DFT_P03_NTE_64) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isIN1_65(size_t index = 0) {
    try {
      return this->getObject(index, DFT_P03_IN1_65) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isIN2_66(size_t index = 0) {
    try {
      return this->getObject(index, DFT_P03_IN2_66) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isIN3_67(size_t index = 0) {
    try {
      return this->getObject(index, DFT_P03_IN3_67) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isPRT_68(size_t index = 0) {
    try {
      return this->getObject(index, DFT_P03_PRT_68) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isROL_69(size_t index = 0) {
    try {
      return this->getObject(index, DFT_P03_ROL_69) != NULL;
    } catch (...) {
    }
    return false;
  }
}; /* DFT_P03_ */
} /* namespace HL7_281 */
#endif /*  __DFT_P03__281_H__ */
