/*
 * hacca - C Toolkit for the HL7 Protocol
 *
 * Warning: This file was automatically generated by [hawk], please do not edit.
 *          Thu 25 Jun 19:00:58 CEST 2020
 *
 * R. Carbone (rocco@tecsiel.it)
 * Jun 2020
 *
 * SPDX-License-Identifier: BSD-2-Clause-FreeBSD
 *
 * This file was developed as part of the ongoing activities related
 * to the design, implementation and execution of interoperability tests
 * between hacca-based versus AurigaHL7-based applications.
 *
 * In more details I decided to extend AurigaHL7 C++ Library with header files
 * implementing HL7 structures of the version 2.8.1 of the protocol (April 2014)
 * because the version 2.4 distributed with AurigaHL7 is a bit outdated (October 2000).
 *
 * All files in this fork was automatically generated by hacca-based tool [hawk]
 * and strictly follow the syntax and convention originally defined
 * by Auriga HL7 C++ Library just as form of continuity, convenience
 * and respect for their superb work.
 */


#ifndef __ADT_A60__281_H__
#define __ADT_A60__281_H__

#include "../../common/Util.h"
#include "../segment/ARV.h"
#include "../segment/EVN.h"
#include "../segment/IAM.h"
#include "../segment/IAR.h"
#include "../segment/MSH.h"
#include "../segment/NTE.h"
#include "../segment/PID.h"
#include "../segment/PV1.h"
#include "../segment/PV2.h"
#include "../segment/SFT.h"
#include "../segment/UAC.h"

namespace HL7_281 {

/* Internal structures/groups */
struct ADT_A60_ADVERSE_REACTION_GROUP; /* ADVERSE_REACTION_GROUP */

/* ADVERSE_REACTION_GROUP */
struct ADT_A60_ADVERSE_REACTION_GROUP : public HL7Group {
  ADT_A60_ADVERSE_REACTION_GROUP() { this->init(); }
  /* Fields ID  */
  enum FIELD_ID {
    ADT_A60_IAM_1,
    ADT_A60_IAR_2,
    ADT_A60_NTE_3,
    FIELD_ID_MAX
  };

  const char* className() const { return "ADT_A60_ADVERSE_REACTION_GROUP"; }
  ADT_A60_ADVERSE_REACTION_GROUP* create() const { return new ADT_A60_ADVERSE_REACTION_GROUP(); }

 private:
  /* Initialize object */
  void init() {
    setName("ADT_A60.ADVERSE_REACTION_GROUP");
    addObject<IAM>(ADT_A60_IAM_1, "IAM.1", HL7::optional, HL7::repetition_on);
    addObject<IAR>(ADT_A60_IAR_2, "IAR.2", HL7::optional, HL7::repetition_on);
    addObject<NTE>(ADT_A60_NTE_3, "NTE.3", HL7::optional, HL7::repetition_on);
  }

 public:
  /* Getters list */
  IAM* getIAM_1(size_t index = 0) {
    return (IAM*)this->getObjectSafe(index, ADT_A60_IAM_1);
  }
  IAR* getIAR_2(size_t index = 0) {
    return (IAR*)this->getObjectSafe(index, ADT_A60_IAR_2);
  }
  NTE* getNTE_3(size_t index = 0) {
    return (NTE*)this->getObjectSafe(index, ADT_A60_NTE_3);
  }

  /* Checker list */
  bool isIAM_1(size_t index = 0) {
    try {
      return this->getObject(index, ADT_A60_IAM_1) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isIAR_2(size_t index = 0) {
    try {
      return this->getObject(index, ADT_A60_IAR_2) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isNTE_3(size_t index = 0) {
    try {
      return this->getObject(index, ADT_A60_NTE_3) != NULL;
    } catch (...) {
    }
    return false;
  }
}; /* ADT_A60_ADVERSE_REACTION_GROUP */

/* ADT_A60 */
struct ADT_A60 : public HL7Message {
  ADT_A60() { this->init(); }
  /* Fields ID  */
  enum FIELD_ID {
    ADT_A60_MSH_1,
    ADT_A60_SFT_2,
    ADT_A60_UAC_3,
    ADT_A60_EVN_4,
    ADT_A60_PID_5,
    ADT_A60_ARV_6,
    ADT_A60_PV1_7,
    ADT_A60_PV2_8,
    ADT_A60_ARV_9,
    ADT_A60_IAM_11,
    ADT_A60_NTE_12,
    ADT_A60_IAR_13,
    FIELD_ID_MAX
  };

  const char* className() const { return "ADT_A60"; }
  ADT_A60* create() const { return new ADT_A60(); }

 private:
  /* Initialize object */
  void init() {
    setName("ADT_A60");
    addObject<MSH>(ADT_A60_MSH_1, "MSH.1", HL7::initialized, HL7::repetition_off);
    addObject<SFT>(ADT_A60_SFT_2, "SFT.2", HL7::optional, HL7::repetition_on);
    addObject<UAC>(ADT_A60_UAC_3, "UAC.3", HL7::optional, HL7::repetition_off);
    addObject<EVN>(ADT_A60_EVN_4, "EVN.4", HL7::initialized, HL7::repetition_off);
    addObject<PID>(ADT_A60_PID_5, "PID.5", HL7::initialized, HL7::repetition_off);
    addObject<ARV>(ADT_A60_ARV_6, "ARV.6", HL7::optional, HL7::repetition_on);
    addObject<PV1>(ADT_A60_PV1_7, "PV1.7", HL7::optional, HL7::repetition_off);
    addObject<PV2>(ADT_A60_PV2_8, "PV2.8", HL7::optional, HL7::repetition_off);
    addObject<ARV>(ADT_A60_ARV_9, "ARV.9", HL7::optional, HL7::repetition_on);
    addObject<IAM>(ADT_A60_IAM_11, "IAM.11", HL7::initialized, HL7::repetition_off);
    addObject<NTE>(ADT_A60_NTE_12, "NTE.12", HL7::optional, HL7::repetition_off);
    addObject<IAR>(ADT_A60_IAR_13, "IAR.13", HL7::optional, HL7::repetition_off);
  }

 public:
  /* Getters list */
  MSH* getMSH_1(size_t index = 0) {
    return (MSH*)this->getObjectSafe(index, ADT_A60_MSH_1);
  }
  SFT* getSFT_2(size_t index = 0) {
    return (SFT*)this->getObjectSafe(index, ADT_A60_SFT_2);
  }
  UAC* getUAC_3(size_t index = 0) {
    return (UAC*)this->getObjectSafe(index, ADT_A60_UAC_3);
  }
  EVN* getEVN_4(size_t index = 0) {
    return (EVN*)this->getObjectSafe(index, ADT_A60_EVN_4);
  }
  PID* getPID_5(size_t index = 0) {
    return (PID*)this->getObjectSafe(index, ADT_A60_PID_5);
  }
  ARV* getARV_6(size_t index = 0) {
    return (ARV*)this->getObjectSafe(index, ADT_A60_ARV_6);
  }
  PV1* getPV1_7(size_t index = 0) {
    return (PV1*)this->getObjectSafe(index, ADT_A60_PV1_7);
  }
  PV2* getPV2_8(size_t index = 0) {
    return (PV2*)this->getObjectSafe(index, ADT_A60_PV2_8);
  }
  ARV* getARV_9(size_t index = 0) {
    return (ARV*)this->getObjectSafe(index, ADT_A60_ARV_9);
  }
  IAM* getIAM_11(size_t index = 0) {
    return (IAM*)this->getObjectSafe(index, ADT_A60_IAM_11);
  }
  NTE* getNTE_12(size_t index = 0) {
    return (NTE*)this->getObjectSafe(index, ADT_A60_NTE_12);
  }
  IAR* getIAR_13(size_t index = 0) {
    return (IAR*)this->getObjectSafe(index, ADT_A60_IAR_13);
  }

  /* Checker list */
  bool isMSH_1(size_t index = 0) {
    try {
      return this->getObject(index, ADT_A60_MSH_1) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isSFT_2(size_t index = 0) {
    try {
      return this->getObject(index, ADT_A60_SFT_2) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isUAC_3(size_t index = 0) {
    try {
      return this->getObject(index, ADT_A60_UAC_3) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isEVN_4(size_t index = 0) {
    try {
      return this->getObject(index, ADT_A60_EVN_4) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isPID_5(size_t index = 0) {
    try {
      return this->getObject(index, ADT_A60_PID_5) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isARV_6(size_t index = 0) {
    try {
      return this->getObject(index, ADT_A60_ARV_6) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isPV1_7(size_t index = 0) {
    try {
      return this->getObject(index, ADT_A60_PV1_7) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isPV2_8(size_t index = 0) {
    try {
      return this->getObject(index, ADT_A60_PV2_8) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isARV_9(size_t index = 0) {
    try {
      return this->getObject(index, ADT_A60_ARV_9) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isIAM_11(size_t index = 0) {
    try {
      return this->getObject(index, ADT_A60_IAM_11) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isNTE_12(size_t index = 0) {
    try {
      return this->getObject(index, ADT_A60_NTE_12) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isIAR_13(size_t index = 0) {
    try {
      return this->getObject(index, ADT_A60_IAR_13) != NULL;
    } catch (...) {
    }
    return false;
  }
}; /* ADT_A60_ */
} /* namespace HL7_281 */
#endif /*  __ADT_A60__281_H__ */
