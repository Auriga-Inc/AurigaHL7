/*
 * hacca - C Toolkit for the HL7 Protocol
 *
 * Warning: This file was automatically generated by [hawk], please do not edit.
 *          Thu 25 Jun 19:02:52 CEST 2020
 *
 * R. Carbone (rocco@tecsiel.it)
 * Jun 2020
 *
 * SPDX-License-Identifier: BSD-2-Clause-FreeBSD
 *
 * This file was developed as part of the ongoing activities related
 * to the design, implementation and execution of interoperability tests
 * between hacca-based versus AurigaHL7-based applications.
 *
 * In more details I decided to extend AurigaHL7 C++ Library with header files
 * implementing HL7 structures of the version 2.8.1 of the protocol (April 2014)
 * because the version 2.4 distributed with AurigaHL7 is a bit outdated (October 2000).
 *
 * All files in this fork was automatically generated by hacca-based tool [hawk]
 * and strictly follow the syntax and convention originally defined
 * by Auriga HL7 C++ Library just as form of continuity, convenience
 * and respect for their superb work.
 */


#ifndef __DPR_O48__281_H__
#define __DPR_O48__281_H__

#include "../../common/Util.h"
#include "../segment/AL1.h"
#include "../segment/ARV.h"
#include "../segment/BUI.h"
#include "../segment/DON.h"
#include "../segment/MSH.h"
#include "../segment/NTE.h"
#include "../segment/OBR.h"
#include "../segment/OBX.h"
#include "../segment/PD1.h"
#include "../segment/PID.h"
#include "../segment/PV1.h"
#include "../segment/SFT.h"
#include "../segment/UAC.h"

namespace HL7_281 {

/* Internal structures/groups */
struct DPR_O48_DONOR; /* DONOR */
struct DPR_O48_OBRNTE; /* OBRNTE */
struct DPR_O48_DONATION; /* DONATION */
struct DPR_O48_BLOOD_UNIT; /* BLOOD_UNIT */
struct DPR_O48_DONOR_REGISTRATION; /* DONOR_REGISTRATION */

/* DONOR */
struct DPR_O48_DONOR : public HL7Group {
  DPR_O48_DONOR() { this->init(); }
  /* Fields ID  */
  enum FIELD_ID {
    DPR_O48_AL1_1,
    DPR_O48_ARV_2,
    DPR_O48_DPR_O48_DONOR_REGISTRATION_3,
    DPR_O48_NTE_4,
    DPR_O48_OBX_5,
    DPR_O48_PD1_6,
    DPR_O48_PID_7,
    FIELD_ID_MAX
  };

  const char* className() const { return "DPR_O48_DONOR"; }
  DPR_O48_DONOR* create() const { return new DPR_O48_DONOR(); }

 private:
  /* Initialize object */
  void init() {
    setName("DPR_O48.DONOR");
    addObject<AL1>(DPR_O48_AL1_1, "AL1.1", HL7::optional, HL7::repetition_on);
    addObject<ARV>(DPR_O48_ARV_2, "ARV.2", HL7::optional, HL7::repetition_on);
    addObject<DPR_O48_DONOR_REGISTRATION>(DPR_O48_DPR_O48_DONOR_REGISTRATION_3, "DPR_O48_DONOR_REGISTRATION.3", HL7::optional, HL7::repetition_on);
    addObject<NTE>(DPR_O48_NTE_4, "NTE.4", HL7::optional, HL7::repetition_on);
    addObject<OBX>(DPR_O48_OBX_5, "OBX.5", HL7::optional, HL7::repetition_on);
    addObject<PD1>(DPR_O48_PD1_6, "PD1.6", HL7::optional, HL7::repetition_on);
    addObject<PID>(DPR_O48_PID_7, "PID.7", HL7::optional, HL7::repetition_on);
  }

 public:
  /* Getters list */
  AL1* getAL1_1(size_t index = 0) {
    return (AL1*)this->getObjectSafe(index, DPR_O48_AL1_1);
  }
  ARV* getARV_2(size_t index = 0) {
    return (ARV*)this->getObjectSafe(index, DPR_O48_ARV_2);
  }
  DPR_O48_DONOR_REGISTRATION* getDPR_O48_DONOR_REGISTRATION_3(size_t index = 0) {
    return (DPR_O48_DONOR_REGISTRATION*)this->getObjectSafe(index, DPR_O48_DPR_O48_DONOR_REGISTRATION_3);
  }
  NTE* getNTE_4(size_t index = 0) {
    return (NTE*)this->getObjectSafe(index, DPR_O48_NTE_4);
  }
  OBX* getOBX_5(size_t index = 0) {
    return (OBX*)this->getObjectSafe(index, DPR_O48_OBX_5);
  }
  PD1* getPD1_6(size_t index = 0) {
    return (PD1*)this->getObjectSafe(index, DPR_O48_PD1_6);
  }
  PID* getPID_7(size_t index = 0) {
    return (PID*)this->getObjectSafe(index, DPR_O48_PID_7);
  }

  /* Checker list */
  bool isAL1_1(size_t index = 0) {
    try {
      return this->getObject(index, DPR_O48_AL1_1) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isARV_2(size_t index = 0) {
    try {
      return this->getObject(index, DPR_O48_ARV_2) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isDPR_O48_DONOR_REGISTRATION_3(size_t index = 0) {
    try {
      return this->getObject(index, DPR_O48_DPR_O48_DONOR_REGISTRATION_3) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isNTE_4(size_t index = 0) {
    try {
      return this->getObject(index, DPR_O48_NTE_4) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isOBX_5(size_t index = 0) {
    try {
      return this->getObject(index, DPR_O48_OBX_5) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isPD1_6(size_t index = 0) {
    try {
      return this->getObject(index, DPR_O48_PD1_6) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isPID_7(size_t index = 0) {
    try {
      return this->getObject(index, DPR_O48_PID_7) != NULL;
    } catch (...) {
    }
    return false;
  }
}; /* DPR_O48_DONOR */

/* OBRNTE */
struct DPR_O48_OBRNTE : public HL7Group {
  DPR_O48_OBRNTE() { this->init(); }
  /* Fields ID  */
  enum FIELD_ID {
    DPR_O48_NTE_1,
    DPR_O48_OBR_2,
    FIELD_ID_MAX
  };

  const char* className() const { return "DPR_O48_OBRNTE"; }
  DPR_O48_OBRNTE* create() const { return new DPR_O48_OBRNTE(); }

 private:
  /* Initialize object */
  void init() {
    setName("DPR_O48.OBRNTE");
    addObject<NTE>(DPR_O48_NTE_1, "NTE.1", HL7::optional, HL7::repetition_on);
    addObject<OBR>(DPR_O48_OBR_2, "OBR.2", HL7::optional, HL7::repetition_on);
  }

 public:
  /* Getters list */
  NTE* getNTE_1(size_t index = 0) {
    return (NTE*)this->getObjectSafe(index, DPR_O48_NTE_1);
  }
  OBR* getOBR_2(size_t index = 0) {
    return (OBR*)this->getObjectSafe(index, DPR_O48_OBR_2);
  }

  /* Checker list */
  bool isNTE_1(size_t index = 0) {
    try {
      return this->getObject(index, DPR_O48_NTE_1) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isOBR_2(size_t index = 0) {
    try {
      return this->getObject(index, DPR_O48_OBR_2) != NULL;
    } catch (...) {
    }
    return false;
  }
}; /* DPR_O48_OBRNTE */

/* DONATION */
struct DPR_O48_DONATION : public HL7Group {
  DPR_O48_DONATION() { this->init(); }
  /* Fields ID  */
  enum FIELD_ID {
    DPR_O48_DON_1,
    DPR_O48_DPR_O48_BLOOD_UNIT_2,
    DPR_O48_NTE_3,
    DPR_O48_OBX_4,
    FIELD_ID_MAX
  };

  const char* className() const { return "DPR_O48_DONATION"; }
  DPR_O48_DONATION* create() const { return new DPR_O48_DONATION(); }

 private:
  /* Initialize object */
  void init() {
    setName("DPR_O48.DONATION");
    addObject<DON>(DPR_O48_DON_1, "DON.1", HL7::optional, HL7::repetition_on);
    addObject<DPR_O48_BLOOD_UNIT>(DPR_O48_DPR_O48_BLOOD_UNIT_2, "DPR_O48_BLOOD_UNIT.2", HL7::optional, HL7::repetition_on);
    addObject<NTE>(DPR_O48_NTE_3, "NTE.3", HL7::optional, HL7::repetition_on);
    addObject<OBX>(DPR_O48_OBX_4, "OBX.4", HL7::optional, HL7::repetition_on);
  }

 public:
  /* Getters list */
  DON* getDON_1(size_t index = 0) {
    return (DON*)this->getObjectSafe(index, DPR_O48_DON_1);
  }
  DPR_O48_BLOOD_UNIT* getDPR_O48_BLOOD_UNIT_2(size_t index = 0) {
    return (DPR_O48_BLOOD_UNIT*)this->getObjectSafe(index, DPR_O48_DPR_O48_BLOOD_UNIT_2);
  }
  NTE* getNTE_3(size_t index = 0) {
    return (NTE*)this->getObjectSafe(index, DPR_O48_NTE_3);
  }
  OBX* getOBX_4(size_t index = 0) {
    return (OBX*)this->getObjectSafe(index, DPR_O48_OBX_4);
  }

  /* Checker list */
  bool isDON_1(size_t index = 0) {
    try {
      return this->getObject(index, DPR_O48_DON_1) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isDPR_O48_BLOOD_UNIT_2(size_t index = 0) {
    try {
      return this->getObject(index, DPR_O48_DPR_O48_BLOOD_UNIT_2) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isNTE_3(size_t index = 0) {
    try {
      return this->getObject(index, DPR_O48_NTE_3) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isOBX_4(size_t index = 0) {
    try {
      return this->getObject(index, DPR_O48_OBX_4) != NULL;
    } catch (...) {
    }
    return false;
  }
}; /* DPR_O48_DONATION */

/* BLOOD_UNIT */
struct DPR_O48_BLOOD_UNIT : public HL7Group {
  DPR_O48_BLOOD_UNIT() { this->init(); }
  /* Fields ID  */
  enum FIELD_ID {
    DPR_O48_BUI_1,
    DPR_O48_NTE_2,
    FIELD_ID_MAX
  };

  const char* className() const { return "DPR_O48_BLOOD_UNIT"; }
  DPR_O48_BLOOD_UNIT* create() const { return new DPR_O48_BLOOD_UNIT(); }

 private:
  /* Initialize object */
  void init() {
    setName("DPR_O48.BLOOD_UNIT");
    addObject<BUI>(DPR_O48_BUI_1, "BUI.1", HL7::optional, HL7::repetition_on);
    addObject<NTE>(DPR_O48_NTE_2, "NTE.2", HL7::optional, HL7::repetition_on);
  }

 public:
  /* Getters list */
  BUI* getBUI_1(size_t index = 0) {
    return (BUI*)this->getObjectSafe(index, DPR_O48_BUI_1);
  }
  NTE* getNTE_2(size_t index = 0) {
    return (NTE*)this->getObjectSafe(index, DPR_O48_NTE_2);
  }

  /* Checker list */
  bool isBUI_1(size_t index = 0) {
    try {
      return this->getObject(index, DPR_O48_BUI_1) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isNTE_2(size_t index = 0) {
    try {
      return this->getObject(index, DPR_O48_NTE_2) != NULL;
    } catch (...) {
    }
    return false;
  }
}; /* DPR_O48_BLOOD_UNIT */

/* DONOR_REGISTRATION */
struct DPR_O48_DONOR_REGISTRATION : public HL7Group {
  DPR_O48_DONOR_REGISTRATION() { this->init(); }
  /* Fields ID  */
  enum FIELD_ID {
    DPR_O48_NTE_1,
    DPR_O48_PV1_2,
    FIELD_ID_MAX
  };

  const char* className() const { return "DPR_O48_DONOR_REGISTRATION"; }
  DPR_O48_DONOR_REGISTRATION* create() const { return new DPR_O48_DONOR_REGISTRATION(); }

 private:
  /* Initialize object */
  void init() {
    setName("DPR_O48.DONOR_REGISTRATION");
    addObject<NTE>(DPR_O48_NTE_1, "NTE.1", HL7::optional, HL7::repetition_on);
    addObject<PV1>(DPR_O48_PV1_2, "PV1.2", HL7::optional, HL7::repetition_on);
  }

 public:
  /* Getters list */
  NTE* getNTE_1(size_t index = 0) {
    return (NTE*)this->getObjectSafe(index, DPR_O48_NTE_1);
  }
  PV1* getPV1_2(size_t index = 0) {
    return (PV1*)this->getObjectSafe(index, DPR_O48_PV1_2);
  }

  /* Checker list */
  bool isNTE_1(size_t index = 0) {
    try {
      return this->getObject(index, DPR_O48_NTE_1) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isPV1_2(size_t index = 0) {
    try {
      return this->getObject(index, DPR_O48_PV1_2) != NULL;
    } catch (...) {
    }
    return false;
  }
}; /* DPR_O48_DONOR_REGISTRATION */

/* DPR_O48 */
struct DPR_O48 : public HL7Message {
  DPR_O48() { this->init(); }
  /* Fields ID  */
  enum FIELD_ID {
    DPR_O48_MSH_1,
    DPR_O48_SFT_2,
    DPR_O48_UAC_3,
    DPR_O48_DON_7,
    DPR_O48_OBX_8,
    DPR_O48_NTE_9,
    DPR_O48_BUI_11,
    DPR_O48_NTE_12,
    DPR_O48_PID_13,
    DPR_O48_PD1_14,
    DPR_O48_OBX_15,
    DPR_O48_NTE_16,
    DPR_O48_AL1_17,
    DPR_O48_ARV_18,
    DPR_O48_PV1_20,
    DPR_O48_NTE_21,
    DPR_O48_OBR_22,
    DPR_O48_NTE_23,
    FIELD_ID_MAX
  };

  const char* className() const { return "DPR_O48"; }
  DPR_O48* create() const { return new DPR_O48(); }

 private:
  /* Initialize object */
  void init() {
    setName("DPR_O48");
    addObject<MSH>(DPR_O48_MSH_1, "MSH.1", HL7::initialized, HL7::repetition_off);
    addObject<SFT>(DPR_O48_SFT_2, "SFT.2", HL7::optional, HL7::repetition_on);
    addObject<UAC>(DPR_O48_UAC_3, "UAC.3", HL7::optional, HL7::repetition_off);
    addObject<DON>(DPR_O48_DON_7, "DON.7", HL7::initialized, HL7::repetition_off);
    addObject<OBX>(DPR_O48_OBX_8, "OBX.8", HL7::optional, HL7::repetition_off);
    addObject<NTE>(DPR_O48_NTE_9, "NTE.9", HL7::optional, HL7::repetition_off);
    addObject<BUI>(DPR_O48_BUI_11, "BUI.11", HL7::optional, HL7::repetition_off);
    addObject<NTE>(DPR_O48_NTE_12, "NTE.12", HL7::optional, HL7::repetition_off);
    addObject<PID>(DPR_O48_PID_13, "PID.13", HL7::initialized, HL7::repetition_off);
    addObject<PD1>(DPR_O48_PD1_14, "PD1.14", HL7::optional, HL7::repetition_off);
    addObject<OBX>(DPR_O48_OBX_15, "OBX.15", HL7::optional, HL7::repetition_off);
    addObject<NTE>(DPR_O48_NTE_16, "NTE.16", HL7::optional, HL7::repetition_off);
    addObject<AL1>(DPR_O48_AL1_17, "AL1.17", HL7::optional, HL7::repetition_off);
    addObject<ARV>(DPR_O48_ARV_18, "ARV.18", HL7::optional, HL7::repetition_off);
    addObject<PV1>(DPR_O48_PV1_20, "PV1.20", HL7::optional, HL7::repetition_off);
    addObject<NTE>(DPR_O48_NTE_21, "NTE.21", HL7::optional, HL7::repetition_off);
    addObject<OBR>(DPR_O48_OBR_22, "OBR.22", HL7::initialized, HL7::repetition_off);
    addObject<NTE>(DPR_O48_NTE_23, "NTE.23", HL7::optional, HL7::repetition_off);
  }

 public:
  /* Getters list */
  MSH* getMSH_1(size_t index = 0) {
    return (MSH*)this->getObjectSafe(index, DPR_O48_MSH_1);
  }
  SFT* getSFT_2(size_t index = 0) {
    return (SFT*)this->getObjectSafe(index, DPR_O48_SFT_2);
  }
  UAC* getUAC_3(size_t index = 0) {
    return (UAC*)this->getObjectSafe(index, DPR_O48_UAC_3);
  }
  DON* getDON_7(size_t index = 0) {
    return (DON*)this->getObjectSafe(index, DPR_O48_DON_7);
  }
  OBX* getOBX_8(size_t index = 0) {
    return (OBX*)this->getObjectSafe(index, DPR_O48_OBX_8);
  }
  NTE* getNTE_9(size_t index = 0) {
    return (NTE*)this->getObjectSafe(index, DPR_O48_NTE_9);
  }
  BUI* getBUI_11(size_t index = 0) {
    return (BUI*)this->getObjectSafe(index, DPR_O48_BUI_11);
  }
  NTE* getNTE_12(size_t index = 0) {
    return (NTE*)this->getObjectSafe(index, DPR_O48_NTE_12);
  }
  PID* getPID_13(size_t index = 0) {
    return (PID*)this->getObjectSafe(index, DPR_O48_PID_13);
  }
  PD1* getPD1_14(size_t index = 0) {
    return (PD1*)this->getObjectSafe(index, DPR_O48_PD1_14);
  }
  OBX* getOBX_15(size_t index = 0) {
    return (OBX*)this->getObjectSafe(index, DPR_O48_OBX_15);
  }
  NTE* getNTE_16(size_t index = 0) {
    return (NTE*)this->getObjectSafe(index, DPR_O48_NTE_16);
  }
  AL1* getAL1_17(size_t index = 0) {
    return (AL1*)this->getObjectSafe(index, DPR_O48_AL1_17);
  }
  ARV* getARV_18(size_t index = 0) {
    return (ARV*)this->getObjectSafe(index, DPR_O48_ARV_18);
  }
  PV1* getPV1_20(size_t index = 0) {
    return (PV1*)this->getObjectSafe(index, DPR_O48_PV1_20);
  }
  NTE* getNTE_21(size_t index = 0) {
    return (NTE*)this->getObjectSafe(index, DPR_O48_NTE_21);
  }
  OBR* getOBR_22(size_t index = 0) {
    return (OBR*)this->getObjectSafe(index, DPR_O48_OBR_22);
  }
  NTE* getNTE_23(size_t index = 0) {
    return (NTE*)this->getObjectSafe(index, DPR_O48_NTE_23);
  }

  /* Checker list */
  bool isMSH_1(size_t index = 0) {
    try {
      return this->getObject(index, DPR_O48_MSH_1) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isSFT_2(size_t index = 0) {
    try {
      return this->getObject(index, DPR_O48_SFT_2) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isUAC_3(size_t index = 0) {
    try {
      return this->getObject(index, DPR_O48_UAC_3) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isDON_7(size_t index = 0) {
    try {
      return this->getObject(index, DPR_O48_DON_7) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isOBX_8(size_t index = 0) {
    try {
      return this->getObject(index, DPR_O48_OBX_8) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isNTE_9(size_t index = 0) {
    try {
      return this->getObject(index, DPR_O48_NTE_9) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isBUI_11(size_t index = 0) {
    try {
      return this->getObject(index, DPR_O48_BUI_11) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isNTE_12(size_t index = 0) {
    try {
      return this->getObject(index, DPR_O48_NTE_12) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isPID_13(size_t index = 0) {
    try {
      return this->getObject(index, DPR_O48_PID_13) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isPD1_14(size_t index = 0) {
    try {
      return this->getObject(index, DPR_O48_PD1_14) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isOBX_15(size_t index = 0) {
    try {
      return this->getObject(index, DPR_O48_OBX_15) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isNTE_16(size_t index = 0) {
    try {
      return this->getObject(index, DPR_O48_NTE_16) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isAL1_17(size_t index = 0) {
    try {
      return this->getObject(index, DPR_O48_AL1_17) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isARV_18(size_t index = 0) {
    try {
      return this->getObject(index, DPR_O48_ARV_18) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isPV1_20(size_t index = 0) {
    try {
      return this->getObject(index, DPR_O48_PV1_20) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isNTE_21(size_t index = 0) {
    try {
      return this->getObject(index, DPR_O48_NTE_21) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isOBR_22(size_t index = 0) {
    try {
      return this->getObject(index, DPR_O48_OBR_22) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isNTE_23(size_t index = 0) {
    try {
      return this->getObject(index, DPR_O48_NTE_23) != NULL;
    } catch (...) {
    }
    return false;
  }
}; /* DPR_O48_ */
} /* namespace HL7_281 */
#endif /*  __DPR_O48__281_H__ */
