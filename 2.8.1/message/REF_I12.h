/*
 * hacca - C Toolkit for the HL7 Protocol
 *
 * Warning: This file was automatically generated by [hawk], please do not edit.
 *          Thu 25 Jun 19:06:28 CEST 2020
 *
 * R. Carbone (rocco@tecsiel.it)
 * Jun 2020
 *
 * SPDX-License-Identifier: BSD-2-Clause-FreeBSD
 *
 * This file was developed as part of the ongoing activities related
 * to the design, implementation and execution of interoperability tests
 * between hacca-based versus AurigaHL7-based applications.
 *
 * In more details I decided to extend AurigaHL7 C++ Library with header files
 * implementing HL7 structures of the version 2.8.1 of the protocol (April 2014)
 * because the version 2.4 distributed with AurigaHL7 is a bit outdated (October 2000).
 *
 * All files in this fork was automatically generated by hacca-based tool [hawk]
 * and strictly follow the syntax and convention originally defined
 * by Auriga HL7 C++ Library just as form of continuity, convenience
 * and respect for their superb work.
 */


#ifndef __REF_I12__281_H__
#define __REF_I12__281_H__

#include "../../common/Util.h"
#include "../segment/ACC.h"
#include "../segment/AL1.h"
#include "../segment/AUT.h"
#include "../segment/CTD.h"
#include "../segment/DG1.h"
#include "../segment/DRG.h"
#include "../segment/GT1.h"
#include "../segment/IN1.h"
#include "../segment/IN2.h"
#include "../segment/IN3.h"
#include "../segment/MSH.h"
#include "../segment/NK1.h"
#include "../segment/NTE.h"
#include "../segment/OBR.h"
#include "../segment/OBX.h"
#include "../segment/PID.h"
#include "../segment/PR1.h"
#include "../segment/PRD.h"
#include "../segment/PRT.h"
#include "../segment/PV1.h"
#include "../segment/PV2.h"
#include "../segment/RF1.h"
#include "../segment/SFT.h"
#include "../segment/UAC.h"

namespace HL7_281 {

/* Internal structures/groups */
struct REF_I12_AUTHORIZATION_CONTACT2; /* AUTHORIZATION_CONTACT2 */
struct REF_I12_PROVIDER_CONTACT; /* PROVIDER_CONTACT */
struct REF_I12_INSURANCE; /* INSURANCE */
struct REF_I12_PROCEDURE; /* PROCEDURE */
struct REF_I12_OBSERVATION; /* OBSERVATION */
struct REF_I12_PATIENT_VISIT; /* PATIENT_VISIT */
struct REF_I12_RESULTS_NOTES; /* RESULTS_NOTES */
struct REF_I12_AUTHORIZATION_CONTACT2; /* AUTHORIZATION_CONTACT2 */

/* AUTHORIZATION_CONTACT2 */
struct REF_I12_AUTHORIZATION_CONTACT2 : public HL7Group {
  REF_I12_AUTHORIZATION_CONTACT2() { this->init(); }
  /* Fields ID  */
  enum FIELD_ID {
    REF_I12_AUT_1,
    REF_I12_CTD_2,
    FIELD_ID_MAX
  };

  const char* className() const { return "REF_I12_AUTHORIZATION_CONTACT2"; }
  REF_I12_AUTHORIZATION_CONTACT2* create() const { return new REF_I12_AUTHORIZATION_CONTACT2(); }

 private:
  /* Initialize object */
  void init() {
    setName("REF_I12.AUTHORIZATION_CONTACT2");
    addObject<AUT>(REF_I12_AUT_1, "AUT.1", HL7::optional, HL7::repetition_on);
    addObject<CTD>(REF_I12_CTD_2, "CTD.2", HL7::optional, HL7::repetition_on);
  }

 public:
  /* Getters list */
  AUT* getAUT_1(size_t index = 0) {
    return (AUT*)this->getObjectSafe(index, REF_I12_AUT_1);
  }
  CTD* getCTD_2(size_t index = 0) {
    return (CTD*)this->getObjectSafe(index, REF_I12_CTD_2);
  }

  /* Checker list */
  bool isAUT_1(size_t index = 0) {
    try {
      return this->getObject(index, REF_I12_AUT_1) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isCTD_2(size_t index = 0) {
    try {
      return this->getObject(index, REF_I12_CTD_2) != NULL;
    } catch (...) {
    }
    return false;
  }
}; /* REF_I12_AUTHORIZATION_CONTACT2 */

/* PROVIDER_CONTACT */
struct REF_I12_PROVIDER_CONTACT : public HL7Group {
  REF_I12_PROVIDER_CONTACT() { this->init(); }
  /* Fields ID  */
  enum FIELD_ID {
    REF_I12_CTD_1,
    REF_I12_PRD_2,
    FIELD_ID_MAX
  };

  const char* className() const { return "REF_I12_PROVIDER_CONTACT"; }
  REF_I12_PROVIDER_CONTACT* create() const { return new REF_I12_PROVIDER_CONTACT(); }

 private:
  /* Initialize object */
  void init() {
    setName("REF_I12.PROVIDER_CONTACT");
    addObject<CTD>(REF_I12_CTD_1, "CTD.1", HL7::optional, HL7::repetition_on);
    addObject<PRD>(REF_I12_PRD_2, "PRD.2", HL7::optional, HL7::repetition_on);
  }

 public:
  /* Getters list */
  CTD* getCTD_1(size_t index = 0) {
    return (CTD*)this->getObjectSafe(index, REF_I12_CTD_1);
  }
  PRD* getPRD_2(size_t index = 0) {
    return (PRD*)this->getObjectSafe(index, REF_I12_PRD_2);
  }

  /* Checker list */
  bool isCTD_1(size_t index = 0) {
    try {
      return this->getObject(index, REF_I12_CTD_1) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isPRD_2(size_t index = 0) {
    try {
      return this->getObject(index, REF_I12_PRD_2) != NULL;
    } catch (...) {
    }
    return false;
  }
}; /* REF_I12_PROVIDER_CONTACT */

/* INSURANCE */
struct REF_I12_INSURANCE : public HL7Group {
  REF_I12_INSURANCE() { this->init(); }
  /* Fields ID  */
  enum FIELD_ID {
    REF_I12_IN1_1,
    REF_I12_IN2_2,
    REF_I12_IN3_3,
    FIELD_ID_MAX
  };

  const char* className() const { return "REF_I12_INSURANCE"; }
  REF_I12_INSURANCE* create() const { return new REF_I12_INSURANCE(); }

 private:
  /* Initialize object */
  void init() {
    setName("REF_I12.INSURANCE");
    addObject<IN1>(REF_I12_IN1_1, "IN1.1", HL7::optional, HL7::repetition_on);
    addObject<IN2>(REF_I12_IN2_2, "IN2.2", HL7::optional, HL7::repetition_on);
    addObject<IN3>(REF_I12_IN3_3, "IN3.3", HL7::optional, HL7::repetition_on);
  }

 public:
  /* Getters list */
  IN1* getIN1_1(size_t index = 0) {
    return (IN1*)this->getObjectSafe(index, REF_I12_IN1_1);
  }
  IN2* getIN2_2(size_t index = 0) {
    return (IN2*)this->getObjectSafe(index, REF_I12_IN2_2);
  }
  IN3* getIN3_3(size_t index = 0) {
    return (IN3*)this->getObjectSafe(index, REF_I12_IN3_3);
  }

  /* Checker list */
  bool isIN1_1(size_t index = 0) {
    try {
      return this->getObject(index, REF_I12_IN1_1) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isIN2_2(size_t index = 0) {
    try {
      return this->getObject(index, REF_I12_IN2_2) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isIN3_3(size_t index = 0) {
    try {
      return this->getObject(index, REF_I12_IN3_3) != NULL;
    } catch (...) {
    }
    return false;
  }
}; /* REF_I12_INSURANCE */

/* PROCEDURE */
struct REF_I12_PROCEDURE : public HL7Group {
  REF_I12_PROCEDURE() { this->init(); }
  /* Fields ID  */
  enum FIELD_ID {
    REF_I12_PR1_1,
    REF_I12_REF_I12_AUTHORIZATION_CONTACT2_2,
    FIELD_ID_MAX
  };

  const char* className() const { return "REF_I12_PROCEDURE"; }
  REF_I12_PROCEDURE* create() const { return new REF_I12_PROCEDURE(); }

 private:
  /* Initialize object */
  void init() {
    setName("REF_I12.PROCEDURE");
    addObject<PR1>(REF_I12_PR1_1, "PR1.1", HL7::optional, HL7::repetition_on);
    addObject<REF_I12_AUTHORIZATION_CONTACT2>(REF_I12_REF_I12_AUTHORIZATION_CONTACT2_2, "REF_I12_AUTHORIZATION_CONTACT2.2", HL7::optional, HL7::repetition_on);
  }

 public:
  /* Getters list */
  PR1* getPR1_1(size_t index = 0) {
    return (PR1*)this->getObjectSafe(index, REF_I12_PR1_1);
  }
  REF_I12_AUTHORIZATION_CONTACT2* getREF_I12_AUTHORIZATION_CONTACT2_2(size_t index = 0) {
    return (REF_I12_AUTHORIZATION_CONTACT2*)this->getObjectSafe(index, REF_I12_REF_I12_AUTHORIZATION_CONTACT2_2);
  }

  /* Checker list */
  bool isPR1_1(size_t index = 0) {
    try {
      return this->getObject(index, REF_I12_PR1_1) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isREF_I12_AUTHORIZATION_CONTACT2_2(size_t index = 0) {
    try {
      return this->getObject(index, REF_I12_REF_I12_AUTHORIZATION_CONTACT2_2) != NULL;
    } catch (...) {
    }
    return false;
  }
}; /* REF_I12_PROCEDURE */

/* OBSERVATION */
struct REF_I12_OBSERVATION : public HL7Group {
  REF_I12_OBSERVATION() { this->init(); }
  /* Fields ID  */
  enum FIELD_ID {
    REF_I12_NTE_1,
    REF_I12_OBR_2,
    REF_I12_REF_I12_RESULTS_NOTES_3,
    FIELD_ID_MAX
  };

  const char* className() const { return "REF_I12_OBSERVATION"; }
  REF_I12_OBSERVATION* create() const { return new REF_I12_OBSERVATION(); }

 private:
  /* Initialize object */
  void init() {
    setName("REF_I12.OBSERVATION");
    addObject<NTE>(REF_I12_NTE_1, "NTE.1", HL7::optional, HL7::repetition_on);
    addObject<OBR>(REF_I12_OBR_2, "OBR.2", HL7::optional, HL7::repetition_on);
    addObject<REF_I12_RESULTS_NOTES>(REF_I12_REF_I12_RESULTS_NOTES_3, "REF_I12_RESULTS_NOTES.3", HL7::optional, HL7::repetition_on);
  }

 public:
  /* Getters list */
  NTE* getNTE_1(size_t index = 0) {
    return (NTE*)this->getObjectSafe(index, REF_I12_NTE_1);
  }
  OBR* getOBR_2(size_t index = 0) {
    return (OBR*)this->getObjectSafe(index, REF_I12_OBR_2);
  }
  REF_I12_RESULTS_NOTES* getREF_I12_RESULTS_NOTES_3(size_t index = 0) {
    return (REF_I12_RESULTS_NOTES*)this->getObjectSafe(index, REF_I12_REF_I12_RESULTS_NOTES_3);
  }

  /* Checker list */
  bool isNTE_1(size_t index = 0) {
    try {
      return this->getObject(index, REF_I12_NTE_1) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isOBR_2(size_t index = 0) {
    try {
      return this->getObject(index, REF_I12_OBR_2) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isREF_I12_RESULTS_NOTES_3(size_t index = 0) {
    try {
      return this->getObject(index, REF_I12_REF_I12_RESULTS_NOTES_3) != NULL;
    } catch (...) {
    }
    return false;
  }
}; /* REF_I12_OBSERVATION */

/* PATIENT_VISIT */
struct REF_I12_PATIENT_VISIT : public HL7Group {
  REF_I12_PATIENT_VISIT() { this->init(); }
  /* Fields ID  */
  enum FIELD_ID {
    REF_I12_PV1_1,
    REF_I12_PV2_2,
    FIELD_ID_MAX
  };

  const char* className() const { return "REF_I12_PATIENT_VISIT"; }
  REF_I12_PATIENT_VISIT* create() const { return new REF_I12_PATIENT_VISIT(); }

 private:
  /* Initialize object */
  void init() {
    setName("REF_I12.PATIENT_VISIT");
    addObject<PV1>(REF_I12_PV1_1, "PV1.1", HL7::optional, HL7::repetition_on);
    addObject<PV2>(REF_I12_PV2_2, "PV2.2", HL7::optional, HL7::repetition_on);
  }

 public:
  /* Getters list */
  PV1* getPV1_1(size_t index = 0) {
    return (PV1*)this->getObjectSafe(index, REF_I12_PV1_1);
  }
  PV2* getPV2_2(size_t index = 0) {
    return (PV2*)this->getObjectSafe(index, REF_I12_PV2_2);
  }

  /* Checker list */
  bool isPV1_1(size_t index = 0) {
    try {
      return this->getObject(index, REF_I12_PV1_1) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isPV2_2(size_t index = 0) {
    try {
      return this->getObject(index, REF_I12_PV2_2) != NULL;
    } catch (...) {
    }
    return false;
  }
}; /* REF_I12_PATIENT_VISIT */

/* RESULTS_NOTES */
struct REF_I12_RESULTS_NOTES : public HL7Group {
  REF_I12_RESULTS_NOTES() { this->init(); }
  /* Fields ID  */
  enum FIELD_ID {
    REF_I12_NTE_1,
    REF_I12_OBX_2,
    REF_I12_PRT_3,
    FIELD_ID_MAX
  };

  const char* className() const { return "REF_I12_RESULTS_NOTES"; }
  REF_I12_RESULTS_NOTES* create() const { return new REF_I12_RESULTS_NOTES(); }

 private:
  /* Initialize object */
  void init() {
    setName("REF_I12.RESULTS_NOTES");
    addObject<NTE>(REF_I12_NTE_1, "NTE.1", HL7::optional, HL7::repetition_on);
    addObject<OBX>(REF_I12_OBX_2, "OBX.2", HL7::optional, HL7::repetition_on);
    addObject<PRT>(REF_I12_PRT_3, "PRT.3", HL7::optional, HL7::repetition_on);
  }

 public:
  /* Getters list */
  NTE* getNTE_1(size_t index = 0) {
    return (NTE*)this->getObjectSafe(index, REF_I12_NTE_1);
  }
  OBX* getOBX_2(size_t index = 0) {
    return (OBX*)this->getObjectSafe(index, REF_I12_OBX_2);
  }
  PRT* getPRT_3(size_t index = 0) {
    return (PRT*)this->getObjectSafe(index, REF_I12_PRT_3);
  }

  /* Checker list */
  bool isNTE_1(size_t index = 0) {
    try {
      return this->getObject(index, REF_I12_NTE_1) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isOBX_2(size_t index = 0) {
    try {
      return this->getObject(index, REF_I12_OBX_2) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isPRT_3(size_t index = 0) {
    try {
      return this->getObject(index, REF_I12_PRT_3) != NULL;
    } catch (...) {
    }
    return false;
  }
}; /* REF_I12_RESULTS_NOTES */

/* REF_I12 */
struct REF_I12 : public HL7Message {
  REF_I12() { this->init(); }
  /* Fields ID  */
  enum FIELD_ID {
    REF_I12_MSH_1,
    REF_I12_SFT_2,
    REF_I12_UAC_3,
    REF_I12_RF1_4,
    REF_I12_PID_7,
    REF_I12_NK1_8,
    REF_I12_GT1_9,
    REF_I12_ACC_11,
    REF_I12_DG1_12,
    REF_I12_DRG_13,
    REF_I12_AL1_14,
    REF_I12_NTE_18,
    REF_I12_AUT_19,
    REF_I12_CTD_20,
    REF_I12_IN1_21,
    REF_I12_IN2_22,
    REF_I12_IN3_23,
    REF_I12_OBR_24,
    REF_I12_NTE_25,
    REF_I12_OBX_27,
    REF_I12_PRT_28,
    REF_I12_NTE_29,
    REF_I12_PV1_30,
    REF_I12_PV2_31,
    REF_I12_PR1_32,
    REF_I12_AUT_34,
    REF_I12_CTD_35,
    REF_I12_PRD_36,
    REF_I12_CTD_37,
    FIELD_ID_MAX
  };

  const char* className() const { return "REF_I12"; }
  REF_I12* create() const { return new REF_I12(); }

 private:
  /* Initialize object */
  void init() {
    setName("REF_I12");
    addObject<MSH>(REF_I12_MSH_1, "MSH.1", HL7::initialized, HL7::repetition_off);
    addObject<SFT>(REF_I12_SFT_2, "SFT.2", HL7::optional, HL7::repetition_on);
    addObject<UAC>(REF_I12_UAC_3, "UAC.3", HL7::optional, HL7::repetition_off);
    addObject<RF1>(REF_I12_RF1_4, "RF1.4", HL7::optional, HL7::repetition_off);
    addObject<PID>(REF_I12_PID_7, "PID.7", HL7::initialized, HL7::repetition_off);
    addObject<NK1>(REF_I12_NK1_8, "NK1.8", HL7::optional, HL7::repetition_on);
    addObject<GT1>(REF_I12_GT1_9, "GT1.9", HL7::optional, HL7::repetition_on);
    addObject<ACC>(REF_I12_ACC_11, "ACC.11", HL7::optional, HL7::repetition_off);
    addObject<DG1>(REF_I12_DG1_12, "DG1.12", HL7::optional, HL7::repetition_on);
    addObject<DRG>(REF_I12_DRG_13, "DRG.13", HL7::optional, HL7::repetition_on);
    addObject<AL1>(REF_I12_AL1_14, "AL1.14", HL7::optional, HL7::repetition_on);
    addObject<NTE>(REF_I12_NTE_18, "NTE.18", HL7::optional, HL7::repetition_on);
    addObject<AUT>(REF_I12_AUT_19, "AUT.19", HL7::initialized, HL7::repetition_off);
    addObject<CTD>(REF_I12_CTD_20, "CTD.20", HL7::optional, HL7::repetition_off);
    addObject<IN1>(REF_I12_IN1_21, "IN1.21", HL7::initialized, HL7::repetition_off);
    addObject<IN2>(REF_I12_IN2_22, "IN2.22", HL7::optional, HL7::repetition_off);
    addObject<IN3>(REF_I12_IN3_23, "IN3.23", HL7::optional, HL7::repetition_off);
    addObject<OBR>(REF_I12_OBR_24, "OBR.24", HL7::initialized, HL7::repetition_off);
    addObject<NTE>(REF_I12_NTE_25, "NTE.25", HL7::optional, HL7::repetition_off);
    addObject<OBX>(REF_I12_OBX_27, "OBX.27", HL7::initialized, HL7::repetition_off);
    addObject<PRT>(REF_I12_PRT_28, "PRT.28", HL7::optional, HL7::repetition_off);
    addObject<NTE>(REF_I12_NTE_29, "NTE.29", HL7::optional, HL7::repetition_off);
    addObject<PV1>(REF_I12_PV1_30, "PV1.30", HL7::initialized, HL7::repetition_off);
    addObject<PV2>(REF_I12_PV2_31, "PV2.31", HL7::optional, HL7::repetition_off);
    addObject<PR1>(REF_I12_PR1_32, "PR1.32", HL7::initialized, HL7::repetition_off);
    addObject<AUT>(REF_I12_AUT_34, "AUT.34", HL7::initialized, HL7::repetition_off);
    addObject<CTD>(REF_I12_CTD_35, "CTD.35", HL7::optional, HL7::repetition_off);
    addObject<PRD>(REF_I12_PRD_36, "PRD.36", HL7::initialized, HL7::repetition_off);
    addObject<CTD>(REF_I12_CTD_37, "CTD.37", HL7::optional, HL7::repetition_off);
  }

 public:
  /* Getters list */
  MSH* getMSH_1(size_t index = 0) {
    return (MSH*)this->getObjectSafe(index, REF_I12_MSH_1);
  }
  SFT* getSFT_2(size_t index = 0) {
    return (SFT*)this->getObjectSafe(index, REF_I12_SFT_2);
  }
  UAC* getUAC_3(size_t index = 0) {
    return (UAC*)this->getObjectSafe(index, REF_I12_UAC_3);
  }
  RF1* getRF1_4(size_t index = 0) {
    return (RF1*)this->getObjectSafe(index, REF_I12_RF1_4);
  }
  PID* getPID_7(size_t index = 0) {
    return (PID*)this->getObjectSafe(index, REF_I12_PID_7);
  }
  NK1* getNK1_8(size_t index = 0) {
    return (NK1*)this->getObjectSafe(index, REF_I12_NK1_8);
  }
  GT1* getGT1_9(size_t index = 0) {
    return (GT1*)this->getObjectSafe(index, REF_I12_GT1_9);
  }
  ACC* getACC_11(size_t index = 0) {
    return (ACC*)this->getObjectSafe(index, REF_I12_ACC_11);
  }
  DG1* getDG1_12(size_t index = 0) {
    return (DG1*)this->getObjectSafe(index, REF_I12_DG1_12);
  }
  DRG* getDRG_13(size_t index = 0) {
    return (DRG*)this->getObjectSafe(index, REF_I12_DRG_13);
  }
  AL1* getAL1_14(size_t index = 0) {
    return (AL1*)this->getObjectSafe(index, REF_I12_AL1_14);
  }
  NTE* getNTE_18(size_t index = 0) {
    return (NTE*)this->getObjectSafe(index, REF_I12_NTE_18);
  }
  AUT* getAUT_19(size_t index = 0) {
    return (AUT*)this->getObjectSafe(index, REF_I12_AUT_19);
  }
  CTD* getCTD_20(size_t index = 0) {
    return (CTD*)this->getObjectSafe(index, REF_I12_CTD_20);
  }
  IN1* getIN1_21(size_t index = 0) {
    return (IN1*)this->getObjectSafe(index, REF_I12_IN1_21);
  }
  IN2* getIN2_22(size_t index = 0) {
    return (IN2*)this->getObjectSafe(index, REF_I12_IN2_22);
  }
  IN3* getIN3_23(size_t index = 0) {
    return (IN3*)this->getObjectSafe(index, REF_I12_IN3_23);
  }
  OBR* getOBR_24(size_t index = 0) {
    return (OBR*)this->getObjectSafe(index, REF_I12_OBR_24);
  }
  NTE* getNTE_25(size_t index = 0) {
    return (NTE*)this->getObjectSafe(index, REF_I12_NTE_25);
  }
  OBX* getOBX_27(size_t index = 0) {
    return (OBX*)this->getObjectSafe(index, REF_I12_OBX_27);
  }
  PRT* getPRT_28(size_t index = 0) {
    return (PRT*)this->getObjectSafe(index, REF_I12_PRT_28);
  }
  NTE* getNTE_29(size_t index = 0) {
    return (NTE*)this->getObjectSafe(index, REF_I12_NTE_29);
  }
  PV1* getPV1_30(size_t index = 0) {
    return (PV1*)this->getObjectSafe(index, REF_I12_PV1_30);
  }
  PV2* getPV2_31(size_t index = 0) {
    return (PV2*)this->getObjectSafe(index, REF_I12_PV2_31);
  }
  PR1* getPR1_32(size_t index = 0) {
    return (PR1*)this->getObjectSafe(index, REF_I12_PR1_32);
  }
  AUT* getAUT_34(size_t index = 0) {
    return (AUT*)this->getObjectSafe(index, REF_I12_AUT_34);
  }
  CTD* getCTD_35(size_t index = 0) {
    return (CTD*)this->getObjectSafe(index, REF_I12_CTD_35);
  }
  PRD* getPRD_36(size_t index = 0) {
    return (PRD*)this->getObjectSafe(index, REF_I12_PRD_36);
  }
  CTD* getCTD_37(size_t index = 0) {
    return (CTD*)this->getObjectSafe(index, REF_I12_CTD_37);
  }

  /* Checker list */
  bool isMSH_1(size_t index = 0) {
    try {
      return this->getObject(index, REF_I12_MSH_1) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isSFT_2(size_t index = 0) {
    try {
      return this->getObject(index, REF_I12_SFT_2) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isUAC_3(size_t index = 0) {
    try {
      return this->getObject(index, REF_I12_UAC_3) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isRF1_4(size_t index = 0) {
    try {
      return this->getObject(index, REF_I12_RF1_4) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isPID_7(size_t index = 0) {
    try {
      return this->getObject(index, REF_I12_PID_7) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isNK1_8(size_t index = 0) {
    try {
      return this->getObject(index, REF_I12_NK1_8) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isGT1_9(size_t index = 0) {
    try {
      return this->getObject(index, REF_I12_GT1_9) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isACC_11(size_t index = 0) {
    try {
      return this->getObject(index, REF_I12_ACC_11) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isDG1_12(size_t index = 0) {
    try {
      return this->getObject(index, REF_I12_DG1_12) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isDRG_13(size_t index = 0) {
    try {
      return this->getObject(index, REF_I12_DRG_13) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isAL1_14(size_t index = 0) {
    try {
      return this->getObject(index, REF_I12_AL1_14) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isNTE_18(size_t index = 0) {
    try {
      return this->getObject(index, REF_I12_NTE_18) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isAUT_19(size_t index = 0) {
    try {
      return this->getObject(index, REF_I12_AUT_19) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isCTD_20(size_t index = 0) {
    try {
      return this->getObject(index, REF_I12_CTD_20) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isIN1_21(size_t index = 0) {
    try {
      return this->getObject(index, REF_I12_IN1_21) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isIN2_22(size_t index = 0) {
    try {
      return this->getObject(index, REF_I12_IN2_22) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isIN3_23(size_t index = 0) {
    try {
      return this->getObject(index, REF_I12_IN3_23) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isOBR_24(size_t index = 0) {
    try {
      return this->getObject(index, REF_I12_OBR_24) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isNTE_25(size_t index = 0) {
    try {
      return this->getObject(index, REF_I12_NTE_25) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isOBX_27(size_t index = 0) {
    try {
      return this->getObject(index, REF_I12_OBX_27) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isPRT_28(size_t index = 0) {
    try {
      return this->getObject(index, REF_I12_PRT_28) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isNTE_29(size_t index = 0) {
    try {
      return this->getObject(index, REF_I12_NTE_29) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isPV1_30(size_t index = 0) {
    try {
      return this->getObject(index, REF_I12_PV1_30) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isPV2_31(size_t index = 0) {
    try {
      return this->getObject(index, REF_I12_PV2_31) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isPR1_32(size_t index = 0) {
    try {
      return this->getObject(index, REF_I12_PR1_32) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isAUT_34(size_t index = 0) {
    try {
      return this->getObject(index, REF_I12_AUT_34) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isCTD_35(size_t index = 0) {
    try {
      return this->getObject(index, REF_I12_CTD_35) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isPRD_36(size_t index = 0) {
    try {
      return this->getObject(index, REF_I12_PRD_36) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isCTD_37(size_t index = 0) {
    try {
      return this->getObject(index, REF_I12_CTD_37) != NULL;
    } catch (...) {
    }
    return false;
  }
}; /* REF_I12_ */
} /* namespace HL7_281 */
#endif /*  __REF_I12__281_H__ */
