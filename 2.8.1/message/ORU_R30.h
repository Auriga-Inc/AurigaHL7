/*
 * hacca - C Toolkit for the HL7 Protocol
 *
 * Warning: This file was automatically generated by [hawk], please do not edit.
 *          Thu 25 Jun 19:05:23 CEST 2020
 *
 * R. Carbone (rocco@tecsiel.it)
 * Jun 2020
 *
 * SPDX-License-Identifier: BSD-2-Clause-FreeBSD
 *
 * This file was developed as part of the ongoing activities related
 * to the design, implementation and execution of interoperability tests
 * between hacca-based versus AurigaHL7-based applications.
 *
 * In more details I decided to extend AurigaHL7 C++ Library with header files
 * implementing HL7 structures of the version 2.8.1 of the protocol (April 2014)
 * because the version 2.4 distributed with AurigaHL7 is a bit outdated (October 2000).
 *
 * All files in this fork was automatically generated by hacca-based tool [hawk]
 * and strictly follow the syntax and convention originally defined
 * by Auriga HL7 C++ Library just as form of continuity, convenience
 * and respect for their superb work.
 */


#ifndef __ORU_R30__281_H__
#define __ORU_R30__281_H__

#include "../../common/Util.h"
#include "../segment/ARV.h"
#include "../segment/MSH.h"
#include "../segment/NTE.h"
#include "../segment/OBR.h"
#include "../segment/OBX.h"
#include "../segment/ORC.h"
#include "../segment/PD1.h"
#include "../segment/PID.h"
#include "../segment/PRT.h"
#include "../segment/PV1.h"
#include "../segment/PV2.h"
#include "../segment/SFT.h"
#include "../segment/TQ1.h"
#include "../segment/TQ2.h"
#include "../segment/UAC.h"

namespace HL7_281 {

/* Internal structures/groups */
struct ORU_R30_PATIENT_OBSERVATION; /* PATIENT_OBSERVATION */
struct ORU_R30_VISIT; /* VISIT */
struct ORU_R30_TIMING_QTY; /* TIMING_QTY */
struct ORU_R30_OBSERVATION; /* OBSERVATION */

/* PATIENT_OBSERVATION */
struct ORU_R30_PATIENT_OBSERVATION : public HL7Group {
  ORU_R30_PATIENT_OBSERVATION() { this->init(); }
  /* Fields ID  */
  enum FIELD_ID {
    ORU_R30_OBX_1,
    ORU_R30_PRT_2,
    FIELD_ID_MAX
  };

  const char* className() const { return "ORU_R30_PATIENT_OBSERVATION"; }
  ORU_R30_PATIENT_OBSERVATION* create() const { return new ORU_R30_PATIENT_OBSERVATION(); }

 private:
  /* Initialize object */
  void init() {
    setName("ORU_R30.PATIENT_OBSERVATION");
    addObject<OBX>(ORU_R30_OBX_1, "OBX.1", HL7::optional, HL7::repetition_on);
    addObject<PRT>(ORU_R30_PRT_2, "PRT.2", HL7::optional, HL7::repetition_on);
  }

 public:
  /* Getters list */
  OBX* getOBX_1(size_t index = 0) {
    return (OBX*)this->getObjectSafe(index, ORU_R30_OBX_1);
  }
  PRT* getPRT_2(size_t index = 0) {
    return (PRT*)this->getObjectSafe(index, ORU_R30_PRT_2);
  }

  /* Checker list */
  bool isOBX_1(size_t index = 0) {
    try {
      return this->getObject(index, ORU_R30_OBX_1) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isPRT_2(size_t index = 0) {
    try {
      return this->getObject(index, ORU_R30_PRT_2) != NULL;
    } catch (...) {
    }
    return false;
  }
}; /* ORU_R30_PATIENT_OBSERVATION */

/* VISIT */
struct ORU_R30_VISIT : public HL7Group {
  ORU_R30_VISIT() { this->init(); }
  /* Fields ID  */
  enum FIELD_ID {
    ORU_R30_PRT_1,
    ORU_R30_PV1_2,
    ORU_R30_PV2_3,
    FIELD_ID_MAX
  };

  const char* className() const { return "ORU_R30_VISIT"; }
  ORU_R30_VISIT* create() const { return new ORU_R30_VISIT(); }

 private:
  /* Initialize object */
  void init() {
    setName("ORU_R30.VISIT");
    addObject<PRT>(ORU_R30_PRT_1, "PRT.1", HL7::optional, HL7::repetition_on);
    addObject<PV1>(ORU_R30_PV1_2, "PV1.2", HL7::optional, HL7::repetition_on);
    addObject<PV2>(ORU_R30_PV2_3, "PV2.3", HL7::optional, HL7::repetition_on);
  }

 public:
  /* Getters list */
  PRT* getPRT_1(size_t index = 0) {
    return (PRT*)this->getObjectSafe(index, ORU_R30_PRT_1);
  }
  PV1* getPV1_2(size_t index = 0) {
    return (PV1*)this->getObjectSafe(index, ORU_R30_PV1_2);
  }
  PV2* getPV2_3(size_t index = 0) {
    return (PV2*)this->getObjectSafe(index, ORU_R30_PV2_3);
  }

  /* Checker list */
  bool isPRT_1(size_t index = 0) {
    try {
      return this->getObject(index, ORU_R30_PRT_1) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isPV1_2(size_t index = 0) {
    try {
      return this->getObject(index, ORU_R30_PV1_2) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isPV2_3(size_t index = 0) {
    try {
      return this->getObject(index, ORU_R30_PV2_3) != NULL;
    } catch (...) {
    }
    return false;
  }
}; /* ORU_R30_VISIT */

/* TIMING_QTY */
struct ORU_R30_TIMING_QTY : public HL7Group {
  ORU_R30_TIMING_QTY() { this->init(); }
  /* Fields ID  */
  enum FIELD_ID {
    ORU_R30_TQ1_1,
    ORU_R30_TQ2_2,
    FIELD_ID_MAX
  };

  const char* className() const { return "ORU_R30_TIMING_QTY"; }
  ORU_R30_TIMING_QTY* create() const { return new ORU_R30_TIMING_QTY(); }

 private:
  /* Initialize object */
  void init() {
    setName("ORU_R30.TIMING_QTY");
    addObject<TQ1>(ORU_R30_TQ1_1, "TQ1.1", HL7::optional, HL7::repetition_on);
    addObject<TQ2>(ORU_R30_TQ2_2, "TQ2.2", HL7::optional, HL7::repetition_on);
  }

 public:
  /* Getters list */
  TQ1* getTQ1_1(size_t index = 0) {
    return (TQ1*)this->getObjectSafe(index, ORU_R30_TQ1_1);
  }
  TQ2* getTQ2_2(size_t index = 0) {
    return (TQ2*)this->getObjectSafe(index, ORU_R30_TQ2_2);
  }

  /* Checker list */
  bool isTQ1_1(size_t index = 0) {
    try {
      return this->getObject(index, ORU_R30_TQ1_1) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isTQ2_2(size_t index = 0) {
    try {
      return this->getObject(index, ORU_R30_TQ2_2) != NULL;
    } catch (...) {
    }
    return false;
  }
}; /* ORU_R30_TIMING_QTY */

/* OBSERVATION */
struct ORU_R30_OBSERVATION : public HL7Group {
  ORU_R30_OBSERVATION() { this->init(); }
  /* Fields ID  */
  enum FIELD_ID {
    ORU_R30_NTE_1,
    ORU_R30_OBX_2,
    ORU_R30_PRT_3,
    FIELD_ID_MAX
  };

  const char* className() const { return "ORU_R30_OBSERVATION"; }
  ORU_R30_OBSERVATION* create() const { return new ORU_R30_OBSERVATION(); }

 private:
  /* Initialize object */
  void init() {
    setName("ORU_R30.OBSERVATION");
    addObject<NTE>(ORU_R30_NTE_1, "NTE.1", HL7::optional, HL7::repetition_on);
    addObject<OBX>(ORU_R30_OBX_2, "OBX.2", HL7::optional, HL7::repetition_on);
    addObject<PRT>(ORU_R30_PRT_3, "PRT.3", HL7::optional, HL7::repetition_on);
  }

 public:
  /* Getters list */
  NTE* getNTE_1(size_t index = 0) {
    return (NTE*)this->getObjectSafe(index, ORU_R30_NTE_1);
  }
  OBX* getOBX_2(size_t index = 0) {
    return (OBX*)this->getObjectSafe(index, ORU_R30_OBX_2);
  }
  PRT* getPRT_3(size_t index = 0) {
    return (PRT*)this->getObjectSafe(index, ORU_R30_PRT_3);
  }

  /* Checker list */
  bool isNTE_1(size_t index = 0) {
    try {
      return this->getObject(index, ORU_R30_NTE_1) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isOBX_2(size_t index = 0) {
    try {
      return this->getObject(index, ORU_R30_OBX_2) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isPRT_3(size_t index = 0) {
    try {
      return this->getObject(index, ORU_R30_PRT_3) != NULL;
    } catch (...) {
    }
    return false;
  }
}; /* ORU_R30_OBSERVATION */

/* ORU_R30 */
struct ORU_R30 : public HL7Message {
  ORU_R30() { this->init(); }
  /* Fields ID  */
  enum FIELD_ID {
    ORU_R30_MSH_1,
    ORU_R30_SFT_2,
    ORU_R30_UAC_3,
    ORU_R30_PID_4,
    ORU_R30_PD1_5,
    ORU_R30_PRT_6,
    ORU_R30_ARV_7,
    ORU_R30_ORC_10,
    ORU_R30_PRT_11,
    ORU_R30_OBR_12,
    ORU_R30_NTE_13,
    ORU_R30_PRT_14,
    ORU_R30_OBX_17,
    ORU_R30_PRT_18,
    ORU_R30_NTE_19,
    ORU_R30_OBX_20,
    ORU_R30_PRT_21,
    ORU_R30_TQ1_22,
    ORU_R30_TQ2_23,
    ORU_R30_PV1_24,
    ORU_R30_PV2_25,
    ORU_R30_PRT_26,
    FIELD_ID_MAX
  };

  const char* className() const { return "ORU_R30"; }
  ORU_R30* create() const { return new ORU_R30(); }

 private:
  /* Initialize object */
  void init() {
    setName("ORU_R30");
    addObject<MSH>(ORU_R30_MSH_1, "MSH.1", HL7::initialized, HL7::repetition_off);
    addObject<SFT>(ORU_R30_SFT_2, "SFT.2", HL7::optional, HL7::repetition_on);
    addObject<UAC>(ORU_R30_UAC_3, "UAC.3", HL7::optional, HL7::repetition_off);
    addObject<PID>(ORU_R30_PID_4, "PID.4", HL7::initialized, HL7::repetition_off);
    addObject<PD1>(ORU_R30_PD1_5, "PD1.5", HL7::optional, HL7::repetition_off);
    addObject<PRT>(ORU_R30_PRT_6, "PRT.6", HL7::optional, HL7::repetition_on);
    addObject<ARV>(ORU_R30_ARV_7, "ARV.7", HL7::optional, HL7::repetition_on);
    addObject<ORC>(ORU_R30_ORC_10, "ORC.10", HL7::initialized, HL7::repetition_off);
    addObject<PRT>(ORU_R30_PRT_11, "PRT.11", HL7::optional, HL7::repetition_on);
    addObject<OBR>(ORU_R30_OBR_12, "OBR.12", HL7::initialized, HL7::repetition_off);
    addObject<NTE>(ORU_R30_NTE_13, "NTE.13", HL7::optional, HL7::repetition_on);
    addObject<PRT>(ORU_R30_PRT_14, "PRT.14", HL7::optional, HL7::repetition_on);
    addObject<OBX>(ORU_R30_OBX_17, "OBX.17", HL7::initialized, HL7::repetition_off);
    addObject<PRT>(ORU_R30_PRT_18, "PRT.18", HL7::optional, HL7::repetition_off);
    addObject<NTE>(ORU_R30_NTE_19, "NTE.19", HL7::optional, HL7::repetition_off);
    addObject<OBX>(ORU_R30_OBX_20, "OBX.20", HL7::initialized, HL7::repetition_off);
    addObject<PRT>(ORU_R30_PRT_21, "PRT.21", HL7::optional, HL7::repetition_off);
    addObject<TQ1>(ORU_R30_TQ1_22, "TQ1.22", HL7::initialized, HL7::repetition_off);
    addObject<TQ2>(ORU_R30_TQ2_23, "TQ2.23", HL7::optional, HL7::repetition_off);
    addObject<PV1>(ORU_R30_PV1_24, "PV1.24", HL7::initialized, HL7::repetition_off);
    addObject<PV2>(ORU_R30_PV2_25, "PV2.25", HL7::optional, HL7::repetition_off);
    addObject<PRT>(ORU_R30_PRT_26, "PRT.26", HL7::optional, HL7::repetition_off);
  }

 public:
  /* Getters list */
  MSH* getMSH_1(size_t index = 0) {
    return (MSH*)this->getObjectSafe(index, ORU_R30_MSH_1);
  }
  SFT* getSFT_2(size_t index = 0) {
    return (SFT*)this->getObjectSafe(index, ORU_R30_SFT_2);
  }
  UAC* getUAC_3(size_t index = 0) {
    return (UAC*)this->getObjectSafe(index, ORU_R30_UAC_3);
  }
  PID* getPID_4(size_t index = 0) {
    return (PID*)this->getObjectSafe(index, ORU_R30_PID_4);
  }
  PD1* getPD1_5(size_t index = 0) {
    return (PD1*)this->getObjectSafe(index, ORU_R30_PD1_5);
  }
  PRT* getPRT_6(size_t index = 0) {
    return (PRT*)this->getObjectSafe(index, ORU_R30_PRT_6);
  }
  ARV* getARV_7(size_t index = 0) {
    return (ARV*)this->getObjectSafe(index, ORU_R30_ARV_7);
  }
  ORC* getORC_10(size_t index = 0) {
    return (ORC*)this->getObjectSafe(index, ORU_R30_ORC_10);
  }
  PRT* getPRT_11(size_t index = 0) {
    return (PRT*)this->getObjectSafe(index, ORU_R30_PRT_11);
  }
  OBR* getOBR_12(size_t index = 0) {
    return (OBR*)this->getObjectSafe(index, ORU_R30_OBR_12);
  }
  NTE* getNTE_13(size_t index = 0) {
    return (NTE*)this->getObjectSafe(index, ORU_R30_NTE_13);
  }
  PRT* getPRT_14(size_t index = 0) {
    return (PRT*)this->getObjectSafe(index, ORU_R30_PRT_14);
  }
  OBX* getOBX_17(size_t index = 0) {
    return (OBX*)this->getObjectSafe(index, ORU_R30_OBX_17);
  }
  PRT* getPRT_18(size_t index = 0) {
    return (PRT*)this->getObjectSafe(index, ORU_R30_PRT_18);
  }
  NTE* getNTE_19(size_t index = 0) {
    return (NTE*)this->getObjectSafe(index, ORU_R30_NTE_19);
  }
  OBX* getOBX_20(size_t index = 0) {
    return (OBX*)this->getObjectSafe(index, ORU_R30_OBX_20);
  }
  PRT* getPRT_21(size_t index = 0) {
    return (PRT*)this->getObjectSafe(index, ORU_R30_PRT_21);
  }
  TQ1* getTQ1_22(size_t index = 0) {
    return (TQ1*)this->getObjectSafe(index, ORU_R30_TQ1_22);
  }
  TQ2* getTQ2_23(size_t index = 0) {
    return (TQ2*)this->getObjectSafe(index, ORU_R30_TQ2_23);
  }
  PV1* getPV1_24(size_t index = 0) {
    return (PV1*)this->getObjectSafe(index, ORU_R30_PV1_24);
  }
  PV2* getPV2_25(size_t index = 0) {
    return (PV2*)this->getObjectSafe(index, ORU_R30_PV2_25);
  }
  PRT* getPRT_26(size_t index = 0) {
    return (PRT*)this->getObjectSafe(index, ORU_R30_PRT_26);
  }

  /* Checker list */
  bool isMSH_1(size_t index = 0) {
    try {
      return this->getObject(index, ORU_R30_MSH_1) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isSFT_2(size_t index = 0) {
    try {
      return this->getObject(index, ORU_R30_SFT_2) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isUAC_3(size_t index = 0) {
    try {
      return this->getObject(index, ORU_R30_UAC_3) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isPID_4(size_t index = 0) {
    try {
      return this->getObject(index, ORU_R30_PID_4) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isPD1_5(size_t index = 0) {
    try {
      return this->getObject(index, ORU_R30_PD1_5) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isPRT_6(size_t index = 0) {
    try {
      return this->getObject(index, ORU_R30_PRT_6) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isARV_7(size_t index = 0) {
    try {
      return this->getObject(index, ORU_R30_ARV_7) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isORC_10(size_t index = 0) {
    try {
      return this->getObject(index, ORU_R30_ORC_10) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isPRT_11(size_t index = 0) {
    try {
      return this->getObject(index, ORU_R30_PRT_11) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isOBR_12(size_t index = 0) {
    try {
      return this->getObject(index, ORU_R30_OBR_12) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isNTE_13(size_t index = 0) {
    try {
      return this->getObject(index, ORU_R30_NTE_13) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isPRT_14(size_t index = 0) {
    try {
      return this->getObject(index, ORU_R30_PRT_14) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isOBX_17(size_t index = 0) {
    try {
      return this->getObject(index, ORU_R30_OBX_17) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isPRT_18(size_t index = 0) {
    try {
      return this->getObject(index, ORU_R30_PRT_18) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isNTE_19(size_t index = 0) {
    try {
      return this->getObject(index, ORU_R30_NTE_19) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isOBX_20(size_t index = 0) {
    try {
      return this->getObject(index, ORU_R30_OBX_20) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isPRT_21(size_t index = 0) {
    try {
      return this->getObject(index, ORU_R30_PRT_21) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isTQ1_22(size_t index = 0) {
    try {
      return this->getObject(index, ORU_R30_TQ1_22) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isTQ2_23(size_t index = 0) {
    try {
      return this->getObject(index, ORU_R30_TQ2_23) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isPV1_24(size_t index = 0) {
    try {
      return this->getObject(index, ORU_R30_PV1_24) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isPV2_25(size_t index = 0) {
    try {
      return this->getObject(index, ORU_R30_PV2_25) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isPRT_26(size_t index = 0) {
    try {
      return this->getObject(index, ORU_R30_PRT_26) != NULL;
    } catch (...) {
    }
    return false;
  }
}; /* ORU_R30_ */
} /* namespace HL7_281 */
#endif /*  __ORU_R30__281_H__ */
