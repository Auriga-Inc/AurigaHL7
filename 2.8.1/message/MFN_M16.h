/*
 * hacca - C Toolkit for the HL7 Protocol
 *
 * Warning: This file was automatically generated by [hawk], please do not edit.
 *          Thu 25 Jun 19:03:38 CEST 2020
 *
 * R. Carbone (rocco@tecsiel.it)
 * Jun 2020
 *
 * SPDX-License-Identifier: BSD-2-Clause-FreeBSD
 *
 * This file was developed as part of the ongoing activities related
 * to the design, implementation and execution of interoperability tests
 * between hacca-based versus AurigaHL7-based applications.
 *
 * In more details I decided to extend AurigaHL7 C++ Library with header files
 * implementing HL7 structures of the version 2.8.1 of the protocol (April 2014)
 * because the version 2.4 distributed with AurigaHL7 is a bit outdated (October 2000).
 *
 * All files in this fork was automatically generated by hacca-based tool [hawk]
 * and strictly follow the syntax and convention originally defined
 * by Auriga HL7 C++ Library just as form of continuity, convenience
 * and respect for their superb work.
 */


#ifndef __MFN_M16__281_H__
#define __MFN_M16__281_H__

#include "../../common/Util.h"
#include "../segment/ILT.h"
#include "../segment/ITM.h"
#include "../segment/IVT.h"
#include "../segment/MFE.h"
#include "../segment/MFI.h"
#include "../segment/MSH.h"
#include "../segment/NTE.h"
#include "../segment/PCE.h"
#include "../segment/PKG.h"
#include "../segment/SFT.h"
#include "../segment/STZ.h"
#include "../segment/UAC.h"
#include "../segment/VND.h"

namespace HL7_281 {

/* Internal structures/groups */
struct MFN_M16_MATERIAL_ITEM_RECORD; /* MATERIAL_ITEM_RECORD */
struct MFN_M16_STERILIZATION; /* STERILIZATION */
struct MFN_M16_PURCHASING_VENDOR; /* PURCHASING_VENDOR */
struct MFN_M16_MATERIAL_LOCATION; /* MATERIAL_LOCATION */
struct MFN_M16_PACKAGING; /* PACKAGING */
struct MFN_M16_PACKAGING; /* PACKAGING */

/* MATERIAL_ITEM_RECORD */
struct MFN_M16_MATERIAL_ITEM_RECORD : public HL7Group {
  MFN_M16_MATERIAL_ITEM_RECORD() { this->init(); }
  /* Fields ID  */
  enum FIELD_ID {
    MFN_M16_ITM_1,
    MFN_M16_MFE_2,
    MFN_M16_MFN_M16_MATERIAL_LOCATION_3,
    MFN_M16_MFN_M16_PURCHASING_VENDOR_4,
    MFN_M16_MFN_M16_STERILIZATION_5,
    MFN_M16_NTE_6,
    FIELD_ID_MAX
  };

  const char* className() const { return "MFN_M16_MATERIAL_ITEM_RECORD"; }
  MFN_M16_MATERIAL_ITEM_RECORD* create() const { return new MFN_M16_MATERIAL_ITEM_RECORD(); }

 private:
  /* Initialize object */
  void init() {
    setName("MFN_M16.MATERIAL_ITEM_RECORD");
    addObject<ITM>(MFN_M16_ITM_1, "ITM.1", HL7::optional, HL7::repetition_on);
    addObject<MFE>(MFN_M16_MFE_2, "MFE.2", HL7::optional, HL7::repetition_on);
    addObject<MFN_M16_MATERIAL_LOCATION>(MFN_M16_MFN_M16_MATERIAL_LOCATION_3, "MFN_M16_MATERIAL_LOCATION.3", HL7::optional, HL7::repetition_on);
    addObject<MFN_M16_PURCHASING_VENDOR>(MFN_M16_MFN_M16_PURCHASING_VENDOR_4, "MFN_M16_PURCHASING_VENDOR.4", HL7::optional, HL7::repetition_on);
    addObject<MFN_M16_STERILIZATION>(MFN_M16_MFN_M16_STERILIZATION_5, "MFN_M16_STERILIZATION.5", HL7::optional, HL7::repetition_on);
    addObject<NTE>(MFN_M16_NTE_6, "NTE.6", HL7::optional, HL7::repetition_on);
  }

 public:
  /* Getters list */
  ITM* getITM_1(size_t index = 0) {
    return (ITM*)this->getObjectSafe(index, MFN_M16_ITM_1);
  }
  MFE* getMFE_2(size_t index = 0) {
    return (MFE*)this->getObjectSafe(index, MFN_M16_MFE_2);
  }
  MFN_M16_MATERIAL_LOCATION* getMFN_M16_MATERIAL_LOCATION_3(size_t index = 0) {
    return (MFN_M16_MATERIAL_LOCATION*)this->getObjectSafe(index, MFN_M16_MFN_M16_MATERIAL_LOCATION_3);
  }
  MFN_M16_PURCHASING_VENDOR* getMFN_M16_PURCHASING_VENDOR_4(size_t index = 0) {
    return (MFN_M16_PURCHASING_VENDOR*)this->getObjectSafe(index, MFN_M16_MFN_M16_PURCHASING_VENDOR_4);
  }
  MFN_M16_STERILIZATION* getMFN_M16_STERILIZATION_5(size_t index = 0) {
    return (MFN_M16_STERILIZATION*)this->getObjectSafe(index, MFN_M16_MFN_M16_STERILIZATION_5);
  }
  NTE* getNTE_6(size_t index = 0) {
    return (NTE*)this->getObjectSafe(index, MFN_M16_NTE_6);
  }

  /* Checker list */
  bool isITM_1(size_t index = 0) {
    try {
      return this->getObject(index, MFN_M16_ITM_1) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isMFE_2(size_t index = 0) {
    try {
      return this->getObject(index, MFN_M16_MFE_2) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isMFN_M16_MATERIAL_LOCATION_3(size_t index = 0) {
    try {
      return this->getObject(index, MFN_M16_MFN_M16_MATERIAL_LOCATION_3) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isMFN_M16_PURCHASING_VENDOR_4(size_t index = 0) {
    try {
      return this->getObject(index, MFN_M16_MFN_M16_PURCHASING_VENDOR_4) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isMFN_M16_STERILIZATION_5(size_t index = 0) {
    try {
      return this->getObject(index, MFN_M16_MFN_M16_STERILIZATION_5) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isNTE_6(size_t index = 0) {
    try {
      return this->getObject(index, MFN_M16_NTE_6) != NULL;
    } catch (...) {
    }
    return false;
  }
}; /* MFN_M16_MATERIAL_ITEM_RECORD */

/* STERILIZATION */
struct MFN_M16_STERILIZATION : public HL7Group {
  MFN_M16_STERILIZATION() { this->init(); }
  /* Fields ID  */
  enum FIELD_ID {
    MFN_M16_NTE_1,
    MFN_M16_STZ_2,
    FIELD_ID_MAX
  };

  const char* className() const { return "MFN_M16_STERILIZATION"; }
  MFN_M16_STERILIZATION* create() const { return new MFN_M16_STERILIZATION(); }

 private:
  /* Initialize object */
  void init() {
    setName("MFN_M16.STERILIZATION");
    addObject<NTE>(MFN_M16_NTE_1, "NTE.1", HL7::optional, HL7::repetition_on);
    addObject<STZ>(MFN_M16_STZ_2, "STZ.2", HL7::optional, HL7::repetition_on);
  }

 public:
  /* Getters list */
  NTE* getNTE_1(size_t index = 0) {
    return (NTE*)this->getObjectSafe(index, MFN_M16_NTE_1);
  }
  STZ* getSTZ_2(size_t index = 0) {
    return (STZ*)this->getObjectSafe(index, MFN_M16_STZ_2);
  }

  /* Checker list */
  bool isNTE_1(size_t index = 0) {
    try {
      return this->getObject(index, MFN_M16_NTE_1) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isSTZ_2(size_t index = 0) {
    try {
      return this->getObject(index, MFN_M16_STZ_2) != NULL;
    } catch (...) {
    }
    return false;
  }
}; /* MFN_M16_STERILIZATION */

/* PURCHASING_VENDOR */
struct MFN_M16_PURCHASING_VENDOR : public HL7Group {
  MFN_M16_PURCHASING_VENDOR() { this->init(); }
  /* Fields ID  */
  enum FIELD_ID {
    MFN_M16_MFN_M16_PACKAGING_1,
    MFN_M16_VND_2,
    FIELD_ID_MAX
  };

  const char* className() const { return "MFN_M16_PURCHASING_VENDOR"; }
  MFN_M16_PURCHASING_VENDOR* create() const { return new MFN_M16_PURCHASING_VENDOR(); }

 private:
  /* Initialize object */
  void init() {
    setName("MFN_M16.PURCHASING_VENDOR");
    addObject<MFN_M16_PACKAGING>(MFN_M16_MFN_M16_PACKAGING_1, "MFN_M16_PACKAGING.1", HL7::optional, HL7::repetition_on);
    addObject<VND>(MFN_M16_VND_2, "VND.2", HL7::optional, HL7::repetition_on);
  }

 public:
  /* Getters list */
  MFN_M16_PACKAGING* getMFN_M16_PACKAGING_1(size_t index = 0) {
    return (MFN_M16_PACKAGING*)this->getObjectSafe(index, MFN_M16_MFN_M16_PACKAGING_1);
  }
  VND* getVND_2(size_t index = 0) {
    return (VND*)this->getObjectSafe(index, MFN_M16_VND_2);
  }

  /* Checker list */
  bool isMFN_M16_PACKAGING_1(size_t index = 0) {
    try {
      return this->getObject(index, MFN_M16_MFN_M16_PACKAGING_1) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isVND_2(size_t index = 0) {
    try {
      return this->getObject(index, MFN_M16_VND_2) != NULL;
    } catch (...) {
    }
    return false;
  }
}; /* MFN_M16_PURCHASING_VENDOR */

/* MATERIAL_LOCATION */
struct MFN_M16_MATERIAL_LOCATION : public HL7Group {
  MFN_M16_MATERIAL_LOCATION() { this->init(); }
  /* Fields ID  */
  enum FIELD_ID {
    MFN_M16_ILT_1,
    MFN_M16_IVT_2,
    MFN_M16_NTE_3,
    FIELD_ID_MAX
  };

  const char* className() const { return "MFN_M16_MATERIAL_LOCATION"; }
  MFN_M16_MATERIAL_LOCATION* create() const { return new MFN_M16_MATERIAL_LOCATION(); }

 private:
  /* Initialize object */
  void init() {
    setName("MFN_M16.MATERIAL_LOCATION");
    addObject<ILT>(MFN_M16_ILT_1, "ILT.1", HL7::optional, HL7::repetition_on);
    addObject<IVT>(MFN_M16_IVT_2, "IVT.2", HL7::optional, HL7::repetition_on);
    addObject<NTE>(MFN_M16_NTE_3, "NTE.3", HL7::optional, HL7::repetition_on);
  }

 public:
  /* Getters list */
  ILT* getILT_1(size_t index = 0) {
    return (ILT*)this->getObjectSafe(index, MFN_M16_ILT_1);
  }
  IVT* getIVT_2(size_t index = 0) {
    return (IVT*)this->getObjectSafe(index, MFN_M16_IVT_2);
  }
  NTE* getNTE_3(size_t index = 0) {
    return (NTE*)this->getObjectSafe(index, MFN_M16_NTE_3);
  }

  /* Checker list */
  bool isILT_1(size_t index = 0) {
    try {
      return this->getObject(index, MFN_M16_ILT_1) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isIVT_2(size_t index = 0) {
    try {
      return this->getObject(index, MFN_M16_IVT_2) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isNTE_3(size_t index = 0) {
    try {
      return this->getObject(index, MFN_M16_NTE_3) != NULL;
    } catch (...) {
    }
    return false;
  }
}; /* MFN_M16_MATERIAL_LOCATION */

/* PACKAGING */
struct MFN_M16_PACKAGING : public HL7Group {
  MFN_M16_PACKAGING() { this->init(); }
  /* Fields ID  */
  enum FIELD_ID {
    MFN_M16_PCE_1,
    MFN_M16_PKG_2,
    FIELD_ID_MAX
  };

  const char* className() const { return "MFN_M16_PACKAGING"; }
  MFN_M16_PACKAGING* create() const { return new MFN_M16_PACKAGING(); }

 private:
  /* Initialize object */
  void init() {
    setName("MFN_M16.PACKAGING");
    addObject<PCE>(MFN_M16_PCE_1, "PCE.1", HL7::optional, HL7::repetition_on);
    addObject<PKG>(MFN_M16_PKG_2, "PKG.2", HL7::optional, HL7::repetition_on);
  }

 public:
  /* Getters list */
  PCE* getPCE_1(size_t index = 0) {
    return (PCE*)this->getObjectSafe(index, MFN_M16_PCE_1);
  }
  PKG* getPKG_2(size_t index = 0) {
    return (PKG*)this->getObjectSafe(index, MFN_M16_PKG_2);
  }

  /* Checker list */
  bool isPCE_1(size_t index = 0) {
    try {
      return this->getObject(index, MFN_M16_PCE_1) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isPKG_2(size_t index = 0) {
    try {
      return this->getObject(index, MFN_M16_PKG_2) != NULL;
    } catch (...) {
    }
    return false;
  }
}; /* MFN_M16_PACKAGING */

/* MFN_M16 */
struct MFN_M16 : public HL7Message {
  MFN_M16() { this->init(); }
  /* Fields ID  */
  enum FIELD_ID {
    MFN_M16_MSH_1,
    MFN_M16_SFT_2,
    MFN_M16_UAC_3,
    MFN_M16_MFI_4,
    MFN_M16_MFE_6,
    MFN_M16_ITM_7,
    MFN_M16_NTE_8,
    MFN_M16_STZ_12,
    MFN_M16_NTE_13,
    MFN_M16_STZ_14,
    MFN_M16_NTE_15,
    MFN_M16_VND_16,
    MFN_M16_PKG_18,
    MFN_M16_PCE_19,
    MFN_M16_STZ_20,
    MFN_M16_NTE_21,
    MFN_M16_VND_22,
    MFN_M16_IVT_24,
    MFN_M16_ILT_25,
    MFN_M16_NTE_26,
    MFN_M16_PKG_27,
    MFN_M16_PCE_28,
    FIELD_ID_MAX
  };

  const char* className() const { return "MFN_M16"; }
  MFN_M16* create() const { return new MFN_M16(); }

 private:
  /* Initialize object */
  void init() {
    setName("MFN_M16");
    addObject<MSH>(MFN_M16_MSH_1, "MSH.1", HL7::initialized, HL7::repetition_off);
    addObject<SFT>(MFN_M16_SFT_2, "SFT.2", HL7::optional, HL7::repetition_on);
    addObject<UAC>(MFN_M16_UAC_3, "UAC.3", HL7::optional, HL7::repetition_off);
    addObject<MFI>(MFN_M16_MFI_4, "MFI.4", HL7::initialized, HL7::repetition_off);
    addObject<MFE>(MFN_M16_MFE_6, "MFE.6", HL7::initialized, HL7::repetition_off);
    addObject<ITM>(MFN_M16_ITM_7, "ITM.7", HL7::initialized, HL7::repetition_off);
    addObject<NTE>(MFN_M16_NTE_8, "NTE.8", HL7::optional, HL7::repetition_off);
    addObject<STZ>(MFN_M16_STZ_12, "STZ.12", HL7::initialized, HL7::repetition_off);
    addObject<NTE>(MFN_M16_NTE_13, "NTE.13", HL7::optional, HL7::repetition_off);
    addObject<STZ>(MFN_M16_STZ_14, "STZ.14", HL7::initialized, HL7::repetition_off);
    addObject<NTE>(MFN_M16_NTE_15, "NTE.15", HL7::optional, HL7::repetition_off);
    addObject<VND>(MFN_M16_VND_16, "VND.16", HL7::initialized, HL7::repetition_off);
    addObject<PKG>(MFN_M16_PKG_18, "PKG.18", HL7::initialized, HL7::repetition_off);
    addObject<PCE>(MFN_M16_PCE_19, "PCE.19", HL7::optional, HL7::repetition_off);
    addObject<STZ>(MFN_M16_STZ_20, "STZ.20", HL7::initialized, HL7::repetition_off);
    addObject<NTE>(MFN_M16_NTE_21, "NTE.21", HL7::optional, HL7::repetition_off);
    addObject<VND>(MFN_M16_VND_22, "VND.22", HL7::initialized, HL7::repetition_off);
    addObject<IVT>(MFN_M16_IVT_24, "IVT.24", HL7::initialized, HL7::repetition_off);
    addObject<ILT>(MFN_M16_ILT_25, "ILT.25", HL7::optional, HL7::repetition_off);
    addObject<NTE>(MFN_M16_NTE_26, "NTE.26", HL7::optional, HL7::repetition_off);
    addObject<PKG>(MFN_M16_PKG_27, "PKG.27", HL7::initialized, HL7::repetition_off);
    addObject<PCE>(MFN_M16_PCE_28, "PCE.28", HL7::optional, HL7::repetition_off);
  }

 public:
  /* Getters list */
  MSH* getMSH_1(size_t index = 0) {
    return (MSH*)this->getObjectSafe(index, MFN_M16_MSH_1);
  }
  SFT* getSFT_2(size_t index = 0) {
    return (SFT*)this->getObjectSafe(index, MFN_M16_SFT_2);
  }
  UAC* getUAC_3(size_t index = 0) {
    return (UAC*)this->getObjectSafe(index, MFN_M16_UAC_3);
  }
  MFI* getMFI_4(size_t index = 0) {
    return (MFI*)this->getObjectSafe(index, MFN_M16_MFI_4);
  }
  MFE* getMFE_6(size_t index = 0) {
    return (MFE*)this->getObjectSafe(index, MFN_M16_MFE_6);
  }
  ITM* getITM_7(size_t index = 0) {
    return (ITM*)this->getObjectSafe(index, MFN_M16_ITM_7);
  }
  NTE* getNTE_8(size_t index = 0) {
    return (NTE*)this->getObjectSafe(index, MFN_M16_NTE_8);
  }
  STZ* getSTZ_12(size_t index = 0) {
    return (STZ*)this->getObjectSafe(index, MFN_M16_STZ_12);
  }
  NTE* getNTE_13(size_t index = 0) {
    return (NTE*)this->getObjectSafe(index, MFN_M16_NTE_13);
  }
  STZ* getSTZ_14(size_t index = 0) {
    return (STZ*)this->getObjectSafe(index, MFN_M16_STZ_14);
  }
  NTE* getNTE_15(size_t index = 0) {
    return (NTE*)this->getObjectSafe(index, MFN_M16_NTE_15);
  }
  VND* getVND_16(size_t index = 0) {
    return (VND*)this->getObjectSafe(index, MFN_M16_VND_16);
  }
  PKG* getPKG_18(size_t index = 0) {
    return (PKG*)this->getObjectSafe(index, MFN_M16_PKG_18);
  }
  PCE* getPCE_19(size_t index = 0) {
    return (PCE*)this->getObjectSafe(index, MFN_M16_PCE_19);
  }
  STZ* getSTZ_20(size_t index = 0) {
    return (STZ*)this->getObjectSafe(index, MFN_M16_STZ_20);
  }
  NTE* getNTE_21(size_t index = 0) {
    return (NTE*)this->getObjectSafe(index, MFN_M16_NTE_21);
  }
  VND* getVND_22(size_t index = 0) {
    return (VND*)this->getObjectSafe(index, MFN_M16_VND_22);
  }
  IVT* getIVT_24(size_t index = 0) {
    return (IVT*)this->getObjectSafe(index, MFN_M16_IVT_24);
  }
  ILT* getILT_25(size_t index = 0) {
    return (ILT*)this->getObjectSafe(index, MFN_M16_ILT_25);
  }
  NTE* getNTE_26(size_t index = 0) {
    return (NTE*)this->getObjectSafe(index, MFN_M16_NTE_26);
  }
  PKG* getPKG_27(size_t index = 0) {
    return (PKG*)this->getObjectSafe(index, MFN_M16_PKG_27);
  }
  PCE* getPCE_28(size_t index = 0) {
    return (PCE*)this->getObjectSafe(index, MFN_M16_PCE_28);
  }

  /* Checker list */
  bool isMSH_1(size_t index = 0) {
    try {
      return this->getObject(index, MFN_M16_MSH_1) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isSFT_2(size_t index = 0) {
    try {
      return this->getObject(index, MFN_M16_SFT_2) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isUAC_3(size_t index = 0) {
    try {
      return this->getObject(index, MFN_M16_UAC_3) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isMFI_4(size_t index = 0) {
    try {
      return this->getObject(index, MFN_M16_MFI_4) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isMFE_6(size_t index = 0) {
    try {
      return this->getObject(index, MFN_M16_MFE_6) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isITM_7(size_t index = 0) {
    try {
      return this->getObject(index, MFN_M16_ITM_7) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isNTE_8(size_t index = 0) {
    try {
      return this->getObject(index, MFN_M16_NTE_8) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isSTZ_12(size_t index = 0) {
    try {
      return this->getObject(index, MFN_M16_STZ_12) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isNTE_13(size_t index = 0) {
    try {
      return this->getObject(index, MFN_M16_NTE_13) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isSTZ_14(size_t index = 0) {
    try {
      return this->getObject(index, MFN_M16_STZ_14) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isNTE_15(size_t index = 0) {
    try {
      return this->getObject(index, MFN_M16_NTE_15) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isVND_16(size_t index = 0) {
    try {
      return this->getObject(index, MFN_M16_VND_16) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isPKG_18(size_t index = 0) {
    try {
      return this->getObject(index, MFN_M16_PKG_18) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isPCE_19(size_t index = 0) {
    try {
      return this->getObject(index, MFN_M16_PCE_19) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isSTZ_20(size_t index = 0) {
    try {
      return this->getObject(index, MFN_M16_STZ_20) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isNTE_21(size_t index = 0) {
    try {
      return this->getObject(index, MFN_M16_NTE_21) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isVND_22(size_t index = 0) {
    try {
      return this->getObject(index, MFN_M16_VND_22) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isIVT_24(size_t index = 0) {
    try {
      return this->getObject(index, MFN_M16_IVT_24) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isILT_25(size_t index = 0) {
    try {
      return this->getObject(index, MFN_M16_ILT_25) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isNTE_26(size_t index = 0) {
    try {
      return this->getObject(index, MFN_M16_NTE_26) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isPKG_27(size_t index = 0) {
    try {
      return this->getObject(index, MFN_M16_PKG_27) != NULL;
    } catch (...) {
    }
    return false;
  }
  bool isPCE_28(size_t index = 0) {
    try {
      return this->getObject(index, MFN_M16_PCE_28) != NULL;
    } catch (...) {
    }
    return false;
  }
}; /* MFN_M16_ */
} /* namespace HL7_281 */
#endif /*  __MFN_M16__281_H__ */
