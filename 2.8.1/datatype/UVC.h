/*
 * hacca - C Toolkit for the HL7 Protocol
 *
 * Warning: This file was automatically generated by [hawk], please do not edit.
 *          Thu 25 Jun 18:58:52 CEST 2020
 *
 * R. Carbone (rocco@tecsiel.it)
 * Jun 2020
 *
 * SPDX-License-Identifier: BSD-2-Clause-FreeBSD
 *
 * This file was developed as part of the ongoing activities related
 * to the design, implementation and execution of interoperability tests
 * between hacca-based versus AurigaHL7-based applications.
 *
 * In more details I decided to extend AurigaHL7 C++ Library with header files
 * implementing HL7 structures of the version 2.8.1 of the protocol (April 2014)
 * because the version 2.4 distributed with AurigaHL7 is a bit outdated (October 2000).
 *
 * All files in this fork was automatically generated by hacca-based tool [hawk]
 * and strictly follow the syntax and convention originally defined
 * by Auriga HL7 C++ Library just as form of continuity, convenience
 * and respect for their superb work.
 */


#ifndef __UVC_v281_H__
#define __UVC_v281_H__

#include "../../common/Util.h"
#include "../datatype/CWE.h"
#include "../datatype/MO.h"
#include "../datatype/NM.h"

namespace HL7_281 {

/* UB Value Code and Amount */
class UVC : public HL7Data {
 public:
  UVC() { this->init(); }

 private:
  /* Field ID */
  enum FIELD_ID {
    UVC_1, /* Value Code */
    UVC_2, /* Value Amount */
    UVC_3, /* Non-Monetary Value Amount / Quantity */
    UVC_4, /* Non-Monetary Value Amount / Units */
    FIELD_ID_MAX
  };

 public:
  const char *className() const { return "UVC"; }
  UVC *create() const { return new UVC(); }

 private:
  void init() {
    setName("UVC");
    /* Init members */
    addObject<CWE>(UVC_1, "UVC.1", HL7::initialized, HL7::repetition_off);
    addObject<MO>(UVC_2, "UVC.2", HL7::initialized, HL7::repetition_off);
    addObject<NM>(UVC_3, "UVC.3", HL7::initialized, HL7::repetition_off);
    addObject<CWE>(UVC_4, "UVC.4", HL7::initialized, HL7::repetition_off);
  }

 public:
  /* Getters */
  /****************************************
   * Value Code
   */
  CWE *getUVC_1(size_t index = 0) {
    return (CWE *)this->getObjectSafe(index, UVC_1);
  }

  CWE *getValueCode(size_t index = 0) {
    return (CWE *)this->getObjectSafe(index, UVC_1);
  }

  bool isUVC_1(size_t index = 0) {
    try {
      return this->getObject(index, UVC_1) != NULL;
    } catch (...) {
    }
    return false;
  }

  bool isValueCode(size_t index = 0) {
    try {
      return this->getObject(index, UVC_1) != NULL;
    } catch (...) {
    }
    return false;
  }

  /****************************************
   * Value Amount
   */
  MO *getUVC_2(size_t index = 0) {
    return (MO *)this->getObjectSafe(index, UVC_2);
  }

  MO *getValueAmount(size_t index = 0) {
    return (MO *)this->getObjectSafe(index, UVC_2);
  }

  bool isUVC_2(size_t index = 0) {
    try {
      return this->getObject(index, UVC_2) != NULL;
    } catch (...) {
    }
    return false;
  }

  bool isValueAmount(size_t index = 0) {
    try {
      return this->getObject(index, UVC_2) != NULL;
    } catch (...) {
    }
    return false;
  }

  /****************************************
   * Non-Monetary Value Amount / Quantity
   */
  NM *getUVC_3(size_t index = 0) {
    return (NM *)this->getObjectSafe(index, UVC_3);
  }

  NM *getNonMonetaryValueAmountQuantity(size_t index = 0) {
    return (NM *)this->getObjectSafe(index, UVC_3);
  }

  bool isUVC_3(size_t index = 0) {
    try {
      return this->getObject(index, UVC_3) != NULL;
    } catch (...) {
    }
    return false;
  }

  bool isNonMonetaryValueAmountQuantity(size_t index = 0) {
    try {
      return this->getObject(index, UVC_3) != NULL;
    } catch (...) {
    }
    return false;
  }

  /****************************************
   * Non-Monetary Value Amount / Units
   */
  CWE *getUVC_4(size_t index = 0) {
    return (CWE *)this->getObjectSafe(index, UVC_4);
  }

  CWE *getNonMonetaryValueAmountUnits(size_t index = 0) {
    return (CWE *)this->getObjectSafe(index, UVC_4);
  }

  bool isUVC_4(size_t index = 0) {
    try {
      return this->getObject(index, UVC_4) != NULL;
    } catch (...) {
    }
    return false;
  }

  bool isNonMonetaryValueAmountUnits(size_t index = 0) {
    try {
      return this->getObject(index, UVC_4) != NULL;
    } catch (...) {
    }
    return false;
  }

}; /* End UVC */

} /* End HL7_281 */

#endif /* __UVC_v281_H__ */
