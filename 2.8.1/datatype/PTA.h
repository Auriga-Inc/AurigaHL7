/*
 * hacca - C Toolkit for the HL7 Protocol
 *
 * Warning: This file was automatically generated by [hawk], please do not edit.
 *          Thu 25 Jun 18:58:50 CEST 2020
 *
 * R. Carbone (rocco@tecsiel.it)
 * Jun 2020
 *
 * SPDX-License-Identifier: BSD-2-Clause-FreeBSD
 *
 * This file was developed as part of the ongoing activities related
 * to the design, implementation and execution of interoperability tests
 * between hacca-based versus AurigaHL7-based applications.
 *
 * In more details I decided to extend AurigaHL7 C++ Library with header files
 * implementing HL7 structures of the version 2.8.1 of the protocol (April 2014)
 * because the version 2.4 distributed with AurigaHL7 is a bit outdated (October 2000).
 *
 * All files in this fork was automatically generated by hacca-based tool [hawk]
 * and strictly follow the syntax and convention originally defined
 * by Auriga HL7 C++ Library just as form of continuity, convenience
 * and respect for their superb work.
 */


#ifndef __PTA_v281_H__
#define __PTA_v281_H__

#include "../../common/Util.h"
#include "../datatype/CWE.h"
#include "../datatype/MOP.h"
#include "../datatype/ST.h"

namespace HL7_281 {

/* Policy Type and Amount */
class PTA : public HL7Data {
 public:
  PTA() { this->init(); }

 private:
  /* Field ID */
  enum FIELD_ID {
    PTA_1, /* Policy Type */
    PTA_2, /* Amount Class */
    PTA_3, /* Money or Percentage Quantity */
    PTA_4, /* Money or Percentage */
    FIELD_ID_MAX
  };

 public:
  const char *className() const { return "PTA"; }
  PTA *create() const { return new PTA(); }

 private:
  void init() {
    setName("PTA");
    /* Init members */
    addObject<CWE>(PTA_1, "PTA.1", HL7::initialized, HL7::repetition_off);
    addObject<CWE>(PTA_2, "PTA.2", HL7::initialized, HL7::repetition_off);
    addObject<ST>(PTA_3, "PTA.3", HL7::initialized, HL7::repetition_off);
    addObject<MOP>(PTA_4, "PTA.4", HL7::initialized, HL7::repetition_off);
  }

 public:
  /* Getters */
  /****************************************
   * Policy Type
   */
  CWE *getPTA_1(size_t index = 0) {
    return (CWE *)this->getObjectSafe(index, PTA_1);
  }

  CWE *getPolicyType(size_t index = 0) {
    return (CWE *)this->getObjectSafe(index, PTA_1);
  }

  bool isPTA_1(size_t index = 0) {
    try {
      return this->getObject(index, PTA_1) != NULL;
    } catch (...) {
    }
    return false;
  }

  bool isPolicyType(size_t index = 0) {
    try {
      return this->getObject(index, PTA_1) != NULL;
    } catch (...) {
    }
    return false;
  }

  /****************************************
   * Amount Class
   */
  CWE *getPTA_2(size_t index = 0) {
    return (CWE *)this->getObjectSafe(index, PTA_2);
  }

  CWE *getAmountClass(size_t index = 0) {
    return (CWE *)this->getObjectSafe(index, PTA_2);
  }

  bool isPTA_2(size_t index = 0) {
    try {
      return this->getObject(index, PTA_2) != NULL;
    } catch (...) {
    }
    return false;
  }

  bool isAmountClass(size_t index = 0) {
    try {
      return this->getObject(index, PTA_2) != NULL;
    } catch (...) {
    }
    return false;
  }

  /****************************************
   * Money or Percentage Quantity
   */
  ST *getPTA_3(size_t index = 0) {
    return (ST *)this->getObjectSafe(index, PTA_3);
  }

  ST *getMoneyorPercentageQuantity(size_t index = 0) {
    return (ST *)this->getObjectSafe(index, PTA_3);
  }

  bool isPTA_3(size_t index = 0) {
    try {
      return this->getObject(index, PTA_3) != NULL;
    } catch (...) {
    }
    return false;
  }

  bool isMoneyorPercentageQuantity(size_t index = 0) {
    try {
      return this->getObject(index, PTA_3) != NULL;
    } catch (...) {
    }
    return false;
  }

  /****************************************
   * Money or Percentage
   */
  MOP *getPTA_4(size_t index = 0) {
    return (MOP *)this->getObjectSafe(index, PTA_4);
  }

  MOP *getMoneyorPercentage(size_t index = 0) {
    return (MOP *)this->getObjectSafe(index, PTA_4);
  }

  bool isPTA_4(size_t index = 0) {
    try {
      return this->getObject(index, PTA_4) != NULL;
    } catch (...) {
    }
    return false;
  }

  bool isMoneyorPercentage(size_t index = 0) {
    try {
      return this->getObject(index, PTA_4) != NULL;
    } catch (...) {
    }
    return false;
  }

}; /* End PTA */

} /* End HL7_281 */

#endif /* __PTA_v281_H__ */
