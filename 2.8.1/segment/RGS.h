/*
 * hacca - C Toolkit for the HL7 Protocol
 *
 * Warning: This file was automatically generated by [hawk], please do not edit.
 *          Thu 25 Jun 19:00:18 CEST 2020
 *
 * R. Carbone (rocco@tecsiel.it)
 * Jun 2020
 *
 * SPDX-License-Identifier: BSD-2-Clause-FreeBSD
 *
 * This file was developed as part of the ongoing activities related
 * to the design, implementation and execution of interoperability tests
 * between hacca-based versus AurigaHL7-based applications.
 *
 * In more details I decided to extend AurigaHL7 C++ Library with header files
 * implementing HL7 structures of the version 2.8.1 of the protocol (April 2014)
 * because the version 2.4 distributed with AurigaHL7 is a bit outdated (October 2000).
 *
 * All files in this fork was automatically generated by hacca-based tool [hawk]
 * and strictly follow the syntax and convention originally defined
 * by Auriga HL7 C++ Library just as form of continuity, convenience
 * and respect for their superb work.
 */


#ifndef __RGS_v281_H__
#define __RGS_v281_H__

#include "../../common/Util.h"
#include "../datatype/CWE.h"
#include "../datatype/ID.h"
#include "../datatype/SI.h"

namespace HL7_281 {

/* Resource Group */
class RGS : public HL7Segment {
 public:
  RGS() { this->init(); }

 private:
  /* */
  enum FIELD_ID {
    RGS_1,
    RGS_2,
    RGS_3,
    FIELD_ID_MAX
  };

 public:
  const char* className() const { return "RGS"; }
  RGS* create() const { return new RGS(); }

 private:
  void init() {
    setName("RGS");
    /* Init members */
    addObject<SI>(RGS_1, "RGS.1", HL7::initialized, HL7::repetition_off);
    addObject<ID>(RGS_2, "RGS.2", HL7::initialized, HL7::repetition_off);
    addObject<CWE>(RGS_3, "RGS.3", HL7::initialized, HL7::repetition_off);
  }

 public:
  /* Getters */
  /****************************************
   * Set ID - RGS
   */

  SI* getRGS_1(size_t index = 0) {
    return (SI*)this->getObjectSafe(index, RGS_1);
  }

  SI* getSetIDRGS(size_t index = 0) {
    return (SI*)this->getObjectSafe(index, RGS_1);
  }

  bool isRGS_1(size_t index = 0) {
    try {
      return this->getObject(index, RGS_1) != NULL;
    } catch (...) {
    }
    return false;
  }

  bool isSetIDRGS(size_t index = 0) {
    try {
      return this->getObject(index, RGS_1) != NULL;
    } catch (...) {
    }
    return false;
  }

  /****************************************
   * Segment Action Code
   */

  ID* getRGS_2(size_t index = 0) {
    return (ID*)this->getObjectSafe(index, RGS_2);
  }

  ID* getSegmentActionCode(size_t index = 0) {
    return (ID*)this->getObjectSafe(index, RGS_2);
  }

  bool isRGS_2(size_t index = 0) {
    try {
      return this->getObject(index, RGS_2) != NULL;
    } catch (...) {
    }
    return false;
  }

  bool isSegmentActionCode(size_t index = 0) {
    try {
      return this->getObject(index, RGS_2) != NULL;
    } catch (...) {
    }
    return false;
  }

  /****************************************
   * Resource Group ID
   */

  CWE* getRGS_3(size_t index = 0) {
    return (CWE*)this->getObjectSafe(index, RGS_3);
  }

  CWE* getResourceGroupID(size_t index = 0) {
    return (CWE*)this->getObjectSafe(index, RGS_3);
  }

  bool isRGS_3(size_t index = 0) {
    try {
      return this->getObject(index, RGS_3) != NULL;
    } catch (...) {
    }
    return false;
  }

  bool isResourceGroupID(size_t index = 0) {
    try {
      return this->getObject(index, RGS_3) != NULL;
    } catch (...) {
    }
    return false;
  }

}; /* End of RGS */

} /* End of namespace HL7_281 */
#endif /* __RGS_v281_H__ */
