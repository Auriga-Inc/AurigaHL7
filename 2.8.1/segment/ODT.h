/*
 * hacca - C Toolkit for the HL7 Protocol
 *
 * Warning: This file was automatically generated by [hawk], please do not edit.
 *          Thu 25 Jun 18:59:50 CEST 2020
 *
 * R. Carbone (rocco@tecsiel.it)
 * Jun 2020
 *
 * SPDX-License-Identifier: BSD-2-Clause-FreeBSD
 *
 * This file was developed as part of the ongoing activities related
 * to the design, implementation and execution of interoperability tests
 * between hacca-based versus AurigaHL7-based applications.
 *
 * In more details I decided to extend AurigaHL7 C++ Library with header files
 * implementing HL7 structures of the version 2.8.1 of the protocol (April 2014)
 * because the version 2.4 distributed with AurigaHL7 is a bit outdated (October 2000).
 *
 * All files in this fork was automatically generated by hacca-based tool [hawk]
 * and strictly follow the syntax and convention originally defined
 * by Auriga HL7 C++ Library just as form of continuity, convenience
 * and respect for their superb work.
 */


#ifndef __ODT_v281_H__
#define __ODT_v281_H__

#include "../../common/Util.h"
#include "../datatype/CWE.h"
#include "../datatype/ST.h"

namespace HL7_281 {

/* Diet Tray Instructions */
class ODT : public HL7Segment {
 public:
  ODT() { this->init(); }

 private:
  /* */
  enum FIELD_ID {
    ODT_1,
    ODT_2,
    ODT_3,
    FIELD_ID_MAX
  };

 public:
  const char* className() const { return "ODT"; }
  ODT* create() const { return new ODT(); }

 private:
  void init() {
    setName("ODT");
    /* Init members */
    addObject<CWE>(ODT_1, "ODT.1", HL7::initialized, HL7::repetition_off);
    addObject<CWE>(ODT_2, "ODT.2", HL7::initialized, HL7::repetition_off);
    addObject<ST>(ODT_3, "ODT.3", HL7::initialized, HL7::repetition_off);
  }

 public:
  /* Getters */
  /****************************************
   * Tray Type
   */

  CWE* getODT_1(size_t index = 0) {
    return (CWE*)this->getObjectSafe(index, ODT_1);
  }

  CWE* getTrayType(size_t index = 0) {
    return (CWE*)this->getObjectSafe(index, ODT_1);
  }

  bool isODT_1(size_t index = 0) {
    try {
      return this->getObject(index, ODT_1) != NULL;
    } catch (...) {
    }
    return false;
  }

  bool isTrayType(size_t index = 0) {
    try {
      return this->getObject(index, ODT_1) != NULL;
    } catch (...) {
    }
    return false;
  }

  /****************************************
   * Service Period
   */

  CWE* getODT_2(size_t index = 0) {
    return (CWE*)this->getObjectSafe(index, ODT_2);
  }

  CWE* getServicePeriod(size_t index = 0) {
    return (CWE*)this->getObjectSafe(index, ODT_2);
  }

  bool isODT_2(size_t index = 0) {
    try {
      return this->getObject(index, ODT_2) != NULL;
    } catch (...) {
    }
    return false;
  }

  bool isServicePeriod(size_t index = 0) {
    try {
      return this->getObject(index, ODT_2) != NULL;
    } catch (...) {
    }
    return false;
  }

  /****************************************
   * Text Instruction
   */

  ST* getODT_3(size_t index = 0) {
    return (ST*)this->getObjectSafe(index, ODT_3);
  }

  ST* getTextInstruction(size_t index = 0) {
    return (ST*)this->getObjectSafe(index, ODT_3);
  }

  bool isODT_3(size_t index = 0) {
    try {
      return this->getObject(index, ODT_3) != NULL;
    } catch (...) {
    }
    return false;
  }

  bool isTextInstruction(size_t index = 0) {
    try {
      return this->getObject(index, ODT_3) != NULL;
    } catch (...) {
    }
    return false;
  }

}; /* End of ODT */

} /* End of namespace HL7_281 */
#endif /* __ODT_v281_H__ */
